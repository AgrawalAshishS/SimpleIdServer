{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SimpleIdServer SimpleIdServer is an open source framework enabling the support of OPENID, OAUTH2.0, SCIM2.0 and UMA2.0. It streamlines development, configuration and deployment of custom access control servers. Thanks to its modularity and extensibility, SimpleIdServer can be customized to the specific needs of your organization for authentication, authorization and more. Github: https://github.com/simpleidserver/SimpleIdServer Nuget feed: https://www.myget.org/F/advance-ict/api/v3/index.json","title":"Welcome to SimpleIdServer"},{"location":"#welcome-to-simpleidserver","text":"SimpleIdServer is an open source framework enabling the support of OPENID, OAUTH2.0, SCIM2.0 and UMA2.0. It streamlines development, configuration and deployment of custom access control servers. Thanks to its modularity and extensibility, SimpleIdServer can be customized to the specific needs of your organization for authentication, authorization and more. Github: https://github.com/simpleidserver/SimpleIdServer Nuget feed: https://www.myget.org/F/advance-ict/api/v3/index.json","title":"Welcome to SimpleIdServer"},{"location":"bigpicture/","text":"Introduction The SimpleIdServer architecture is made of 11 blocks : Provisioning : Windows service which maintains data consistency between APIS. A common scenario consists to remove user from OPENID and SCIM. BPMN : REST.API service which executes BPMN processes in background. The workflows used to perform credential provisioning are modeled with BPMN. Thanks to this standard the list of steps participating in the workflow can easily be defined by a developer. HumanTask : Human Task REST.API service based on the WS-HumanTask implementation. This API is used by BPMN in order to have human actors participating in the process for example : Update password. OPENID : OPENID identity provider. SAMLIDP : SAML2.0 identity provider. UMA : User Management Access (V2.0) REST.API. The User-Managed Access protocol framework defines a mechanism to allow a resource owner to delegate access to a protected resource for a client application used by requesting party (identify by a set of claims), optionally limited by a set of scopes. SCIM2.0 : SCIM2.0 REST.API. The System for Cross-domain Identity Management (SCIM) specification is designed to make managing user identities in cloud-based applications and services easier. Gateway : Single entry point for all the clients. Website : Administration portal where users with administrator role can manage clients, users and other assets. Message Broker : Events like \u201cUser is added\u201d, \u201cUser is removed\u201d are sent to the message broker. It is mostly used by SimpleIdServer to do provisioning. Database : SQL Server Database where assets are stored.","title":"Big Picture"},{"location":"bigpicture/#introduction","text":"The SimpleIdServer architecture is made of 11 blocks : Provisioning : Windows service which maintains data consistency between APIS. A common scenario consists to remove user from OPENID and SCIM. BPMN : REST.API service which executes BPMN processes in background. The workflows used to perform credential provisioning are modeled with BPMN. Thanks to this standard the list of steps participating in the workflow can easily be defined by a developer. HumanTask : Human Task REST.API service based on the WS-HumanTask implementation. This API is used by BPMN in order to have human actors participating in the process for example : Update password. OPENID : OPENID identity provider. SAMLIDP : SAML2.0 identity provider. UMA : User Management Access (V2.0) REST.API. The User-Managed Access protocol framework defines a mechanism to allow a resource owner to delegate access to a protected resource for a client application used by requesting party (identify by a set of claims), optionally limited by a set of scopes. SCIM2.0 : SCIM2.0 REST.API. The System for Cross-domain Identity Management (SCIM) specification is designed to make managing user identities in cloud-based applications and services easier. Gateway : Single entry point for all the clients. Website : Administration portal where users with administrator role can manage clients, users and other assets. Message Broker : Events like \u201cUser is added\u201d, \u201cUser is removed\u201d are sent to the message broker. It is mostly used by SimpleIdServer to do provisioning. Database : SQL Server Database where assets are stored.","title":"Introduction"},{"location":"fapi/","text":"TODO","title":"FAPI"},{"location":"gettingstarted/","text":"Before you start Make sure you have Docker installed. Start SimpleIdServer Download the docker-compose.yml file and execute the command line docker-compose up . This will start SimpleIdServer exposed on the port 4200. It will also create an initial admin user with username administrator and password password .","title":"Getting Started"},{"location":"gettingstarted/#before-you-start","text":"Make sure you have Docker installed.","title":"Before you start"},{"location":"gettingstarted/#start-simpleidserver","text":"Download the docker-compose.yml file and execute the command line docker-compose up . This will start SimpleIdServer exposed on the port 4200. It will also create an initial admin user with username administrator and password password .","title":"Start SimpleIdServer"},{"location":"openid/","text":"Installation An OPENID server with bootstrap4 theme can be hosted in ASP.NET CORE project. There is one Nuget package per UI theme, at the moment only Bootstrap4 library is supported: Create an empty ASP.NET CORE project. Install the Nuget package SimpleIdServer.OpenID.Bootstrap4 . Run the application and verify JSON is returned when you browse the following url : https://localhost:<sslPort>/.well-known/openid-configuration . By default there is no authentication method, they should be installed separately by the developer. Authentication Methods Authentication Context Class Reference (ACR) The Authentication Context Class Reference (ACR) specifies a set of business rules that the authentications are being requested to satisfy. These rules can often be satisfied by using a number of different authentication methods, either singly or in combination. In short, the Authentication Context Class Reference (ACR) ensures the correctness of the user identity. In SimpleIdServer, the ACR is similar to the Level Of Assurance. The higher your Level Of Assurance, the better the identity of a user can be trusted. Examples of ACR configurations : LOA equals to 1 : new AuthenticationContextClassReference { DisplayName = \u201cFirst Level of Assurance\u201d, Name = \u201csid-load-01\u201d, AuthenticationMethodReferences = new List<string> { \u201cpwd\u201d } } LOA equals to 2 : new AuthenticationContextClassReference { DisplayName = \u201cSecond Level of Assurance\u201d, Name = \u201csid-load-02\u201d, AuthenticationMethodReferences = new List<string> { \u201cpwd\u201d; \u2018sms\u201d } } It\u2019s up to the Relying Party to specify the ACR value, the value is passed in the parameter \u201cacr_values\u201d inside the authorization query. Login Password Authentication Authentication method : pwd Login password authentication with Bootstrap4 theme can be installed like this : Install the Nuget package SimpleIdServer.UI.Authenticate.LoginPassword.Bootstrap4 . In the Startup.cs file, insert the following line at the end of ConfigureServices method : services.AddSIDOpenID().AddLoginPasswordAuthentication() . Run the application and browse the URL : https://localhost:<sslPort>/authorization?client_id=umaClient&redirect_uri=https://localhost:60001/signin-oidc&response_type=code&scope=openid profile&state=state . Authenticate with the credentials : Key Value Login sub Password password Confirm the consent. User agent will be redirected to the callback url https://localhost:60001 , the authorization code is passed in the query. Email Authentication Authentication method : email The bootstrap4 theme will come in the next release. SMS Authentication Authentication method : sms The bootstrap4 theme will come in the next release. Persistence By default, all the assets like \u201cClients\u201d, \u201cScopes\u201d, \u201cUsers\u201d and \u201cJSON Web Keys\u201d are stored in memory. The following data storage can be used. SQLServer Pre-requisite : OPENID server must be installed in the Visual Studio Solution. SQL Server data storage can be configured like this : Install the Nuget package SimpleIdServer.OpenID.EF . Install the Nuget package Microsoft.EntityFrameworkCore.SqlServer . Install the Nuget package Microsoft.EntityFrameworkCore.Design . Create a class \u201cOpenIDMigration\u201d and replace the content with the following code. The namespace and connectionstring must be updated. using Microsoft.EntityFrameworkCore; using Microsoft.EntityFrameworkCore.Design; using SimpleIdServer.OpenID.EF; using System.Reflection; namespace <<NAMESPACE>> { public class OpenIDMigration : IDesignTimeDbContextFactory<OpenIdDBContext> { public OpenIdDBContext CreateDbContext(string[] args) { var migrationsAssembly = typeof(Startup).GetTypeInfo().Assembly.GetName().Name; var builder = new DbContextOptionsBuilder<OpenIdDBContext>(); builder.UseSqlServer(\"<<CONNECTIONSTRING>>\", optionsBuilder => optionsBuilder.MigrationsAssembly(migrationsAssembly)); return new OpenIdDBContext(builder.Options); } } } Open a command prompt, navigate to the directory of your project and execute the command line : dotnet ef add Init . The migration scripts will be created. Execute the command line dotnet ef database update . The tables will be created in the database. Open the \u201cStartup.cs\u201d file, inside the \u201cConfigureServices\u201d procedure add the following line : services .AddSIDOpenID() .AddOpenIDEF(opt => opt.UseSqlServer(\u201c<<CONNECTIONSTRING>>\u201d, o => o.MigrationsAssembly(typeof(Startup).GetTypeInfo().Assembly.GetName().Name));","title":"OPENID"},{"location":"openid/#installation","text":"An OPENID server with bootstrap4 theme can be hosted in ASP.NET CORE project. There is one Nuget package per UI theme, at the moment only Bootstrap4 library is supported: Create an empty ASP.NET CORE project. Install the Nuget package SimpleIdServer.OpenID.Bootstrap4 . Run the application and verify JSON is returned when you browse the following url : https://localhost:<sslPort>/.well-known/openid-configuration . By default there is no authentication method, they should be installed separately by the developer.","title":"Installation"},{"location":"openid/#authentication-methods","text":"","title":"Authentication Methods"},{"location":"openid/#authentication-context-class-reference-acr","text":"The Authentication Context Class Reference (ACR) specifies a set of business rules that the authentications are being requested to satisfy. These rules can often be satisfied by using a number of different authentication methods, either singly or in combination. In short, the Authentication Context Class Reference (ACR) ensures the correctness of the user identity. In SimpleIdServer, the ACR is similar to the Level Of Assurance. The higher your Level Of Assurance, the better the identity of a user can be trusted. Examples of ACR configurations : LOA equals to 1 : new AuthenticationContextClassReference { DisplayName = \u201cFirst Level of Assurance\u201d, Name = \u201csid-load-01\u201d, AuthenticationMethodReferences = new List<string> { \u201cpwd\u201d } } LOA equals to 2 : new AuthenticationContextClassReference { DisplayName = \u201cSecond Level of Assurance\u201d, Name = \u201csid-load-02\u201d, AuthenticationMethodReferences = new List<string> { \u201cpwd\u201d; \u2018sms\u201d } } It\u2019s up to the Relying Party to specify the ACR value, the value is passed in the parameter \u201cacr_values\u201d inside the authorization query.","title":"Authentication Context Class Reference (ACR)"},{"location":"openid/#login-password-authentication","text":"Authentication method : pwd Login password authentication with Bootstrap4 theme can be installed like this : Install the Nuget package SimpleIdServer.UI.Authenticate.LoginPassword.Bootstrap4 . In the Startup.cs file, insert the following line at the end of ConfigureServices method : services.AddSIDOpenID().AddLoginPasswordAuthentication() . Run the application and browse the URL : https://localhost:<sslPort>/authorization?client_id=umaClient&redirect_uri=https://localhost:60001/signin-oidc&response_type=code&scope=openid profile&state=state . Authenticate with the credentials : Key Value Login sub Password password Confirm the consent. User agent will be redirected to the callback url https://localhost:60001 , the authorization code is passed in the query.","title":"Login Password Authentication"},{"location":"openid/#email-authentication","text":"Authentication method : email The bootstrap4 theme will come in the next release.","title":"Email Authentication"},{"location":"openid/#sms-authentication","text":"Authentication method : sms The bootstrap4 theme will come in the next release.","title":"SMS Authentication"},{"location":"openid/#persistence","text":"By default, all the assets like \u201cClients\u201d, \u201cScopes\u201d, \u201cUsers\u201d and \u201cJSON Web Keys\u201d are stored in memory. The following data storage can be used.","title":"Persistence"},{"location":"openid/#sqlserver","text":"Pre-requisite : OPENID server must be installed in the Visual Studio Solution. SQL Server data storage can be configured like this : Install the Nuget package SimpleIdServer.OpenID.EF . Install the Nuget package Microsoft.EntityFrameworkCore.SqlServer . Install the Nuget package Microsoft.EntityFrameworkCore.Design . Create a class \u201cOpenIDMigration\u201d and replace the content with the following code. The namespace and connectionstring must be updated. using Microsoft.EntityFrameworkCore; using Microsoft.EntityFrameworkCore.Design; using SimpleIdServer.OpenID.EF; using System.Reflection; namespace <<NAMESPACE>> { public class OpenIDMigration : IDesignTimeDbContextFactory<OpenIdDBContext> { public OpenIdDBContext CreateDbContext(string[] args) { var migrationsAssembly = typeof(Startup).GetTypeInfo().Assembly.GetName().Name; var builder = new DbContextOptionsBuilder<OpenIdDBContext>(); builder.UseSqlServer(\"<<CONNECTIONSTRING>>\", optionsBuilder => optionsBuilder.MigrationsAssembly(migrationsAssembly)); return new OpenIdDBContext(builder.Options); } } } Open a command prompt, navigate to the directory of your project and execute the command line : dotnet ef add Init . The migration scripts will be created. Execute the command line dotnet ef database update . The tables will be created in the database. Open the \u201cStartup.cs\u201d file, inside the \u201cConfigureServices\u201d procedure add the following line : services .AddSIDOpenID() .AddOpenIDEF(opt => opt.UseSqlServer(\u201c<<CONNECTIONSTRING>>\u201d, o => o.MigrationsAssembly(typeof(Startup).GetTypeInfo().Assembly.GetName().Name));","title":"SQLServer"},{"location":"provisioning/","text":"Introduction The provisioning lets you: Automate Provisioning : Automatically create new accounts in the right systems for new people when they join your team or organization. Automate Deprovisioning : Automatically deactivate accounts in the right systems when people leave the team or organization. Just In Time Provisioning : Automatically create new accounts in the right systems for new people when they authenticate to an external identity provider. Credential Provisioning : Automatically ask to the users to submit their credentials. SCIM2.0 API is the entry point for users and groups management (for more details refer to this part ). It is used by external clients for maintaining data consistency between multiple identity providers for example : between an active Directory and an OPENID Identity Provider. The workflow above describes the user provisioning / deprovisioning implementation made by SimpleIdServer. The credential provisioning is done by a BPMN workflow. A user arrives in the Active Directory. An HTTP REQUEST is sent to the SCIM2.0 API in order to create, update or delete users. An external event is published to the message broker. The message is fetched and processed by the Provisioning windows service. Based on the nature of the message, the windows service executes a sequence of actions : Launch the BPMN workflow and send an HTTP request. The windows service can be configured via the administration portal. If the message received is \u201cnew user\u201d then a BPMN workflow is launched, it will create and assign a human task to the end user. It will be used by the end user to update their credentials. Execute an HTTP request in order to add, delete or update user from one identity provider. Getting started with Provisioning This chapter explains how to automatically provision a user who is authenticating with an external identity provider. This scenario is called \"Just In Time Provisioning\". Before starting, ensure that SimpleIdServer is properly configured and installed on your machine: Open the administration portal and authenticate with an external identity provider (Facebook, SAMLIDP etc\u2026). Key Value Login sub Password password Navigate to the \u201cTasks\u201d page and open the first task. Update your password and click on confirm. Close your session and connect with an administrator account. Key Value Login administrator Password password Navigate to the Users page. Only one user is displayed, it corresponds to the user who authenticate with an external identity provider. Thanks to \"Just In Time provisioning\" mechanism, users who successfully authenticate with external identity providers automatically have local account. Navigate to the Provisioning >> History page. The history of user provisioning is displayed. Click on the link \"Workflow\". The BPMN workflow is used to get password from the end-user. It generates a link, sends and email, create and assign a human task to the end user. By default there is one error in the workflow instance because the SMTP configuration is incorrect. Configure Provisioning The configuration of the provisioning windows service can be updated in the page Provisioning >> Configuration . The following properties can be updated : Property Description tokenEdp URL of the token endpoint. Used by the provisioning service in order to get an access token valid on the scope specified by the property \u201cscopes\u201d. clientId Client Identifier clientSecret Client Secret scopes List of scopes targetUrl URL where the JSON request will be sent httpRequestTemplate This template is used to generate the JSON request. It will be send to the \"targetUrl\". bpmnHost URL of the BPMN REST.API bpmnFileId Identifier of the BPMN file messageToken This template is used to generate the JSON request. It will be sent to the \"bpmnHost\" in order to launch the BPMN workflow. Configure BPMN workflow The BPMN workflow is used to create and assign human tasks to the end-user in order to get the credential. Its definition is accessible in the page \"Provisioning >> Workflows\".","title":"Provisioning"},{"location":"provisioning/#introduction","text":"The provisioning lets you: Automate Provisioning : Automatically create new accounts in the right systems for new people when they join your team or organization. Automate Deprovisioning : Automatically deactivate accounts in the right systems when people leave the team or organization. Just In Time Provisioning : Automatically create new accounts in the right systems for new people when they authenticate to an external identity provider. Credential Provisioning : Automatically ask to the users to submit their credentials. SCIM2.0 API is the entry point for users and groups management (for more details refer to this part ). It is used by external clients for maintaining data consistency between multiple identity providers for example : between an active Directory and an OPENID Identity Provider. The workflow above describes the user provisioning / deprovisioning implementation made by SimpleIdServer. The credential provisioning is done by a BPMN workflow. A user arrives in the Active Directory. An HTTP REQUEST is sent to the SCIM2.0 API in order to create, update or delete users. An external event is published to the message broker. The message is fetched and processed by the Provisioning windows service. Based on the nature of the message, the windows service executes a sequence of actions : Launch the BPMN workflow and send an HTTP request. The windows service can be configured via the administration portal. If the message received is \u201cnew user\u201d then a BPMN workflow is launched, it will create and assign a human task to the end user. It will be used by the end user to update their credentials. Execute an HTTP request in order to add, delete or update user from one identity provider.","title":"Introduction"},{"location":"provisioning/#getting-started-with-provisioning","text":"This chapter explains how to automatically provision a user who is authenticating with an external identity provider. This scenario is called \"Just In Time Provisioning\". Before starting, ensure that SimpleIdServer is properly configured and installed on your machine: Open the administration portal and authenticate with an external identity provider (Facebook, SAMLIDP etc\u2026). Key Value Login sub Password password Navigate to the \u201cTasks\u201d page and open the first task. Update your password and click on confirm. Close your session and connect with an administrator account. Key Value Login administrator Password password Navigate to the Users page. Only one user is displayed, it corresponds to the user who authenticate with an external identity provider. Thanks to \"Just In Time provisioning\" mechanism, users who successfully authenticate with external identity providers automatically have local account. Navigate to the Provisioning >> History page. The history of user provisioning is displayed. Click on the link \"Workflow\". The BPMN workflow is used to get password from the end-user. It generates a link, sends and email, create and assign a human task to the end user. By default there is one error in the workflow instance because the SMTP configuration is incorrect.","title":"Getting started with Provisioning"},{"location":"provisioning/#configure-provisioning","text":"The configuration of the provisioning windows service can be updated in the page Provisioning >> Configuration . The following properties can be updated : Property Description tokenEdp URL of the token endpoint. Used by the provisioning service in order to get an access token valid on the scope specified by the property \u201cscopes\u201d. clientId Client Identifier clientSecret Client Secret scopes List of scopes targetUrl URL where the JSON request will be sent httpRequestTemplate This template is used to generate the JSON request. It will be send to the \"targetUrl\". bpmnHost URL of the BPMN REST.API bpmnFileId Identifier of the BPMN file messageToken This template is used to generate the JSON request. It will be sent to the \"bpmnHost\" in order to launch the BPMN workflow.","title":"Configure Provisioning"},{"location":"provisioning/#configure-bpmn-workflow","text":"The BPMN workflow is used to create and assign human tasks to the end-user in order to get the credential. Its definition is accessible in the page \"Provisioning >> Workflows\".","title":"Configure BPMN workflow"},{"location":"saml20/","text":"TODO","title":"SAML2.0"},{"location":"scim20/","text":"Installation A system for Cross-Domain Identity Management (SCIM2.0) can be hosted in ASP.NET CORE project: Create an empty ASP.NET CORE project. Install the Nuget package SimpleIdServer.SCIM . In the Startup.cs file, insert the following line at the end of the ConfigureServices method : services.AddSIDScim() . In the Startup.cs file, use the function AddAuthentication to add authentication services and use the authentication scheme \u201cSCIMConstants.AuthenticationScheme for example : services.AddAuthentication(SCIMConstants.AuthenticationScheme) .AddCookie(SCIMConstants.AuthenticationScheme); In the Startup.cs file, use the function AddAuthorization to add authorization rules for example : services.AddAuthorization(opts => opts.AddDefaultSCIMAuthorizationPolicy()); Run the application and verify JSON is returned when you browse the following url : https://localhost:<<sslPort>/Schemas . Configure the Schemas` Now the SCIM2.0 API is installed in the Visual Studio Solution, the SCIM Schemas must be configured. There is one Schema per Resource, it defines the list of properties present in a representation. Each property have one or more parameters like : Type, name, uniqueness etc\u2026 In SimpleIdServer, there are two ways to create a SCIM Schema : Load a file : 1.1. Open the project and create a subfolder \u201cSchemas\u201d. 1.2. Download one or more Schemas from the URL into the \u201cSchemas\u201d subfolder. 1.3. Open the Startup.cs file and read the file : var basePath = Path.Combine(_webHostEnvironment.ContentRootPath, \u201cSchemas\u201d); var schema = SCIMSchemaExtractor.Extract(Path.Combine(basePath, \u201c<<SCHEMA>>.json\u201d), SCIMConstants.Endpoints.<<SCHEMA>>, true); Using helper class : The helper class \u201cSCIMSchemaBuilder\u201d is available and it can be used to create SCIM Schema. var schema = SCIMSchemaBuilder.Create(\"urn:dog\") .AddStringAttribute(\"name\") .AddDateTimeAttribute(\"birthdate\") .AddComplexAttribute(\"attributes\", callback: c => { c.AddStringAttribute(\"name\"); c.AddStringAttribute(\"value\"); }, multiValued: true) .Build(); Persistence By default, all the assets like \u201cRepresentation\u201d,\u201dSchemas\u201d are stored in memory. The following data storage can be used. SQLServer Pre-requisite : SCIM2.0 API must be installed in the Visual Studio Solution. SQL Server data storage can be configured like this : Install the Nuget package SimpleIdServer.Scim.Persistence.EF . Install the Nuget package Microsoft.EntityFrameworkCore.SqlServer . Create a class SCIMMigration and replace the content with the following code. The namespace and connectionstring must be updated. using Microsoft.EntityFrameworkCore; using Microsoft.EntityFrameworkCore.Design; using SimpleIdServer.Scim.Persistence.EF; using System.Reflection; namespace <<NAMESPACE>> { public class SCIMMigration : IDesignTimeDbContextFactory<SCIMDbContext> { public SCIMDbContext CreateDbContext(string[] args) { var migrationsAssembly = typeof(Startup).GetTypeInfo().Assembly.GetName().Name; var builder = new DbContextOptionsBuilder<SCIMDbContext>(); builder.UseSqlServer(\"<<CONNECTIONSTRING>>\", optionsBuilder => optionsBuilder.MigrationsAssembly(migrationsAssembly)); return new SCIMDbContext(builder.Options); } } } Open a command prompt, navigate to the directory of your project and execute the command line : dotnet ef add Init . The migration scripts will be created. Execute the command line dotnet ef database update . The tables will be created in the database. Open the \"Startup.cs\" file, inside the \"ConfigureServices\" procedure add the following line : var migrationsAssembly = typeof(Startup).GetTypeInfo().Assembly.GetName().Name; services.AddScimStoreEF(options => { options.UseSqlServer(Configuration.GetConnectionString(\"db\"), o => o.MigrationsAssembly(migrationsAssembly)); }); Open the \u201cStartup.cs\u201d file, create a new private InitializeDatabase method. It will be called by the Configure procedure in order to create the database. Each SCIM Schema must be added into the SCIMSchemaLst collection. private void InitializeDatabase(IApplicationBuilder app) { using (var scope = app.ApplicationServices.GetRequiredService<IServiceScopeFactory>().CreateScope()) { using (var context = scope.ServiceProvider.GetService<SCIMDbContext>()) { context.Database.Migrate(); var userSchema = SCIMSchemaExtractor.Extract(Path.Combine(basePath, \"UserSchema.json\"), SCIMConstants.SCIMEndpoints.User, true); var basePath = Path.Combine(_webHostEnvironment.ContentRootPath, \"Schemas\"); if (!context.SCIMSchemaLst.Any()) { context.SCIMSchemaLst.Add(userSchema.ToModel()); } context.SaveChanges(); } } } Run the application and verify JSON is returned when you browse the following url : https://localhost:<<sslPort>/Schemas . MongoDB Pre-requisite : SCIM2.0 API must be installed in the Visual Studio Solution. MongoDB data storage can be configured like this : Install the Nuget package SimpleIdServer.Scim.Persistence.MongoDB . Open the \u201cStartup.cs\u201d file, inside the ConfigureServices procedure add the following line adn replace the parameters. var basePath = Path.Combine(Env.ContentRootPath, \"Schemas\"); var userSchema = SCIMSchemaExtractor.Extract(Path.Combine(basePath, \"UserSchema.json\"), SCIMConstants.SCIMEndpoints.User, true); var schemas = new List<SCIMSchema> { userSchema }; services.AddScimStoreMongoDB(opt => { opt.ConnectionString = \"<<CONNECTION_STRING>>\"; opt.Database = \"<<DATABASE_NAME>>\"; opt.CollectionSchemas = \u201cmappings\u201d; opt.CollectionSchemas = \u201cschemas\u201d; opt.CollectionRepresentations = \u201drepresentations\u201d; opt.SupportTransaction = <<SUPPORT_TRANSACTION>>; }, schemas); Run the application and verify JSON is returned when you browse the following url : https://localhost:<<sslPort>/Schemas . Swagger There is a problem when swagger is installed in a SCIM2.0 project. All the properties of SCIM representations are documented in the SCIM Schema and by default Swagger is not able to fetch them : Install the Nuget package SimpleIdServer.Scim.Swashbuckle . Open the \u201cStartup.cs\u201d file, copy and past the code below into ConfigureService : services.AddSwaggerGen(c => { var currentAssembly = Assembly.GetExecutingAssembly(); var xmlDocs = currentAssembly.GetReferencedAssemblies() .Union(new AssemblyName[] { currentAssembly.GetName() }) .Select(a => Path.Combine(Path.GetDirectoryName(currentAssembly.Location), $\"{a.Name}.xml\")) .Where(f => File.Exists(f)).ToArray(); Array.ForEach(xmlDocs, (d) => { c.IncludeXmlComments(d); }); }); services.AddSCIMSwagger(); Browse the URL https://localhost:<sslPort>/swagger , the documentation is now fetched from the SCIM Schemas.","title":"SCIM2.0"},{"location":"scim20/#installation","text":"A system for Cross-Domain Identity Management (SCIM2.0) can be hosted in ASP.NET CORE project: Create an empty ASP.NET CORE project. Install the Nuget package SimpleIdServer.SCIM . In the Startup.cs file, insert the following line at the end of the ConfigureServices method : services.AddSIDScim() . In the Startup.cs file, use the function AddAuthentication to add authentication services and use the authentication scheme \u201cSCIMConstants.AuthenticationScheme for example : services.AddAuthentication(SCIMConstants.AuthenticationScheme) .AddCookie(SCIMConstants.AuthenticationScheme); In the Startup.cs file, use the function AddAuthorization to add authorization rules for example : services.AddAuthorization(opts => opts.AddDefaultSCIMAuthorizationPolicy()); Run the application and verify JSON is returned when you browse the following url : https://localhost:<<sslPort>/Schemas .","title":"Installation"},{"location":"scim20/#configure-the-schemas","text":"Now the SCIM2.0 API is installed in the Visual Studio Solution, the SCIM Schemas must be configured. There is one Schema per Resource, it defines the list of properties present in a representation. Each property have one or more parameters like : Type, name, uniqueness etc\u2026 In SimpleIdServer, there are two ways to create a SCIM Schema : Load a file : 1.1. Open the project and create a subfolder \u201cSchemas\u201d. 1.2. Download one or more Schemas from the URL into the \u201cSchemas\u201d subfolder. 1.3. Open the Startup.cs file and read the file : var basePath = Path.Combine(_webHostEnvironment.ContentRootPath, \u201cSchemas\u201d); var schema = SCIMSchemaExtractor.Extract(Path.Combine(basePath, \u201c<<SCHEMA>>.json\u201d), SCIMConstants.Endpoints.<<SCHEMA>>, true); Using helper class : The helper class \u201cSCIMSchemaBuilder\u201d is available and it can be used to create SCIM Schema. var schema = SCIMSchemaBuilder.Create(\"urn:dog\") .AddStringAttribute(\"name\") .AddDateTimeAttribute(\"birthdate\") .AddComplexAttribute(\"attributes\", callback: c => { c.AddStringAttribute(\"name\"); c.AddStringAttribute(\"value\"); }, multiValued: true) .Build();","title":"Configure the Schemas`"},{"location":"scim20/#persistence","text":"By default, all the assets like \u201cRepresentation\u201d,\u201dSchemas\u201d are stored in memory. The following data storage can be used.","title":"Persistence"},{"location":"scim20/#sqlserver","text":"Pre-requisite : SCIM2.0 API must be installed in the Visual Studio Solution. SQL Server data storage can be configured like this : Install the Nuget package SimpleIdServer.Scim.Persistence.EF . Install the Nuget package Microsoft.EntityFrameworkCore.SqlServer . Create a class SCIMMigration and replace the content with the following code. The namespace and connectionstring must be updated. using Microsoft.EntityFrameworkCore; using Microsoft.EntityFrameworkCore.Design; using SimpleIdServer.Scim.Persistence.EF; using System.Reflection; namespace <<NAMESPACE>> { public class SCIMMigration : IDesignTimeDbContextFactory<SCIMDbContext> { public SCIMDbContext CreateDbContext(string[] args) { var migrationsAssembly = typeof(Startup).GetTypeInfo().Assembly.GetName().Name; var builder = new DbContextOptionsBuilder<SCIMDbContext>(); builder.UseSqlServer(\"<<CONNECTIONSTRING>>\", optionsBuilder => optionsBuilder.MigrationsAssembly(migrationsAssembly)); return new SCIMDbContext(builder.Options); } } } Open a command prompt, navigate to the directory of your project and execute the command line : dotnet ef add Init . The migration scripts will be created. Execute the command line dotnet ef database update . The tables will be created in the database. Open the \"Startup.cs\" file, inside the \"ConfigureServices\" procedure add the following line : var migrationsAssembly = typeof(Startup).GetTypeInfo().Assembly.GetName().Name; services.AddScimStoreEF(options => { options.UseSqlServer(Configuration.GetConnectionString(\"db\"), o => o.MigrationsAssembly(migrationsAssembly)); }); Open the \u201cStartup.cs\u201d file, create a new private InitializeDatabase method. It will be called by the Configure procedure in order to create the database. Each SCIM Schema must be added into the SCIMSchemaLst collection. private void InitializeDatabase(IApplicationBuilder app) { using (var scope = app.ApplicationServices.GetRequiredService<IServiceScopeFactory>().CreateScope()) { using (var context = scope.ServiceProvider.GetService<SCIMDbContext>()) { context.Database.Migrate(); var userSchema = SCIMSchemaExtractor.Extract(Path.Combine(basePath, \"UserSchema.json\"), SCIMConstants.SCIMEndpoints.User, true); var basePath = Path.Combine(_webHostEnvironment.ContentRootPath, \"Schemas\"); if (!context.SCIMSchemaLst.Any()) { context.SCIMSchemaLst.Add(userSchema.ToModel()); } context.SaveChanges(); } } } Run the application and verify JSON is returned when you browse the following url : https://localhost:<<sslPort>/Schemas .","title":"SQLServer"},{"location":"scim20/#mongodb","text":"Pre-requisite : SCIM2.0 API must be installed in the Visual Studio Solution. MongoDB data storage can be configured like this : Install the Nuget package SimpleIdServer.Scim.Persistence.MongoDB . Open the \u201cStartup.cs\u201d file, inside the ConfigureServices procedure add the following line adn replace the parameters. var basePath = Path.Combine(Env.ContentRootPath, \"Schemas\"); var userSchema = SCIMSchemaExtractor.Extract(Path.Combine(basePath, \"UserSchema.json\"), SCIMConstants.SCIMEndpoints.User, true); var schemas = new List<SCIMSchema> { userSchema }; services.AddScimStoreMongoDB(opt => { opt.ConnectionString = \"<<CONNECTION_STRING>>\"; opt.Database = \"<<DATABASE_NAME>>\"; opt.CollectionSchemas = \u201cmappings\u201d; opt.CollectionSchemas = \u201cschemas\u201d; opt.CollectionRepresentations = \u201drepresentations\u201d; opt.SupportTransaction = <<SUPPORT_TRANSACTION>>; }, schemas); Run the application and verify JSON is returned when you browse the following url : https://localhost:<<sslPort>/Schemas .","title":"MongoDB"},{"location":"scim20/#swagger","text":"There is a problem when swagger is installed in a SCIM2.0 project. All the properties of SCIM representations are documented in the SCIM Schema and by default Swagger is not able to fetch them : Install the Nuget package SimpleIdServer.Scim.Swashbuckle . Open the \u201cStartup.cs\u201d file, copy and past the code below into ConfigureService : services.AddSwaggerGen(c => { var currentAssembly = Assembly.GetExecutingAssembly(); var xmlDocs = currentAssembly.GetReferencedAssemblies() .Union(new AssemblyName[] { currentAssembly.GetName() }) .Select(a => Path.Combine(Path.GetDirectoryName(currentAssembly.Location), $\"{a.Name}.xml\")) .Where(f => File.Exists(f)).ToArray(); Array.ForEach(xmlDocs, (d) => { c.IncludeXmlComments(d); }); }); services.AddSCIMSwagger(); Browse the URL https://localhost:<sslPort>/swagger , the documentation is now fetched from the SCIM Schemas.","title":"Swagger"},{"location":"uma20/","text":"TODO","title":"UMA2.0"}]}