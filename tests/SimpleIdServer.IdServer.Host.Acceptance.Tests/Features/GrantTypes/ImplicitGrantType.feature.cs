// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.IdServer.Host.Acceptance.Tests.Features.GrantTypes
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ImplicitGrantTypeFeature : object, Xunit.IClassFixture<ImplicitGrantTypeFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ImplicitGrantType.feature"
#line hidden
        
        public ImplicitGrantTypeFeature(ImplicitGrantTypeFeature.FixtureData fixtureData, SimpleIdServer_IdServer_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/GrantTypes", "ImplicitGrantType", "\tCheck all the alternatives scenarios in implicit grant-type", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No access token is issued then resulting claims are returned in the ID Token")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "No access token is issued then resulting claims are returned in the ID Token")]
        public void NoAccessTokenIsIssuedThenResultingClaimsAreReturnedInTheIDToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No access token is issued then resulting claims are returned in the ID Token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table58.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table58.AddRow(new string[] {
                            "client_id",
                            "fourteenClient"});
                table58.AddRow(new string[] {
                            "state",
                            "state"});
                table58.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table58.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table58.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table58.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 6
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table58, "When ");
#line hidden
#line 16
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.Then("redirection url doesn\'t contain the parameter \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Display parameter is passed in the redirection url")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Display parameter is passed in the redirection url")]
        public void DisplayParameterIsPassedInTheRedirectionUrl()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Display parameter is passed in the redirection url", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table59.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table59.AddRow(new string[] {
                            "client_id",
                            "fourteenClient"});
                table59.AddRow(new string[] {
                            "state",
                            "state"});
                table59.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table59.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table59.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table59.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table59.AddRow(new string[] {
                            "display",
                            "popup"});
#line 32
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table59, "When ");
#line hidden
#line 43
 testRunner.Then("redirection url contains \'display\'=\'popup\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'none\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'none\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToNone()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'none\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 46
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table60.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table60.AddRow(new string[] {
                            "client_id",
                            "fifteenClient"});
                table60.AddRow(new string[] {
                            "state",
                            "state"});
                table60.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table60.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table60.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table60.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table60.AddRow(new string[] {
                            "display",
                            "popup"});
#line 47
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table60, "When ");
#line hidden
#line 58
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.Then("JWT alg = \'none\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'ES256\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'ES256\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToES256()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'ES256\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 73
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table61.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table61.AddRow(new string[] {
                            "client_id",
                            "sixteenClient"});
                table61.AddRow(new string[] {
                            "state",
                            "state"});
                table61.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table61.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table61.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table61.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table61.AddRow(new string[] {
                            "display",
                            "popup"});
#line 74
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table61, "When ");
#line hidden
#line 85
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.Then("JWT alg = \'ES256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'ES384\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'ES384\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToES384()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'ES384\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 100
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table62.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table62.AddRow(new string[] {
                            "client_id",
                            "seventeenClient"});
                table62.AddRow(new string[] {
                            "state",
                            "state"});
                table62.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table62.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table62.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table62.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table62.AddRow(new string[] {
                            "display",
                            "popup"});
#line 101
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table62, "When ");
#line hidden
#line 112
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.Then("JWT alg = \'ES384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 116
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 121
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'ES512\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'ES512\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToES512()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'ES512\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 126
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 127
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table63.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table63.AddRow(new string[] {
                            "client_id",
                            "eighteenClient"});
                table63.AddRow(new string[] {
                            "state",
                            "state"});
                table63.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table63.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table63.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table63.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table63.AddRow(new string[] {
                            "display",
                            "popup"});
#line 128
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table63, "When ");
#line hidden
#line 139
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
 testRunner.Then("JWT alg = \'ES512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 143
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 144
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 145
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 146
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 148
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 149
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 150
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 151
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'HS256\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'HS256\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToHS256()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'HS256\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 153
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 154
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table64.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table64.AddRow(new string[] {
                            "client_id",
                            "nineteenClient"});
                table64.AddRow(new string[] {
                            "state",
                            "state"});
                table64.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table64.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table64.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table64.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table64.AddRow(new string[] {
                            "display",
                            "popup"});
#line 155
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table64, "When ");
#line hidden
#line 166
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
 testRunner.Then("JWT alg = \'HS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 171
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 172
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 173
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 174
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 175
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 176
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 177
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 178
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'HS384\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'HS384\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToHS384()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'HS384\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 180
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 181
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table65.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table65.AddRow(new string[] {
                            "client_id",
                            "twentyClient"});
                table65.AddRow(new string[] {
                            "state",
                            "state"});
                table65.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table65.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table65.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table65.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table65.AddRow(new string[] {
                            "display",
                            "popup"});
#line 182
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table65, "When ");
#line hidden
#line 193
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
 testRunner.Then("JWT alg = \'HS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 197
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 198
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 199
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 200
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 201
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 202
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 203
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 204
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 205
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'HS512\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'HS512\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToHS512()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'HS512\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 207
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 208
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table66.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table66.AddRow(new string[] {
                            "client_id",
                            "twentyOneClient"});
                table66.AddRow(new string[] {
                            "state",
                            "state"});
                table66.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table66.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table66.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table66.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table66.AddRow(new string[] {
                            "display",
                            "popup"});
#line 209
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table66, "When ");
#line hidden
#line 220
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 221
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 223
 testRunner.Then("JWT alg = \'HS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 224
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 225
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 226
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 227
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 228
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 229
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 230
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 231
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 232
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'RS256\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'RS256\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToRS256()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'RS256\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 234
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 235
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table67.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table67.AddRow(new string[] {
                            "client_id",
                            "twentyTwoClient"});
                table67.AddRow(new string[] {
                            "state",
                            "state"});
                table67.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table67.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table67.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table67.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table67.AddRow(new string[] {
                            "display",
                            "popup"});
#line 236
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table67, "When ");
#line hidden
#line 247
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 248
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 250
 testRunner.Then("JWT alg = \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 251
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 252
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 253
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 254
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 255
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 256
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 257
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 258
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 259
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'RS384\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'RS384\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToRS384()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'RS384\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 261
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 262
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table68.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table68.AddRow(new string[] {
                            "client_id",
                            "twentyThreeClient"});
                table68.AddRow(new string[] {
                            "state",
                            "state"});
                table68.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table68.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table68.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table68.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table68.AddRow(new string[] {
                            "display",
                            "popup"});
#line 263
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table68, "When ");
#line hidden
#line 274
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 275
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 277
 testRunner.Then("JWT alg = \'RS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 278
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 279
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 280
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 281
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 282
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 283
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 284
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 285
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 286
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'RS512\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'RS512\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToRS512()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'RS512\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 288
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 289
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table69.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table69.AddRow(new string[] {
                            "client_id",
                            "twentyFourClient"});
                table69.AddRow(new string[] {
                            "state",
                            "state"});
                table69.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table69.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table69.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table69.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table69.AddRow(new string[] {
                            "display",
                            "popup"});
#line 290
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table69, "When ");
#line hidden
#line 301
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 302
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 304
 testRunner.Then("JWT alg = \'RS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 305
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 306
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 307
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 308
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 309
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 310
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 311
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 312
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 313
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
            "t to \'A128CBC-HS256\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
            "t to \'A128CBC-HS256\'")]
        public void IdentityTokenMustBeReturnedInJWEFormatWithAlgSetToRSA1_5AndEncSetToA128CBC_HS256()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
                    "t to \'A128CBC-HS256\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 315
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 316
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table70.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table70.AddRow(new string[] {
                            "client_id",
                            "twentyFiveClient"});
                table70.AddRow(new string[] {
                            "state",
                            "state"});
                table70.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table70.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table70.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table70.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table70.AddRow(new string[] {
                            "display",
                            "popup"});
#line 317
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table70, "When ");
#line hidden
#line 328
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 329
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 331
 testRunner.Then("JWT is encrypted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 332
 testRunner.Then("JWT alg = \'RSA1_5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 333
 testRunner.Then("JWT enc = \'A128CBC-HS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
            "t to \'A192CBC-HS384\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
            "t to \'A192CBC-HS384\'")]
        public void IdentityTokenMustBeReturnedInJWEFormatWithAlgSetToRSA1_5AndEncSetToA192CBC_HS384()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
                    "t to \'A192CBC-HS384\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 335
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 336
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table71.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table71.AddRow(new string[] {
                            "client_id",
                            "twentySixClient"});
                table71.AddRow(new string[] {
                            "state",
                            "state"});
                table71.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table71.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table71.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table71.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table71.AddRow(new string[] {
                            "display",
                            "popup"});
#line 337
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table71, "When ");
#line hidden
#line 348
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 349
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 351
 testRunner.Then("JWT is encrypted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 352
 testRunner.Then("JWT alg = \'RSA1_5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 353
 testRunner.Then("JWT enc = \'A192CBC-HS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
            "t to \'A256CBC-HS512\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
            "t to \'A256CBC-HS512\'")]
        public void IdentityTokenMustBeReturnedInJWEFormatWithAlgSetToRSA1_5AndEncSetToA256CBC_HS512()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
                    "t to \'A256CBC-HS512\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 355
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 356
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table72.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table72.AddRow(new string[] {
                            "client_id",
                            "twentySevenClient"});
                table72.AddRow(new string[] {
                            "state",
                            "state"});
                table72.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table72.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table72.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table72.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table72.AddRow(new string[] {
                            "display",
                            "popup"});
#line 357
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table72, "When ");
#line hidden
#line 368
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 369
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 371
 testRunner.Then("JWT is encrypted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 372
 testRunner.Then("JWT alg = \'RSA1_5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 373
 testRunner.Then("JWT enc = \'A256CBC-HS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
            "set to \'A128CBC-HS256\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
            "set to \'A128CBC-HS256\'")]
        public void IdentityTokenMustBeReturnedInJWEFormatWithAlgSetToRSA_OAEPAndEncSetToA128CBC_HS256()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
                    "set to \'A128CBC-HS256\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 375
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 376
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table73.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table73.AddRow(new string[] {
                            "client_id",
                            "twentyEightClient"});
                table73.AddRow(new string[] {
                            "state",
                            "state"});
                table73.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table73.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table73.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table73.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table73.AddRow(new string[] {
                            "display",
                            "popup"});
#line 377
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table73, "When ");
#line hidden
#line 388
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 389
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 391
 testRunner.Then("JWT is encrypted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 392
 testRunner.Then("JWT alg = \'RSA-OAEP\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 393
 testRunner.Then("JWT enc = \'A128CBC-HS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
            "set to \'A192CBC-HS384\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
            "set to \'A192CBC-HS384\'")]
        public void IdentityTokenMustBeReturnedInJWEFormatWithAlgSetToRSA_OAEPAndEncSetToA192CBC_HS384()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
                    "set to \'A192CBC-HS384\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 395
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 396
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table74.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table74.AddRow(new string[] {
                            "client_id",
                            "twentyNineClient"});
                table74.AddRow(new string[] {
                            "state",
                            "state"});
                table74.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table74.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table74.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table74.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table74.AddRow(new string[] {
                            "display",
                            "popup"});
#line 397
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table74, "When ");
#line hidden
#line 408
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 409
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 411
 testRunner.Then("JWT is encrypted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 412
 testRunner.Then("JWT alg = \'RSA-OAEP\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 413
 testRunner.Then("JWT enc = \'A192CBC-HS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
            "set to \'A256CBC-HS512\'")]
        [Xunit.TraitAttribute("FeatureTitle", "ImplicitGrantType")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
            "set to \'A256CBC-HS512\'")]
        public void IdentityTokenMustBeReturnedInJWEFormatWithAlgSetToRSA_OAEPAndEncSetToA256CBC_HS512()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
                    "set to \'A256CBC-HS512\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 415
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 416
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table75.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table75.AddRow(new string[] {
                            "client_id",
                            "thirtyClient"});
                table75.AddRow(new string[] {
                            "state",
                            "state"});
                table75.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table75.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table75.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table75.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table75.AddRow(new string[] {
                            "display",
                            "popup"});
#line 417
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table75, "When ");
#line hidden
#line 428
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 429
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 431
 testRunner.Then("JWT is encrypted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 432
 testRunner.Then("JWT alg = \'RSA-OAEP\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 433
 testRunner.Then("JWT enc = \'A256CBC-HS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ImplicitGrantTypeFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ImplicitGrantTypeFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
