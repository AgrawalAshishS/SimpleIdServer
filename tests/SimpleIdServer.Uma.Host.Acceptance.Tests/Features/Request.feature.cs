// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.Uma.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RequestFeature : object, Xunit.IClassFixture<RequestFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Request.feature"
#line hidden
        
        public RequestFeature(RequestFeature.FixtureData fixtureData, SimpleIdServer_Uma_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Request", "\tCheck /reqs endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get received pending requests")]
        [Xunit.TraitAttribute("FeatureTitle", "Request")]
        [Xunit.TraitAttribute("Description", "Get received pending requests")]
        public virtual void GetReceivedPendingRequests()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get received pending requests", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table18.AddRow(new string[] {
                            "redirect_uris",
                            "[\"https://web.com\"]"});
                table18.AddRow(new string[] {
                            "grant_types",
                            "[\"client_credentials\"]"});
                table18.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "client_secret_post"});
                table18.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
#line 5
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table18, "When ");
#line hidden
#line 12
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table19.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table19.AddRow(new string[] {
                            "client_secret",
                            "$client_secret$"});
                table19.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table19.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 16
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table19, "And ");
#line hidden
#line 23
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table20.AddRow(new string[] {
                            "resource_scopes",
                            "[ \"scope1\" ]"});
                table20.AddRow(new string[] {
                            "subject",
                            "owner"});
                table20.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table20.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table20.AddRow(new string[] {
                            "name#en",
                            "name"});
                table20.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table20.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table20.AddRow(new string[] {
                            "type",
                            "type"});
                table20.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 26
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table20, "And ");
#line hidden
#line 38
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table21.AddRow(new string[] {
                            "permissions",
                            "[ { claims: [ { name: \"sub\", value: \"user\" }, { name: \"email\", value: \"user@hotma" +
                                "il.com\" } ], scopes: [ \"scope1\" ] } ]"});
                table21.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 41
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table21, "And ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table22.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table22.AddRow(new string[] {
                            "resource_scopes",
                            "[ \"scope1\"]"});
                table22.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 46
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table22, "And ");
#line hidden
#line 52
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And("extract \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table23.AddRow(new string[] {
                            "redirect_uris",
                            "[\"https://web.com\"]"});
                table23.AddRow(new string[] {
                            "grant_types",
                            "[\"urn:ietf:params:oauth:grant-type:uma-ticket\"]"});
                table23.AddRow(new string[] {
                            "response_types",
                            "[\"token\"]"});
                table23.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "client_secret_post"});
#line 55
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table23, "And ");
#line hidden
#line 62
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table24.AddRow(new string[] {
                            "sub",
                            "requester"});
                table24.AddRow(new string[] {
                            "email",
                            "user@hotmail.fr"});
#line 66
 testRunner.And("build claim_token", ((string)(null)), table24, "And ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table25.AddRow(new string[] {
                            "Key",
                            "Value"});
                table25.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table25.AddRow(new string[] {
                            "client_secret",
                            "$client_secret$"});
                table25.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table25.AddRow(new string[] {
                            "ticket",
                            "$ticket$"});
                table25.AddRow(new string[] {
                            "claim_token",
                            "$claim_token$"});
                table25.AddRow(new string[] {
                            "claim_token_format",
                            "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
                table25.AddRow(new string[] {
                            "scope",
                            "scope1"});
#line 71
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table25, "And ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table26.AddRow(new string[] {
                            "sub",
                            "owner"});
                table26.AddRow(new string[] {
                            "email",
                            "user@hotmail.fr"});
#line 82
 testRunner.And("build claim_token", ((string)(null)), table26, "And ");
#line hidden
#line 87
 testRunner.And("execute HTTP GET against \'http://localhost/reqs/.search/received/me?count=50&star" +
                        "tIndex=0\' and pass authorization header \'Bearer $claim_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
 testRunner.Then("JSON \'totalResults\'=\'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
 testRunner.Then("JSON \'count\'=\'50\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
 testRunner.Then("JSON \'startIndex\'=\'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
 testRunner.Then("JSON \'data[0].requester\'=\'requester\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
 testRunner.Then("JSON \'data[0].owner\'=\'owner\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
 testRunner.Then("JSON \'data[0].scopes[0]\'=\'scope1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
 testRunner.Then("JSON \'data[0].resource.resource_scopes[0]\'=\'scope1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 99
 testRunner.Then("JSON \'data[0].resource.icon_uri\'=\'icon\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 100
 testRunner.Then("JSON \'data[0].resource.description#fr\'=\'descriptionFR\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
 testRunner.Then("JSON \'data[0].resource.description#en\'=\'descriptionEN\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
 testRunner.Then("JSON \'data[0].resource.name#fr\'=\'nom\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
 testRunner.Then("JSON \'data[0].resource.name#en\'=\'name\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Confirm pending request")]
        [Xunit.TraitAttribute("FeatureTitle", "Request")]
        [Xunit.TraitAttribute("Description", "Confirm pending request")]
        public virtual void ConfirmPendingRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Confirm pending request", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 105
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table27.AddRow(new string[] {
                            "redirect_uris",
                            "[\"https://web.com\"]"});
                table27.AddRow(new string[] {
                            "grant_types",
                            "[\"client_credentials\"]"});
                table27.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "client_secret_post"});
                table27.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
#line 106
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table27, "When ");
#line hidden
#line 113
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table28.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table28.AddRow(new string[] {
                            "client_secret",
                            "$client_secret$"});
                table28.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table28.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 117
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table28, "And ");
#line hidden
#line 124
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table29.AddRow(new string[] {
                            "resource_scopes",
                            "[ \"scope1\" ]"});
                table29.AddRow(new string[] {
                            "subject",
                            "owner"});
                table29.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table29.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table29.AddRow(new string[] {
                            "name#en",
                            "name"});
                table29.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table29.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table29.AddRow(new string[] {
                            "type",
                            "type"});
                table29.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 127
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table29, "And ");
#line hidden
#line 139
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table30.AddRow(new string[] {
                            "permissions",
                            "[ { claims: [ { name: \"sub\", value: \"user\" }, { name: \"email\", value: \"user@hotma" +
                                "il.com\" } ], scopes: [ \"scope1\" ] } ]"});
                table30.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 142
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table30, "And ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table31.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table31.AddRow(new string[] {
                            "resource_scopes",
                            "[ \"scope1\"]"});
                table31.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 147
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table31, "And ");
#line hidden
#line 153
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 154
 testRunner.And("extract \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table32.AddRow(new string[] {
                            "redirect_uris",
                            "[\"https://web.com\"]"});
                table32.AddRow(new string[] {
                            "grant_types",
                            "[\"urn:ietf:params:oauth:grant-type:uma-ticket\"]"});
                table32.AddRow(new string[] {
                            "response_types",
                            "[\"token\"]"});
                table32.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "client_secret_post"});
#line 156
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table32, "And ");
#line hidden
#line 163
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table33.AddRow(new string[] {
                            "sub",
                            "badrequester"});
                table33.AddRow(new string[] {
                            "email",
                            "user@hotmail.fr"});
#line 167
 testRunner.And("build claim_token", ((string)(null)), table33, "And ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table34.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table34.AddRow(new string[] {
                            "client_secret",
                            "$client_secret$"});
                table34.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table34.AddRow(new string[] {
                            "ticket",
                            "$ticket$"});
                table34.AddRow(new string[] {
                            "claim_token",
                            "$claim_token$"});
                table34.AddRow(new string[] {
                            "claim_token_format",
                            "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
                table34.AddRow(new string[] {
                            "scope",
                            "scope1"});
#line 172
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table34, "And ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table35.AddRow(new string[] {
                            "sub",
                            "owner"});
#line 182
 testRunner.And("build claim_token", ((string)(null)), table35, "And ");
#line hidden
#line 186
 testRunner.And("execute HTTP GET against \'http://localhost/reqs/confirm/$ticket$\' and pass author" +
                        "ization header \'Bearer $claim_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 188
 testRunner.Then("HTTP status code equals to \'204\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete pending request")]
        [Xunit.TraitAttribute("FeatureTitle", "Request")]
        [Xunit.TraitAttribute("Description", "Delete pending request")]
        public virtual void DeletePendingRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete pending request", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 190
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table36.AddRow(new string[] {
                            "redirect_uris",
                            "[\"https://web.com\"]"});
                table36.AddRow(new string[] {
                            "grant_types",
                            "[\"client_credentials\"]"});
                table36.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "client_secret_post"});
                table36.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
#line 191
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table36, "When ");
#line hidden
#line 198
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 199
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table37.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table37.AddRow(new string[] {
                            "client_secret",
                            "$client_secret$"});
                table37.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table37.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 202
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table37, "And ");
#line hidden
#line 209
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 210
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table38.AddRow(new string[] {
                            "resource_scopes",
                            "[ \"scope1\" ]"});
                table38.AddRow(new string[] {
                            "subject",
                            "owner"});
                table38.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table38.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table38.AddRow(new string[] {
                            "name#en",
                            "name"});
                table38.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table38.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table38.AddRow(new string[] {
                            "type",
                            "type"});
                table38.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 212
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table38, "And ");
#line hidden
#line 224
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 225
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table39.AddRow(new string[] {
                            "permissions",
                            "[ { claims: [ { name: \"sub\", value: \"user\" }, { name: \"email\", value: \"user@hotma" +
                                "il.com\" } ], scopes: [ \"scope1\" ] } ]"});
                table39.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 227
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table39, "And ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table40.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table40.AddRow(new string[] {
                            "resource_scopes",
                            "[ \"scope1\"]"});
                table40.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 232
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table40, "And ");
#line hidden
#line 238
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 239
 testRunner.And("extract \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table41.AddRow(new string[] {
                            "redirect_uris",
                            "[\"https://web.com\"]"});
                table41.AddRow(new string[] {
                            "grant_types",
                            "[\"urn:ietf:params:oauth:grant-type:uma-ticket\"]"});
                table41.AddRow(new string[] {
                            "response_types",
                            "[\"token\"]"});
                table41.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "client_secret_post"});
#line 241
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table41, "And ");
#line hidden
#line 248
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 249
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 250
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table42.AddRow(new string[] {
                            "sub",
                            "badrequester"});
                table42.AddRow(new string[] {
                            "email",
                            "user@hotmail.fr"});
#line 252
 testRunner.And("build claim_token", ((string)(null)), table42, "And ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table43.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table43.AddRow(new string[] {
                            "client_secret",
                            "$client_secret$"});
                table43.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table43.AddRow(new string[] {
                            "ticket",
                            "$ticket$"});
                table43.AddRow(new string[] {
                            "claim_token",
                            "$claim_token$"});
                table43.AddRow(new string[] {
                            "claim_token_format",
                            "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
                table43.AddRow(new string[] {
                            "scope",
                            "scope1"});
#line 257
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table43, "And ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table44.AddRow(new string[] {
                            "sub",
                            "owner"});
#line 267
 testRunner.And("build claim_token", ((string)(null)), table44, "And ");
#line hidden
#line 271
 testRunner.And("execute HTTP DELETE against \'http://localhost/reqs/$ticket$\' and pass authorizati" +
                        "on header \'Bearer $claim_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 273
 testRunner.Then("HTTP status code equals to \'204\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RequestFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RequestFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
