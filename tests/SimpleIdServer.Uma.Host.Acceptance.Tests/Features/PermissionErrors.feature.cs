// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.Uma.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PermissionErrorsFeature : object, Xunit.IClassFixture<PermissionErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PermissionErrors.feature"
#line hidden
        
        public PermissionErrorsFeature(PermissionErrorsFeature.FixtureData fixtureData, SimpleIdServer_Uma_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "PermissionErrors", "\tCheck errors returned by the /perm endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when resource_id parameter is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "PermissionErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when resource_id parameter is missing")]
        public virtual void ErrorIsReturnedWhenResource_IdParameterIsMissing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when resource_id parameter is missing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table5.AddRow(new string[] {
                            "redirect_uris",
                            "[\"https://web.com\"]"});
                table5.AddRow(new string[] {
                            "grant_types",
                            "[\"client_credentials\"]"});
                table5.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "client_secret_post"});
                table5.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
#line 5
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table5, "When ");
#line hidden
#line 12
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table6.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table6.AddRow(new string[] {
                            "client_secret",
                            "$client_secret$"});
                table6.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table6.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 16
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table6, "And ");
#line hidden
#line 23
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table7.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 26
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table7, "And ");
#line hidden
#line 30
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
 testRunner.Then("JSON \'error_description\'=\'parameter resource_id is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when resource_scopes parameter is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "PermissionErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when resource_scopes parameter is missing")]
        public virtual void ErrorIsReturnedWhenResource_ScopesParameterIsMissing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when resource_scopes parameter is missing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table8.AddRow(new string[] {
                            "redirect_uris",
                            "[\"https://web.com\"]"});
                table8.AddRow(new string[] {
                            "grant_types",
                            "[\"client_credentials\"]"});
                table8.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "client_secret_post"});
                table8.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
#line 37
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table8, "When ");
#line hidden
#line 44
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table9.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table9.AddRow(new string[] {
                            "client_secret",
                            "$client_secret$"});
                table9.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table9.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 48
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table9, "And ");
#line hidden
#line 55
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table10.AddRow(new string[] {
                            "resource_id",
                            "id"});
                table10.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 58
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table10, "And ");
#line hidden
#line 63
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
 testRunner.Then("JSON \'error_description\'=\'parameter resource_scopes is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when resource doesn\'t exist")]
        [Xunit.TraitAttribute("FeatureTitle", "PermissionErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when resource doesn\'t exist")]
        public virtual void ErrorIsReturnedWhenResourceDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when resource doesn\'t exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table11.AddRow(new string[] {
                            "redirect_uris",
                            "[\"https://web.com\"]"});
                table11.AddRow(new string[] {
                            "grant_types",
                            "[\"client_credentials\"]"});
                table11.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "client_secret_post"});
                table11.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
#line 70
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table11, "When ");
#line hidden
#line 77
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table12.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table12.AddRow(new string[] {
                            "client_secret",
                            "$client_secret$"});
                table12.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table12.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 81
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table12, "And ");
#line hidden
#line 88
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table13.AddRow(new string[] {
                            "resource_id",
                            "id"});
                table13.AddRow(new string[] {
                            "resource_scopes",
                            "[ \"scope\"]"});
                table13.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 91
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table13, "And ");
#line hidden
#line 97
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 100
 testRunner.Then("JSON \'error\'=\'invalid_resource_id\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
 testRunner.Then("JSON \'error_description\'=\'At least one of the provided resource identifiers was n" +
                        "ot found at the authorization server.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when scope is invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "PermissionErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when scope is invalid")]
        public virtual void ErrorIsReturnedWhenScopeIsInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when scope is invalid", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table14.AddRow(new string[] {
                            "redirect_uris",
                            "[\"https://web.com\"]"});
                table14.AddRow(new string[] {
                            "grant_types",
                            "[\"client_credentials\"]"});
                table14.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "client_secret_post"});
                table14.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
#line 104
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table14, "When ");
#line hidden
#line 111
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table15.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table15.AddRow(new string[] {
                            "client_secret",
                            "$client_secret$"});
                table15.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table15.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 115
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table15, "And ");
#line hidden
#line 122
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table16.AddRow(new string[] {
                            "resource_scopes",
                            "[ \"scope1\" ]"});
                table16.AddRow(new string[] {
                            "subject",
                            "user1"});
                table16.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table16.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table16.AddRow(new string[] {
                            "name#en",
                            "name"});
                table16.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table16.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table16.AddRow(new string[] {
                            "type",
                            "type"});
                table16.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 125
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table16, "And ");
#line hidden
#line 137
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table17.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table17.AddRow(new string[] {
                            "resource_scopes",
                            "[ \"scope\"]"});
                table17.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 140
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table17, "And ");
#line hidden
#line 146
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 149
 testRunner.Then("JSON \'error\'=\'invalid_scope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 150
 testRunner.Then("JSON \'error_description\'=\'At least one of the scopes included in the request does" +
                        " not match an available scope for any of the resources associated with requested" +
                        " permissions for the permission ticket provided by the client.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PermissionErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PermissionErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
