// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.Uma.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UmaResourceFeature : Xunit.IClassFixture<UmaResourceFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UMAResource.feature"
#line hidden
        
        public UmaResourceFeature(UmaResourceFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UmaResource", "\tCheck /rreguri endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Add a UMA resource")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResource")]
        [Xunit.TraitAttribute("Description", "Add a UMA resource")]
        public virtual void AddAUMAResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a UMA resource", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table77.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table77.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table77.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table77.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 5
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table77, "When ");
#line 12
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table78.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table78.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table78.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table78.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 16
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table78, "And ");
#line 23
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table79.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table79.AddRow(new string[] {
                        "subject",
                        "user1"});
            table79.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table79.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table79.AddRow(new string[] {
                        "name#en",
                        "name"});
            table79.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table79.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table79.AddRow(new string[] {
                        "type",
                        "type"});
            table79.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 26
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table79, "And ");
#line 38
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.Then("HTTP status code equals to \'201\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.Then("JSON exists \'_id\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 42
 testRunner.Then("JSON exists \'user_access_policy_uri\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get a UMA resource")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResource")]
        [Xunit.TraitAttribute("Description", "Get a UMA resource")]
        public virtual void GetAUMAResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get a UMA resource", null, ((string[])(null)));
#line 44
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table80.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table80.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table80.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table80.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 45
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table80, "When ");
#line 52
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table81.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table81.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table81.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table81.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 56
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table81, "And ");
#line 63
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table82.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table82.AddRow(new string[] {
                        "subject",
                        "user1"});
            table82.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table82.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table82.AddRow(new string[] {
                        "name#en",
                        "name"});
            table82.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table82.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table82.AddRow(new string[] {
                        "type",
                        "type"});
            table82.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 66
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table82, "And ");
#line 78
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.And("execute HTTP GET against \'http://localhost/rreguri/$_id$\' and pass authorization " +
                    "header \'Bearer $access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 85
 testRunner.Then("JSON exists \'resource_scopes\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 86
 testRunner.Then("JSON \'icon_uri\'=\'icon\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 87
 testRunner.Then("JSON \'name#fr\'=\'nom\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 88
 testRunner.Then("JSON \'name#en\'=\'name\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 89
 testRunner.Then("JSON \'description#fr\'=\'descriptionFR\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
 testRunner.Then("JSON \'description#en\'=\'descriptionEN\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 91
 testRunner.Then("JSON \'type\'=\'type\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Delete a UMA resource")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResource")]
        [Xunit.TraitAttribute("Description", "Delete a UMA resource")]
        public virtual void DeleteAUMAResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a UMA resource", null, ((string[])(null)));
#line 93
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table83.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table83.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table83.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table83.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 94
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table83, "When ");
#line 101
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table84.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table84.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table84.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table84.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 105
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table84, "And ");
#line 112
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table85.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table85.AddRow(new string[] {
                        "subject",
                        "user1"});
            table85.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table85.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table85.AddRow(new string[] {
                        "name#en",
                        "name"});
            table85.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table85.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table85.AddRow(new string[] {
                        "type",
                        "type"});
            table85.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 115
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table85, "And ");
#line 127
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
 testRunner.And("execute HTTP DELETE against \'http://localhost/rreguri/$_id$\' and pass authorizati" +
                    "on header \'Bearer $access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.Then("HTTP status code equals to \'204\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Add UMA permissions")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResource")]
        [Xunit.TraitAttribute("Description", "Add UMA permissions")]
        public virtual void AddUMAPermissions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add UMA permissions", null, ((string[])(null)));
#line 133
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table86.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table86.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table86.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table86.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 134
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table86, "When ");
#line 141
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table87.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table87.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table87.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table87.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 145
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table87, "And ");
#line 152
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table88.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table88.AddRow(new string[] {
                        "subject",
                        "user1"});
            table88.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table88.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table88.AddRow(new string[] {
                        "name#en",
                        "name"});
            table88.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table88.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table88.AddRow(new string[] {
                        "type",
                        "type"});
            table88.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 155
 testRunner.When("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table88, "When ");
#line 167
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table89.AddRow(new string[] {
                        "permissions",
                        "[ { claims: [ { name: \"sub\", value: \"user\" } ], scopes: [ \"scope\" ] } ]"});
            table89.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 170
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table89, "And ");
#line 175
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 178
 testRunner.Then("JSON exists \'_id\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Delete UMA permissions")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResource")]
        [Xunit.TraitAttribute("Description", "Delete UMA permissions")]
        public virtual void DeleteUMAPermissions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete UMA permissions", null, ((string[])(null)));
#line 180
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table90.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table90.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table90.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table90.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 181
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table90, "When ");
#line 188
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 190
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table91.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table91.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table91.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table91.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 192
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table91, "And ");
#line 199
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table92.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table92.AddRow(new string[] {
                        "subject",
                        "user1"});
            table92.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table92.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table92.AddRow(new string[] {
                        "name#en",
                        "name"});
            table92.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table92.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table92.AddRow(new string[] {
                        "type",
                        "type"});
            table92.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 202
 testRunner.When("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table92, "When ");
#line 214
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table93.AddRow(new string[] {
                        "permissions",
                        "[ { claims: [ { name: \"sub\", value: \"user\" } ], scopes: [ \"scope\" ] } ]"});
            table93.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 217
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table93, "And ");
#line 222
 testRunner.And("execute HTTP DELETE against \'http://localhost/rreguri/$_id$\' and pass authorizati" +
                    "on header \'Bearer $access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
 testRunner.Then("HTTP status code equals to \'204\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get UMA permissions")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResource")]
        [Xunit.TraitAttribute("Description", "Get UMA permissions")]
        public virtual void GetUMAPermissions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get UMA permissions", null, ((string[])(null)));
#line 226
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table94.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table94.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table94.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table94.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 227
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table94, "When ");
#line 234
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table95.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table95.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table95.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table95.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 238
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table95, "And ");
#line 245
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 246
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table96.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table96.AddRow(new string[] {
                        "subject",
                        "user1"});
            table96.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table96.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table96.AddRow(new string[] {
                        "name#en",
                        "name"});
            table96.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table96.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table96.AddRow(new string[] {
                        "type",
                        "type"});
            table96.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 248
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table96, "And ");
#line 260
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 261
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table97.AddRow(new string[] {
                        "permissions",
                        "[ { claims: [ { name: \"sub\", value: \"user\" } ], scopes: [ \"scope\" ] } ]"});
            table97.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 263
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table97, "And ");
#line 268
 testRunner.And("execute HTTP GET against \'http://localhost/rreguri/$_id$/permissions\' and pass au" +
                    "thorization header \'Bearer $access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 270
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 273
 testRunner.Then("JSON \'permissions[0].claims[0].name\'=\'sub\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 274
 testRunner.Then("JSON \'permissions[0].claims[0].value\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 275
 testRunner.Then("JSON \'permissions[0].scopes[0]\'=\'scope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UmaResourceFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UmaResourceFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
