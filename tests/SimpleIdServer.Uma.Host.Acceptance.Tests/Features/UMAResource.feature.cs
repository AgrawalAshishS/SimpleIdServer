// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.Uma.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UmaResourceFeature : Xunit.IClassFixture<UmaResourceFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UMAResource.feature"
#line hidden
        
        public UmaResourceFeature(UmaResourceFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UmaResource", "\tCheck /rreguri endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Add a UMA resource")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResource")]
        [Xunit.TraitAttribute("Description", "Add a UMA resource")]
        public virtual void AddAUMAResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a UMA resource", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table1.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table1.AddRow(new string[] {
                        "subject",
                        "user1"});
            table1.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table1.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table1.AddRow(new string[] {
                        "name#en",
                        "name"});
            table1.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table1.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table1.AddRow(new string[] {
                        "type",
                        "type"});
#line 5
 testRunner.When("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table1, "When ");
#line 16
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.Then("HTTP status code equals to \'201\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 19
 testRunner.Then("JSON exists \'_id\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
 testRunner.Then("JSON exists \'user_access_policy_uri\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get a UMA resource")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResource")]
        [Xunit.TraitAttribute("Description", "Get a UMA resource")]
        public virtual void GetAUMAResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get a UMA resource", null, ((string[])(null)));
#line 22
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table2.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table2.AddRow(new string[] {
                        "subject",
                        "user1"});
            table2.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table2.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table2.AddRow(new string[] {
                        "name#en",
                        "name"});
            table2.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table2.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table2.AddRow(new string[] {
                        "type",
                        "type"});
#line 23
 testRunner.When("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table2, "When ");
#line 34
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.And("execute HTTP GET request \'http://localhost/rreguri/$_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.Then("JSON exists \'resource_scopes\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 42
 testRunner.Then("JSON \'icon_uri\'=\'icon\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
 testRunner.Then("JSON \'name#fr\'=\'nom\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
 testRunner.Then("JSON \'name#en\'=\'name\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
 testRunner.Then("JSON \'description#fr\'=\'descriptionFR\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
 testRunner.Then("JSON \'description#en\'=\'descriptionEN\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
 testRunner.Then("JSON \'type\'=\'type\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Delete a UMA resource")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResource")]
        [Xunit.TraitAttribute("Description", "Delete a UMA resource")]
        public virtual void DeleteAUMAResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a UMA resource", null, ((string[])(null)));
#line 49
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table3.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table3.AddRow(new string[] {
                        "subject",
                        "user1"});
            table3.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table3.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table3.AddRow(new string[] {
                        "name#en",
                        "name"});
            table3.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table3.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table3.AddRow(new string[] {
                        "type",
                        "type"});
#line 50
 testRunner.When("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table3, "When ");
#line 61
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.And("execute HTTP DELETE request \'http://localhost/rreguri/$_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.Then("HTTP status code equals to \'204\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Add UMA permissions")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResource")]
        [Xunit.TraitAttribute("Description", "Add UMA permissions")]
        public virtual void AddUMAPermissions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add UMA permissions", null, ((string[])(null)));
#line 67
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table4.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table4.AddRow(new string[] {
                        "subject",
                        "user1"});
            table4.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table4.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table4.AddRow(new string[] {
                        "name#en",
                        "name"});
            table4.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table4.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table4.AddRow(new string[] {
                        "type",
                        "type"});
#line 68
 testRunner.When("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table4, "When ");
#line 79
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table5.AddRow(new string[] {
                        "permissions",
                        "[ { subject: \"user1\", scopes: [ \"scope\" ]]"});
#line 82
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table5, "And ");
#line 86
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 89
 testRunner.Then("JSON exists \'_id\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Delete UMA permissions")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResource")]
        [Xunit.TraitAttribute("Description", "Delete UMA permissions")]
        public virtual void DeleteUMAPermissions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete UMA permissions", null, ((string[])(null)));
#line 91
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table6.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table6.AddRow(new string[] {
                        "subject",
                        "user1"});
            table6.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table6.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table6.AddRow(new string[] {
                        "name#en",
                        "name"});
            table6.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table6.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table6.AddRow(new string[] {
                        "type",
                        "type"});
#line 92
 testRunner.When("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table6, "When ");
#line 103
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table7.AddRow(new string[] {
                        "permissions",
                        "[ { subject: \"user1\", scopes: [ \"scope\" ]]"});
#line 106
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table7, "And ");
#line 110
 testRunner.And("execute HTTP DELETE request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
 testRunner.Then("HTTP status code equals to \'204\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get UMA permissions")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResource")]
        [Xunit.TraitAttribute("Description", "Get UMA permissions")]
        public virtual void GetUMAPermissions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get UMA permissions", null, ((string[])(null)));
#line 114
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table8.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table8.AddRow(new string[] {
                        "subject",
                        "user1"});
            table8.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table8.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table8.AddRow(new string[] {
                        "name#en",
                        "name"});
            table8.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table8.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table8.AddRow(new string[] {
                        "type",
                        "type"});
#line 115
 testRunner.When("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table8, "When ");
#line 126
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table9.AddRow(new string[] {
                        "permissions",
                        "[ { subject: \"user1\", scopes: [ \"scope\" ] } ]"});
#line 129
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table9, "And ");
#line 133
 testRunner.And("execute HTTP GET request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 138
 testRunner.Then("JSON \'permissions[0].subject\'=\'user1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 139
 testRunner.Then("JSON \'permissions[0].scopes[0]\'=\'scope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UmaResourceFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UmaResourceFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
