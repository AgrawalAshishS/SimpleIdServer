// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.Uma.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TokenErrorsFeature : Xunit.IClassFixture<TokenErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TokenErrors.feature"
#line hidden
        
        public TokenErrorsFeature(TokenErrorsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TokenErrors", "\tCheck errors returned by /token endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when ticket parameter is not passed")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when ticket parameter is not passed")]
        public virtual void ErrorIsReturnedWhenTicketParameterIsNotPassed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when ticket parameter is not passed", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table35.AddRow(new string[] {
                        "grant_type",
                        "urn:ietf:params:oauth:grant-type:uma-ticket"});
#line 5
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table35, "When ");
#line 9
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
 testRunner.Then("JSON \'error_description\'=\'parameter ticket is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when claim_token parameter is passed but claim_token_format par" +
            "ameter is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when claim_token parameter is passed but claim_token_format par" +
            "ameter is missing")]
        public virtual void ErrorIsReturnedWhenClaim_TokenParameterIsPassedButClaim_Token_FormatParameterIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when claim_token parameter is passed but claim_token_format par" +
                    "ameter is missing", null, ((string[])(null)));
#line 15
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table36.AddRow(new string[] {
                        "grant_type",
                        "urn:ietf:params:oauth:grant-type:uma-ticket"});
            table36.AddRow(new string[] {
                        "ticket",
                        "ticket"});
            table36.AddRow(new string[] {
                        "claim_token",
                        "token"});
#line 16
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table36, "When ");
#line 22
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
 testRunner.Then("JSON \'error_description\'=\'parameter claim_token_format is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when claim_token_format parameter is passed but claim_token par" +
            "ameter is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when claim_token_format parameter is passed but claim_token par" +
            "ameter is missing")]
        public virtual void ErrorIsReturnedWhenClaim_Token_FormatParameterIsPassedButClaim_TokenParameterIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when claim_token_format parameter is passed but claim_token par" +
                    "ameter is missing", null, ((string[])(null)));
#line 28
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table37.AddRow(new string[] {
                        "grant_type",
                        "urn:ietf:params:oauth:grant-type:uma-ticket"});
            table37.AddRow(new string[] {
                        "ticket",
                        "ticket"});
            table37.AddRow(new string[] {
                        "claim_token_format",
                        "format"});
#line 29
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table37, "When ");
#line 35
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
 testRunner.Then("JSON \'error_description\'=\'parameter claim_token is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when ticket is invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when ticket is invalid")]
        public virtual void ErrorIsReturnedWhenTicketIsInvalid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when ticket is invalid", null, ((string[])(null)));
#line 41
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table38.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table38.AddRow(new string[] {
                        "grant_types",
                        "[\"urn:ietf:params:oauth:grant-type:uma-ticket\"]"});
            table38.AddRow(new string[] {
                        "response_types",
                        "[\"token\"]"});
            table38.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
#line 42
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table38, "When ");
#line 49
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table39.AddRow(new string[] {
                        "Key",
                        "Value"});
            table39.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table39.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table39.AddRow(new string[] {
                        "grant_type",
                        "urn:ietf:params:oauth:grant-type:uma-ticket"});
            table39.AddRow(new string[] {
                        "ticket",
                        "ticket"});
            table39.AddRow(new string[] {
                        "claim_token",
                        "token"});
            table39.AddRow(new string[] {
                        "claim_token_format",
                        "format"});
#line 53
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table39, "And ");
#line 63
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
 testRunner.Then("JSON \'error\'=\'invalid_grant\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
 testRunner.Then("JSON \'error_description\'=\'permission ticket is not correct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when client_token_format is not supported")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when client_token_format is not supported")]
        public virtual void ErrorIsReturnedWhenClient_Token_FormatIsNotSupported()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when client_token_format is not supported", null, ((string[])(null)));
#line 69
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table40.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table40.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table40.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table40.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 70
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table40, "When ");
#line 77
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table41.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table41.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table41.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table41.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 81
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table41, "And ");
#line 88
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table42.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table42.AddRow(new string[] {
                        "subject",
                        "user1"});
            table42.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table42.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table42.AddRow(new string[] {
                        "name#en",
                        "name"});
            table42.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table42.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table42.AddRow(new string[] {
                        "type",
                        "type"});
            table42.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 91
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table42, "And ");
#line 103
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table43.AddRow(new string[] {
                        "resource_id",
                        "$_id$"});
            table43.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\"]"});
            table43.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 106
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table43, "And ");
#line 112
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.And("extract \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table44.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table44.AddRow(new string[] {
                        "grant_types",
                        "[\"urn:ietf:params:oauth:grant-type:uma-ticket\"]"});
            table44.AddRow(new string[] {
                        "response_types",
                        "[\"token\"]"});
            table44.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
#line 115
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table44, "And ");
#line 122
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table45.AddRow(new string[] {
                        "Key",
                        "Value"});
            table45.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table45.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table45.AddRow(new string[] {
                        "grant_type",
                        "urn:ietf:params:oauth:grant-type:uma-ticket"});
            table45.AddRow(new string[] {
                        "ticket",
                        "$ticket$"});
            table45.AddRow(new string[] {
                        "claim_token",
                        "token"});
            table45.AddRow(new string[] {
                        "claim_token_format",
                        "format"});
#line 126
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table45, "And ");
#line 136
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 139
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 140
 testRunner.Then("JSON \'error_description\'=\'token format format is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when claim_token is not a JWS token")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when claim_token is not a JWS token")]
        public virtual void ErrorIsReturnedWhenClaim_TokenIsNotAJWSToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when claim_token is not a JWS token", null, ((string[])(null)));
#line 142
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table46.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table46.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table46.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table46.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 143
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table46, "When ");
#line 150
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table47.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table47.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table47.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table47.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 154
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table47, "And ");
#line 161
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table48.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table48.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table48.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table48.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 164
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table48, "And ");
#line 171
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table49.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table49.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table49.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table49.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 175
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table49, "And ");
#line 182
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table50.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table50.AddRow(new string[] {
                        "subject",
                        "user1"});
            table50.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table50.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table50.AddRow(new string[] {
                        "name#en",
                        "name"});
            table50.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table50.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table50.AddRow(new string[] {
                        "type",
                        "type"});
            table50.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 185
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table50, "And ");
#line 197
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 198
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table51.AddRow(new string[] {
                        "resource_id",
                        "$_id$"});
            table51.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\"]"});
            table51.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 200
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table51, "And ");
#line 206
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
 testRunner.And("extract \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table52.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table52.AddRow(new string[] {
                        "grant_types",
                        "[\"urn:ietf:params:oauth:grant-type:uma-ticket\"]"});
            table52.AddRow(new string[] {
                        "response_types",
                        "[\"token\"]"});
            table52.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
#line 209
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table52, "And ");
#line 216
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 218
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table53.AddRow(new string[] {
                        "Key",
                        "Value"});
            table53.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table53.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table53.AddRow(new string[] {
                        "grant_type",
                        "urn:ietf:params:oauth:grant-type:uma-ticket"});
            table53.AddRow(new string[] {
                        "ticket",
                        "$ticket$"});
            table53.AddRow(new string[] {
                        "claim_token",
                        "token"});
            table53.AddRow(new string[] {
                        "claim_token_format",
                        "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
#line 220
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table53, "And ");
#line 230
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 233
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 234
 testRunner.Then("JSON \'error_description\'=\'claim_token parameter is not a JWS token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when unsupported scopes are passed")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when unsupported scopes are passed")]
        public virtual void ErrorIsReturnedWhenUnsupportedScopesArePassed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when unsupported scopes are passed", null, ((string[])(null)));
#line 236
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table54.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table54.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table54.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table54.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 237
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table54, "When ");
#line 244
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 245
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 246
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table55.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table55.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table55.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table55.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 248
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table55, "And ");
#line 255
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 256
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table56.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table56.AddRow(new string[] {
                        "subject",
                        "user1"});
            table56.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table56.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table56.AddRow(new string[] {
                        "name#en",
                        "name"});
            table56.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table56.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table56.AddRow(new string[] {
                        "type",
                        "type"});
            table56.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 258
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table56, "And ");
#line 270
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 271
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table57.AddRow(new string[] {
                        "resource_id",
                        "$_id$"});
            table57.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\"]"});
            table57.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 273
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table57, "And ");
#line 279
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 280
 testRunner.And("extract \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table58.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table58.AddRow(new string[] {
                        "grant_types",
                        "[\"urn:ietf:params:oauth:grant-type:uma-ticket\"]"});
            table58.AddRow(new string[] {
                        "response_types",
                        "[\"token\"]"});
            table58.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
#line 282
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table58, "And ");
#line 289
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 290
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 291
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table59.AddRow(new string[] {
                        "sub",
                        "user"});
#line 293
 testRunner.And("build claim_token", ((string)(null)), table59, "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table60.AddRow(new string[] {
                        "Key",
                        "Value"});
            table60.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table60.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table60.AddRow(new string[] {
                        "grant_type",
                        "urn:ietf:params:oauth:grant-type:uma-ticket"});
            table60.AddRow(new string[] {
                        "ticket",
                        "$ticket$"});
            table60.AddRow(new string[] {
                        "claim_token",
                        "$claim_token$"});
            table60.AddRow(new string[] {
                        "claim_token_format",
                        "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
            table60.AddRow(new string[] {
                        "scope",
                        "invalid"});
#line 297
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table60, "And ");
#line 308
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 310
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 311
 testRunner.Then("JSON \'error\'=\'invalid_scope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 312
 testRunner.Then("JSON \'error_description\'=\'At least one of the scopes included in the request does" +
                    " not match an available scope for any of the resources associated with requested" +
                    " permissions for the permission ticket provided by the client.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when some claims are missing")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when some claims are missing")]
        public virtual void ErrorIsReturnedWhenSomeClaimsAreMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when some claims are missing", null, ((string[])(null)));
#line 314
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table61.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table61.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table61.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table61.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 315
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table61, "When ");
#line 322
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 323
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 324
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table62.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table62.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table62.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table62.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 326
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table62, "And ");
#line 333
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 334
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table63.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table63.AddRow(new string[] {
                        "subject",
                        "user1"});
            table63.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table63.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table63.AddRow(new string[] {
                        "name#en",
                        "name"});
            table63.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table63.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table63.AddRow(new string[] {
                        "type",
                        "type"});
            table63.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 336
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table63, "And ");
#line 348
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 349
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table64.AddRow(new string[] {
                        "permissions",
                        "[ { claims: [ { name: \"sub\", value: \"user\" }, { name: \"email\", value: \"user@hotma" +
                            "il.com\" } ], scopes: [ \"scope1\" ] } ]"});
            table64.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 351
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table64, "And ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table65.AddRow(new string[] {
                        "resource_id",
                        "$_id$"});
            table65.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\"]"});
            table65.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 356
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table65, "And ");
#line 362
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 363
 testRunner.And("extract \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table66.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table66.AddRow(new string[] {
                        "grant_types",
                        "[\"urn:ietf:params:oauth:grant-type:uma-ticket\"]"});
            table66.AddRow(new string[] {
                        "response_types",
                        "[\"token\"]"});
            table66.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
#line 365
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table66, "And ");
#line 372
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 373
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 374
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table67.AddRow(new string[] {
                        "sub",
                        "user"});
#line 376
 testRunner.And("build claim_token", ((string)(null)), table67, "And ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table68.AddRow(new string[] {
                        "Key",
                        "Value"});
            table68.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table68.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table68.AddRow(new string[] {
                        "grant_type",
                        "urn:ietf:params:oauth:grant-type:uma-ticket"});
            table68.AddRow(new string[] {
                        "ticket",
                        "$ticket$"});
            table68.AddRow(new string[] {
                        "claim_token",
                        "$claim_token$"});
            table68.AddRow(new string[] {
                        "claim_token_format",
                        "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
            table68.AddRow(new string[] {
                        "scope",
                        "scope1"});
#line 380
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table68, "And ");
#line 391
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 393
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 394
 testRunner.Then("JSON \'need_info.ticket\'=\'$ticket$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 395
 testRunner.Then("JSON \'need_info.redirect_uri\'=\'https://openid.net/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 396
 testRunner.Then("JSON \'need_info.required_claims[0].claim_token_format\'=\'http://openid.net/specs/o" +
                    "penid-connect-core-1_0.html#IDToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 397
 testRunner.Then("JSON \'need_info.required_claims[0].name\'=\'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when user is not authorized")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when user is not authorized")]
        public virtual void ErrorIsReturnedWhenUserIsNotAuthorized()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when user is not authorized", null, ((string[])(null)));
#line 399
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table69.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table69.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table69.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table69.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 400
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table69, "When ");
#line 407
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 408
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 409
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table70.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table70.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table70.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table70.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 411
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table70, "And ");
#line 418
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 419
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table71.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table71.AddRow(new string[] {
                        "subject",
                        "user1"});
            table71.AddRow(new string[] {
                        "icon_uri",
                        "icon"});
            table71.AddRow(new string[] {
                        "name#fr",
                        "nom"});
            table71.AddRow(new string[] {
                        "name#en",
                        "name"});
            table71.AddRow(new string[] {
                        "description#fr",
                        "descriptionFR"});
            table71.AddRow(new string[] {
                        "description#en",
                        "descriptionEN"});
            table71.AddRow(new string[] {
                        "type",
                        "type"});
            table71.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 421
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table71, "And ");
#line 433
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 434
 testRunner.And("extract \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table72.AddRow(new string[] {
                        "permissions",
                        "[ { claims: [ { name: \"sub\", value: \"user\" }, { name: \"email\", value: \"user@hotma" +
                            "il.com\" } ], scopes: [ \"scope1\" ] } ]"});
            table72.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 436
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table72, "And ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table73.AddRow(new string[] {
                        "resource_id",
                        "$_id$"});
            table73.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\"]"});
            table73.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 441
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table73, "And ");
#line 447
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 448
 testRunner.And("extract \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table74.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table74.AddRow(new string[] {
                        "grant_types",
                        "[\"urn:ietf:params:oauth:grant-type:uma-ticket\"]"});
            table74.AddRow(new string[] {
                        "response_types",
                        "[\"token\"]"});
            table74.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
#line 450
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table74, "And ");
#line 457
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 458
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 459
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table75.AddRow(new string[] {
                        "sub",
                        "user1"});
            table75.AddRow(new string[] {
                        "email",
                        "user@hotmail.fr"});
#line 461
 testRunner.And("build claim_token", ((string)(null)), table75, "And ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table76.AddRow(new string[] {
                        "Key",
                        "Value"});
            table76.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table76.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table76.AddRow(new string[] {
                        "grant_type",
                        "urn:ietf:params:oauth:grant-type:uma-ticket"});
            table76.AddRow(new string[] {
                        "ticket",
                        "$ticket$"});
            table76.AddRow(new string[] {
                        "claim_token",
                        "$claim_token$"});
            table76.AddRow(new string[] {
                        "claim_token_format",
                        "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
            table76.AddRow(new string[] {
                        "scope",
                        "scope1"});
#line 466
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table76, "And ");
#line 477
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 479
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 480
 testRunner.Then("JSON \'request_submitted.ticket\'=\'$ticket$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 481
 testRunner.Then("JSON \'request_submitted.interval\'=\'5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TokenErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TokenErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
