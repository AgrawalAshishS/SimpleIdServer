// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.Uma.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UmaResourceErrorsFeature : Xunit.IClassFixture<UmaResourceErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UMAResourceErrors.feature"
#line hidden
        
        public UmaResourceErrorsFeature(UmaResourceErrorsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UmaResourceErrors", "\tCheck errors returned by the /rreguri endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when trying to get an unknown UMA resource")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResourceErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when trying to get an unknown UMA resource")]
        public virtual void ErrorIsReturnedWhenTryingToGetAnUnknownUMAResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when trying to get an unknown UMA resource", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table98.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table98.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table98.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table98.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 5
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table98, "When ");
#line 12
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table99.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table99.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table99.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table99.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 16
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table99, "And ");
#line 23
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("execute HTTP GET against \'http://localhost/rreguri/1\' and pass authorization head" +
                    "er \'Bearer $access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
 testRunner.Then("JSON \'error\'=\'not_found\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when resource_scopes parameter is not passed in the HTTP POST r" +
            "equest")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResourceErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when resource_scopes parameter is not passed in the HTTP POST r" +
            "equest")]
        public virtual void ErrorIsReturnedWhenResource_ScopesParameterIsNotPassedInTheHTTPPOSTRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when resource_scopes parameter is not passed in the HTTP POST r" +
                    "equest", null, ((string[])(null)));
#line 33
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table100.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table100.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table100.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table100.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 34
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table100, "When ");
#line 41
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table101.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table101.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table101.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table101.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 45
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table101, "And ");
#line 52
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table102.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 55
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table102, "And ");
#line 59
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 62
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 63
 testRunner.Then("JSON \'error_description\'=\'parameter resource_scopes is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when subject parameter is not passed in the HTTP POST request")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResourceErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when subject parameter is not passed in the HTTP POST request")]
        public virtual void ErrorIsReturnedWhenSubjectParameterIsNotPassedInTheHTTPPOSTRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when subject parameter is not passed in the HTTP POST request", null, ((string[])(null)));
#line 65
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table103.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table103.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table103.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table103.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 66
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table103, "When ");
#line 73
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table104.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table104.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table104.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table104.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 77
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table104, "And ");
#line 84
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table105.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table105.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 87
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table105, "And ");
#line 92
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 95
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 96
 testRunner.Then("JSON \'error_description\'=\'parameter subject is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when resource_scopes parameter is not passed in the HTTP PUT re" +
            "quest")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResourceErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when resource_scopes parameter is not passed in the HTTP PUT re" +
            "quest")]
        public virtual void ErrorIsReturnedWhenResource_ScopesParameterIsNotPassedInTheHTTPPUTRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when resource_scopes parameter is not passed in the HTTP PUT re" +
                    "quest", null, ((string[])(null)));
#line 98
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table106.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table106.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table106.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table106.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 99
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table106, "When ");
#line 106
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table107.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table107.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table107.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table107.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 110
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table107, "And ");
#line 117
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table108.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 120
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/id\'", ((string)(null)), table108, "And ");
#line 124
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 127
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 128
 testRunner.Then("JSON \'error_description\'=\'parameter resource_scopes is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when trying to update an unknown UMA resource")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResourceErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when trying to update an unknown UMA resource")]
        public virtual void ErrorIsReturnedWhenTryingToUpdateAnUnknownUMAResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when trying to update an unknown UMA resource", null, ((string[])(null)));
#line 130
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table109.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table109.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table109.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table109.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 131
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table109, "When ");
#line 138
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table110.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table110.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table110.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table110.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 142
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table110, "And ");
#line 149
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table111.AddRow(new string[] {
                        "resource_scopes",
                        "[ \"scope1\" ]"});
            table111.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 152
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/id\'", ((string)(null)), table111, "And ");
#line 157
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 160
 testRunner.Then("JSON \'error\'=\'not_found\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when trying to remove an unknown UMA resource")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResourceErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when trying to remove an unknown UMA resource")]
        public virtual void ErrorIsReturnedWhenTryingToRemoveAnUnknownUMAResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when trying to remove an unknown UMA resource", null, ((string[])(null)));
#line 162
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table112.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table112.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table112.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table112.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 163
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table112, "When ");
#line 170
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 171
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table113.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table113.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table113.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table113.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 174
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table113, "And ");
#line 181
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 182
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
 testRunner.And("execute HTTP DELETE against \'http://localhost/rreguri/id\' and pass authorization " +
                    "header \'Bearer $access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 189
 testRunner.Then("JSON \'error\'=\'not_found\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when permissions parameter is not passed in the HTTP PUT reques" +
            "t")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResourceErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when permissions parameter is not passed in the HTTP PUT reques" +
            "t")]
        public virtual void ErrorIsReturnedWhenPermissionsParameterIsNotPassedInTheHTTPPUTRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when permissions parameter is not passed in the HTTP PUT reques" +
                    "t", null, ((string[])(null)));
#line 191
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table114.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table114.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table114.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table114.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 192
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table114, "When ");
#line 199
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table115.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table115.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table115.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table115.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 203
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table115, "And ");
#line 210
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table116.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 213
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/id/permissions\'", ((string)(null)), table116, "And ");
#line 217
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 220
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 221
 testRunner.Then("JSON \'error_description\'=\'parameter permissions is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when trying to add permissions to unknown resource")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResourceErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when trying to add permissions to unknown resource")]
        public virtual void ErrorIsReturnedWhenTryingToAddPermissionsToUnknownResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when trying to add permissions to unknown resource", null, ((string[])(null)));
#line 223
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table117.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table117.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table117.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table117.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 224
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table117, "When ");
#line 231
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 233
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table118.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table118.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table118.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table118.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 235
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table118, "And ");
#line 242
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 243
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table119.AddRow(new string[] {
                        "permissions",
                        "[ { claims: [ { name: \"sub\", value: \"user\" } ], scopes: [ \"scope\" ] } ]"});
            table119.AddRow(new string[] {
                        "Authorization",
                        "Bearer $access_token$"});
#line 245
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/id/permissions\'", ((string)(null)), table119, "And ");
#line 250
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 253
 testRunner.Then("JSON \'error\'=\'not_found\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when trying to remove permissions from unknown resource")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResourceErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when trying to remove permissions from unknown resource")]
        public virtual void ErrorIsReturnedWhenTryingToRemovePermissionsFromUnknownResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when trying to remove permissions from unknown resource", null, ((string[])(null)));
#line 255
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table120.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table120.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table120.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table120.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 256
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table120, "When ");
#line 263
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 264
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 265
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table121.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table121.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table121.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table121.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 267
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table121, "And ");
#line 274
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 275
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 277
 testRunner.And("execute HTTP DELETE against \'http://localhost/rreguri/id/permissions\' and pass au" +
                    "thorization header \'Bearer $access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 279
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 281
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 282
 testRunner.Then("JSON \'error\'=\'not_found\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when trying to get permissions from unknown resource")]
        [Xunit.TraitAttribute("FeatureTitle", "UmaResourceErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when trying to get permissions from unknown resource")]
        public virtual void ErrorIsReturnedWhenTryingToGetPermissionsFromUnknownResource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when trying to get permissions from unknown resource", null, ((string[])(null)));
#line 284
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table122.AddRow(new string[] {
                        "redirect_uris",
                        "[\"https://web.com\"]"});
            table122.AddRow(new string[] {
                        "grant_types",
                        "[\"client_credentials\"]"});
            table122.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
            table122.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
#line 285
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table122, "When ");
#line 292
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 293
 testRunner.And("extract \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 294
 testRunner.And("extract \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table123.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table123.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table123.AddRow(new string[] {
                        "scope",
                        "uma_protection"});
            table123.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 296
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table123, "And ");
#line 303
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 304
 testRunner.And("extract \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 306
 testRunner.And("execute HTTP GET against \'http://localhost/rreguri/id/permissions\' and pass autho" +
                    "rization header \'Bearer $access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 308
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 310
 testRunner.Then("HTTP status code equals to \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 311
 testRunner.Then("JSON \'error\'=\'not_found\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UmaResourceErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UmaResourceErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
