// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.OpenID.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AuthorizationFeature : Xunit.IClassFixture<AuthorizationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Authorization.feature"
#line hidden
        
        public AuthorizationFeature(AuthorizationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Authorization", "\tCheck the authorization endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="When no access token is issued the resulting claims are returned in the ID token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "When no access token is issued the resulting claims are returned in the ID token")]
        public virtual void WhenNoAccessTokenIsIssuedTheResultingClaimsAreReturnedInTheIDToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When no access token is issued the resulting claims are returned in the ID token", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table1.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table1.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table1.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table1.AddRow(new string[] {
                        "scope",
                        "email role"});
            table1.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "none"});
#line 5
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table1, "When ");
#line 13
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table2.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table2.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table2.AddRow(new string[] {
                        "state",
                        "state"});
            table2.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table2.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table2.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table2.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table2.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 18
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table2, "And ");
#line 29
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.And("extract \'display\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.Then("JWS Alg equals to \'none\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 35
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 40
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 42
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check display is passed into the callback url")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Check display is passed into the callback url")]
        public virtual void CheckDisplayIsPassedIntoTheCallbackUrl()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check display is passed into the callback url", null, ((string[])(null)));
#line 44
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table3.AddRow(new string[] {
                        "SIG",
                        "1",
                        "ES256"});
#line 45
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table4.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table4.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table4.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table4.AddRow(new string[] {
                        "scope",
                        "email"});
            table4.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "ES256"});
#line 49
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table4, "And ");
#line 57
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table5.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table5.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table5.AddRow(new string[] {
                        "state",
                        "state"});
            table5.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table5.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table5.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table5.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table5.AddRow(new string[] {
                        "display",
                        "popup"});
            table5.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 61
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table5, "And ");
#line 73
 testRunner.And("extract \'display\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.Then("\'$display$\'=\'popup\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (none)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (none)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatNone()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (none)", null, ((string[])(null)));
#line 77
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table6.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table6.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table6.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table6.AddRow(new string[] {
                        "scope",
                        "email role"});
            table6.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "none"});
#line 78
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table6, "When ");
#line 86
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table7.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table7.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table7.AddRow(new string[] {
                        "state",
                        "state"});
            table7.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table7.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table7.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table7.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table7.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 91
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table7, "And ");
#line 102
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
 testRunner.And("extract \'display\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.Then("JWS Alg equals to \'none\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 107
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 108
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 109
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 110
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 111
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 112
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 113
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 114
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 115
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (ES256)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (ES256)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatES256()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (ES256)", null, ((string[])(null)));
#line 117
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table8.AddRow(new string[] {
                        "SIG",
                        "1",
                        "ES256"});
#line 118
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table8, "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table9.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table9.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table9.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table9.AddRow(new string[] {
                        "scope",
                        "email role"});
            table9.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "ES256"});
#line 122
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table9, "And ");
#line 130
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table10.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table10.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table10.AddRow(new string[] {
                        "state",
                        "state"});
            table10.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table10.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table10.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table10.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table10.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 135
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table10, "And ");
#line 146
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.And("extract \'display\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.Then("JWS Alg equals to \'ES256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 151
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 152
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 153
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 154
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 155
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 156
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 157
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 158
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 159
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 160
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (ES384)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (ES384)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatES384()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (ES384)", null, ((string[])(null)));
#line 162
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table11.AddRow(new string[] {
                        "SIG",
                        "1",
                        "ES384"});
#line 163
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table11, "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table12.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table12.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table12.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table12.AddRow(new string[] {
                        "scope",
                        "email role"});
            table12.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "ES384"});
#line 167
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table12, "And ");
#line 175
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table13.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table13.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table13.AddRow(new string[] {
                        "state",
                        "state"});
            table13.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table13.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table13.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table13.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table13.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 180
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table13, "And ");
#line 191
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
 testRunner.Then("JWS Alg equals to \'ES384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 195
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 196
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 197
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 198
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 199
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 200
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 201
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 202
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 203
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 204
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (ES512)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (ES512)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatES512()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (ES512)", null, ((string[])(null)));
#line 206
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table14.AddRow(new string[] {
                        "SIG",
                        "1",
                        "ES512"});
#line 207
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table14, "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table15.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table15.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table15.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table15.AddRow(new string[] {
                        "scope",
                        "email role"});
            table15.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "ES512"});
#line 211
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table15, "And ");
#line 219
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table16.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table16.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table16.AddRow(new string[] {
                        "state",
                        "state"});
            table16.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table16.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table16.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table16.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table16.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 224
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table16, "And ");
#line 235
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 238
 testRunner.Then("JWS Alg equals to \'ES512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 239
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 240
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 241
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 242
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 243
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 244
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 245
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 246
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 247
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 248
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (HS256)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (HS256)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatHS256()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (HS256)", null, ((string[])(null)));
#line 250
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table17.AddRow(new string[] {
                        "SIG",
                        "1",
                        "HS256"});
#line 251
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table17, "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table18.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table18.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table18.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table18.AddRow(new string[] {
                        "scope",
                        "email role"});
            table18.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "HS256"});
#line 255
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table18, "And ");
#line 263
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 264
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 265
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 266
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table19.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table19.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table19.AddRow(new string[] {
                        "state",
                        "state"});
            table19.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table19.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table19.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table19.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table19.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 268
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table19, "And ");
#line 279
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 280
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 282
 testRunner.Then("JWS Alg equals to \'HS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 283
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 284
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 285
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 286
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 287
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 288
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 289
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 290
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 291
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 292
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (HS384)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (HS384)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatHS384()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (HS384)", null, ((string[])(null)));
#line 294
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table20.AddRow(new string[] {
                        "SIG",
                        "1",
                        "HS384"});
#line 295
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table20, "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table21.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table21.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table21.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table21.AddRow(new string[] {
                        "scope",
                        "email role"});
            table21.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "HS384"});
#line 299
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table21, "And ");
#line 307
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 308
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 309
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 310
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table22.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table22.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table22.AddRow(new string[] {
                        "state",
                        "state"});
            table22.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table22.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table22.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table22.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table22.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 312
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table22, "And ");
#line 323
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 324
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
 testRunner.Then("JWS Alg equals to \'HS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 327
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 328
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 329
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 330
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 331
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 332
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 333
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 334
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 335
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 336
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (HS512)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (HS512)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatHS512()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (HS512)", null, ((string[])(null)));
#line 338
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table23.AddRow(new string[] {
                        "SIG",
                        "1",
                        "HS512"});
#line 339
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table23, "When ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table24.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table24.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table24.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table24.AddRow(new string[] {
                        "scope",
                        "email role"});
            table24.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "HS512"});
#line 343
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table24, "And ");
#line 351
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 352
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 353
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 354
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table25.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table25.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table25.AddRow(new string[] {
                        "state",
                        "state"});
            table25.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table25.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table25.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table25.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table25.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 356
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table25, "And ");
#line 367
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 368
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 370
 testRunner.Then("JWS Alg equals to \'HS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 371
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 372
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 373
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 374
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 375
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 376
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 377
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 378
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 379
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 380
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (RS256)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (RS256)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatRS256()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (RS256)", null, ((string[])(null)));
#line 382
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table26.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 383
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table26, "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table27.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table27.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table27.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table27.AddRow(new string[] {
                        "scope",
                        "email role"});
            table27.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
#line 387
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table27, "And ");
#line 395
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 396
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 397
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 398
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table28.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table28.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table28.AddRow(new string[] {
                        "state",
                        "state"});
            table28.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table28.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table28.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table28.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table28.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 400
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table28, "And ");
#line 411
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 412
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 414
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 415
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 416
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 417
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 418
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 419
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 420
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 421
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 422
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 423
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 424
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (RS384)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (RS384)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatRS384()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (RS384)", null, ((string[])(null)));
#line 426
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table29.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS384"});
#line 427
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table29, "When ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table30.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table30.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table30.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table30.AddRow(new string[] {
                        "scope",
                        "email role"});
            table30.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS384"});
#line 431
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table30, "And ");
#line 439
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 440
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 441
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 442
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table31.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table31.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table31.AddRow(new string[] {
                        "state",
                        "state"});
            table31.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table31.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table31.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table31.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table31.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 444
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table31, "And ");
#line 455
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 456
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 458
 testRunner.Then("JWS Alg equals to \'RS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 459
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 460
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 461
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 462
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 463
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 464
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 465
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 466
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 467
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 468
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (RS512)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (RS512)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatRS512()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (RS512)", null, ((string[])(null)));
#line 470
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table32.AddRow(new string[] {
                        "SIG",
                        "1",
                        "ES256"});
#line 471
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table32, "When ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table33.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS512"});
#line 475
 testRunner.And("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table33, "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table34.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table34.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table34.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table34.AddRow(new string[] {
                        "scope",
                        "email role"});
            table34.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS512"});
#line 479
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table34, "And ");
#line 487
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 488
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 489
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 490
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table35.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table35.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table35.AddRow(new string[] {
                        "state",
                        "state"});
            table35.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table35.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table35.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table35.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table35.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 492
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table35, "And ");
#line 503
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 504
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 506
 testRunner.Then("JWS Alg equals to \'RS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 507
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 508
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 509
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 510
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 511
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 512
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 513
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 514
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 515
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 516
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA1_5 & A128CBC-HS256)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA1_5 & A128CBC-HS256)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA1_5A128CBC_HS256()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA1_5 & A128CBC-HS256)", null, ((string[])(null)));
#line 518
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table36.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 519
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table36, "When ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table37.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA1_5"});
#line 523
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table37, "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table38.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table38.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table38.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table38.AddRow(new string[] {
                        "scope",
                        "email role"});
            table38.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table38.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table38.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA1_5"});
            table38.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A128CBC-HS256"});
            table38.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 527
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table38, "And ");
#line 539
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 540
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 541
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 542
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table39.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table39.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table39.AddRow(new string[] {
                        "state",
                        "state"});
            table39.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table39.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table39.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table39.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table39.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 544
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table39, "And ");
#line 555
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 556
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 557
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 559
 testRunner.Then("JWE Alg equals to \'RSA1_5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 560
 testRunner.Then("JWE Enc equals to \'A128CBC-HS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 561
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 562
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 563
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 564
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 565
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 566
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 567
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 568
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 569
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 570
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 571
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA1_5 & A192CBC-HS384)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA1_5 & A192CBC-HS384)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA1_5A192CBC_HS384()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA1_5 & A192CBC-HS384)", null, ((string[])(null)));
#line 573
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table40.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 574
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table40, "When ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table41.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA1_5"});
#line 578
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table42.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table42.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table42.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table42.AddRow(new string[] {
                        "scope",
                        "email role"});
            table42.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table42.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table42.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA1_5"});
            table42.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A192CBC-HS384"});
            table42.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 582
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table42, "And ");
#line 594
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 595
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 596
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 597
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table43.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table43.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table43.AddRow(new string[] {
                        "state",
                        "state"});
            table43.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table43.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table43.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table43.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table43.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 599
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table43, "And ");
#line 610
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 611
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 612
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 614
 testRunner.Then("JWE Alg equals to \'RSA1_5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 615
 testRunner.Then("JWE Enc equals to \'A192CBC-HS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 616
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 617
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 618
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 619
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 620
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 621
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 622
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 623
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 624
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 625
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 626
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA1_5 & A256CBC-HS512)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA1_5 & A256CBC-HS512)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA1_5A256CBC_HS512()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA1_5 & A256CBC-HS512)", null, ((string[])(null)));
#line 628
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table44.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 629
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table44, "When ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table45.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA1_5"});
#line 633
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table46.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table46.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table46.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table46.AddRow(new string[] {
                        "scope",
                        "email role"});
            table46.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table46.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table46.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA1_5"});
            table46.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A256CBC-HS512"});
            table46.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 637
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table46, "When ");
#line 649
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 650
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 651
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 652
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table47.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table47.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table47.AddRow(new string[] {
                        "state",
                        "state"});
            table47.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table47.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table47.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table47.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table47.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 654
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table47, "And ");
#line 665
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 666
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 667
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 669
 testRunner.Then("JWE Alg equals to \'RSA1_5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 670
 testRunner.Then("JWE Enc equals to \'A256CBC-HS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 671
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 672
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 673
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 674
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 675
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 676
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 677
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 678
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 679
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 680
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 681
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA-OAEP-256 & A128CBC-HS256)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA-OAEP-256 & A128CBC-HS256)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA_OAEP_256A128CBC_HS256()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA-OAEP-256 & A128CBC-HS256)", null, ((string[])(null)));
#line 683
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table48.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 684
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table48, "When ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table49.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA-OAEP-256"});
#line 688
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table49, "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table50.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table50.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table50.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table50.AddRow(new string[] {
                        "scope",
                        "email role"});
            table50.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table50.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table50.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA-OAEP-256"});
            table50.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A128CBC-HS256"});
            table50.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 692
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table50, "And ");
#line 704
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 705
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 706
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 707
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table51.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table51.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table51.AddRow(new string[] {
                        "state",
                        "state"});
            table51.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table51.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table51.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table51.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table51.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 709
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table51, "And ");
#line 720
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 721
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 722
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 724
 testRunner.Then("JWE Alg equals to \'RSA-OAEP-256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 725
 testRunner.Then("JWE Enc equals to \'A128CBC-HS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 726
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 727
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 728
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 729
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 730
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 731
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 732
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 733
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 734
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 735
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 736
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA-OAEP-256 & A192CBC-HS384)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA-OAEP-256 & A192CBC-HS384)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA_OAEP_256A192CBC_HS384()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA-OAEP-256 & A192CBC-HS384)", null, ((string[])(null)));
#line 738
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table52.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 739
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table52, "When ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table53.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA-OAEP-256"});
#line 743
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table54.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table54.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table54.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table54.AddRow(new string[] {
                        "scope",
                        "email role"});
            table54.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table54.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table54.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA-OAEP-256"});
            table54.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A192CBC-HS384"});
            table54.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 747
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table54, "And ");
#line 759
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 760
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 761
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 762
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table55.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table55.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table55.AddRow(new string[] {
                        "state",
                        "state"});
            table55.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table55.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table55.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table55.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table55.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 764
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table55, "And ");
#line 775
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 776
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 777
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 779
 testRunner.Then("JWE Alg equals to \'RSA-OAEP-256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 780
 testRunner.Then("JWE Enc equals to \'A192CBC-HS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 781
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 782
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 783
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 784
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 785
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 786
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 787
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 788
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 789
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 790
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 791
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA-OAEP-256 & A256CBC-HS512)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA-OAEP-256 & A256CBC-HS512)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA_OAEP_256A256CBC_HS512()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA-OAEP-256 & A256CBC-HS512)", null, ((string[])(null)));
#line 793
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table56.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 794
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table56, "When ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table57.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA-OAEP-256"});
#line 798
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table57, "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table58.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table58.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table58.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table58.AddRow(new string[] {
                        "scope",
                        "email role"});
            table58.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table58.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table58.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA-OAEP-256"});
            table58.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A256CBC-HS512"});
            table58.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 802
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table58, "And ");
#line 814
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 815
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 816
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 817
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table59.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table59.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table59.AddRow(new string[] {
                        "state",
                        "state"});
            table59.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table59.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table59.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table59.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table59.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 819
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table59, "And ");
#line 830
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 831
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 832
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 834
 testRunner.Then("JWE Alg equals to \'RSA-OAEP-256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 835
 testRunner.Then("JWE Enc equals to \'A256CBC-HS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 836
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 837
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 838
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 839
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 840
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 841
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 842
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 843
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 844
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 845
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 846
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA-OAEP & A128CBC-HS256)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA-OAEP & A128CBC-HS256)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA_OAEPA128CBC_HS256()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA-OAEP & A128CBC-HS256)", null, ((string[])(null)));
#line 848
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table60.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 849
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table60, "When ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table61.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA-OAEP"});
#line 853
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table61, "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table62.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table62.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table62.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table62.AddRow(new string[] {
                        "scope",
                        "email role"});
            table62.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table62.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table62.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA-OAEP"});
            table62.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A128CBC-HS256"});
            table62.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 857
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table62, "And ");
#line 869
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 870
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 871
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 872
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table63.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table63.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table63.AddRow(new string[] {
                        "state",
                        "state"});
            table63.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table63.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table63.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table63.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table63.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 874
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table63, "And ");
#line 885
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 886
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 887
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 889
 testRunner.Then("JWE Alg equals to \'RSA-OAEP\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 890
 testRunner.Then("JWE Enc equals to \'A128CBC-HS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 891
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 892
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 893
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 894
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 895
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 896
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 897
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 898
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 899
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 900
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 901
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA-OAEP & A192CBC-HS384)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA-OAEP & A192CBC-HS384)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA_OAEPA192CBC_HS384()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA-OAEP & A192CBC-HS384)", null, ((string[])(null)));
#line 903
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table64.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 904
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table64, "When ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table65.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA-OAEP"});
#line 908
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table65, "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table66.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table66.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table66.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table66.AddRow(new string[] {
                        "scope",
                        "email role"});
            table66.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table66.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table66.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA-OAEP"});
            table66.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A192CBC-HS384"});
            table66.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 912
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table66, "And ");
#line 924
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 925
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 926
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 927
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table67.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table67.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table67.AddRow(new string[] {
                        "state",
                        "state"});
            table67.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table67.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table67.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table67.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table67.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 929
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table67, "And ");
#line 940
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 941
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 942
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 944
 testRunner.Then("JWE Alg equals to \'RSA-OAEP\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 945
 testRunner.Then("JWE Enc equals to \'A192CBC-HS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 946
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 947
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 948
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 949
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 950
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 951
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 952
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 953
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 954
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 955
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 956
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA-OAEP & A256CBC-HS512)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA-OAEP & A256CBC-HS512)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA_OAEPA256CBC_HS512()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA-OAEP & A256CBC-HS512)", null, ((string[])(null)));
#line 958
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table68.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 959
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table68, "When ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table69.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA-OAEP"});
#line 963
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table69, "And ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table70.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table70.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table70.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table70.AddRow(new string[] {
                        "scope",
                        "email role"});
            table70.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table70.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table70.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA-OAEP"});
            table70.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A256CBC-HS512"});
            table70.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 967
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table70, "And ");
#line 979
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 980
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 981
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 982
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table71.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table71.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table71.AddRow(new string[] {
                        "state",
                        "state"});
            table71.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table71.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table71.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table71.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table71.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 984
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table71, "And ");
#line 995
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 996
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 997
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 999
 testRunner.Then("JWE Alg equals to \'RSA-OAEP\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1000
 testRunner.Then("JWE Enc equals to \'A256CBC-HS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1001
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1002
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1003
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1004
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1005
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1006
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1007
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1008
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1009
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1010
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1011
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use request object (JWS) parameter to get an access token and authorization code")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Use request object (JWS) parameter to get an access token and authorization code")]
        public virtual void UseRequestObjectJWSParameterToGetAnAccessTokenAndAuthorizationCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use request object (JWS) parameter to get an access token and authorization code", null, ((string[])(null)));
#line 1013
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table72.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1014
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table72, "When ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table73.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1018
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table73, "And ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table74.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table74.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table74.AddRow(new string[] {
                        "response_types",
                        "[code,id_token]"});
            table74.AddRow(new string[] {
                        "scope",
                        "email"});
            table74.AddRow(new string[] {
                        "request_object_signing_alg",
                        "RS256"});
            table74.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 1022
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table74, "And ");
#line 1031
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1032
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1033
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table75.AddRow(new string[] {
                        "iss",
                        "$client_id$"});
            table75.AddRow(new string[] {
                        "aud",
                        "aud"});
            table75.AddRow(new string[] {
                        "response_type",
                        "code id_token"});
            table75.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table75.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table75.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table75.AddRow(new string[] {
                        "nonce",
                        "nonce"});
            table75.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
#line 1035
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'request\'", ((string)(null)), table75, "And ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table76.AddRow(new string[] {
                        "request",
                        "$request$"});
            table76.AddRow(new string[] {
                        "response_type",
                        "code id_token"});
            table76.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table76.AddRow(new string[] {
                        "state",
                        "state"});
            table76.AddRow(new string[] {
                        "scope",
                        "openid email"});
#line 1046
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table76, "And ");
#line 1054
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1055
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1057
 testRunner.Then("redirect url contains \'id_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1058
 testRunner.Then("redirect url contains \'code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1059
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1060
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1061
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1062
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1063
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1064
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1065
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1066
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use request object (JWE) parameter to get an access token and authorization code")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Use request object (JWE) parameter to get an access token and authorization code")]
        public virtual void UseRequestObjectJWEParameterToGetAnAccessTokenAndAuthorizationCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use request object (JWE) parameter to get an access token and authorization code", null, ((string[])(null)));
#line 1068
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table77.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
            table77.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA1_5"});
#line 1069
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks_enc\'", ((string)(null)), table77, "When ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table78.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1074
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks_sig\' and store the public keys into \'j" +
                    "wks_sig_json\'", ((string)(null)), table78, "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table79.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table79.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table79.AddRow(new string[] {
                        "response_types",
                        "[code,id_token]"});
            table79.AddRow(new string[] {
                        "scope",
                        "email"});
            table79.AddRow(new string[] {
                        "request_object_signing_alg",
                        "RS256"});
            table79.AddRow(new string[] {
                        "request_object_encryption_alg",
                        "RSA1_5"});
            table79.AddRow(new string[] {
                        "request_object_encryption_enc",
                        "A128CBC-HS256"});
            table79.AddRow(new string[] {
                        "jwks",
                        "$jwks_sig_json$"});
#line 1078
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table79, "And ");
#line 1089
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1090
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1091
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1092
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table80.AddRow(new string[] {
                        "iss",
                        "$client_id$"});
            table80.AddRow(new string[] {
                        "aud",
                        "aud"});
            table80.AddRow(new string[] {
                        "response_type",
                        "code id_token"});
            table80.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table80.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table80.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table80.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table80.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 1094
 testRunner.And("use \'1\' JWK from \'jwks_sig\' to build JWS and store into \'jws_request\'", ((string)(null)), table80, "And ");
#line 1105
 testRunner.And("use \'2\' JWKS from \'jwks_enc\' to encrypt \'$jws_request$\' and enc \'A128CBC-HS256\' a" +
                    "nd store the result into \'request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table81.AddRow(new string[] {
                        "request",
                        "$request$"});
            table81.AddRow(new string[] {
                        "response_type",
                        "code id_token"});
            table81.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table81.AddRow(new string[] {
                        "state",
                        "state"});
            table81.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table81.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 1107
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table81, "And ");
#line 1116
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1117
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1119
 testRunner.Then("redirect url contains \'id_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1120
 testRunner.Then("redirect url contains \'code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1121
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1122
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1123
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1124
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1125
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1126
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1127
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1128
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Public subject is returned in id_token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Public subject is returned in id_token")]
        public virtual void PublicSubjectIsReturnedInId_Token()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Public subject is returned in id_token", null, ((string[])(null)));
#line 1130
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table82.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1131
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table82, "When ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table83.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table83.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table83.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table83.AddRow(new string[] {
                        "scope",
                        "email"});
            table83.AddRow(new string[] {
                        "subject_type",
                        "public"});
#line 1135
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table83, "And ");
#line 1143
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1144
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1145
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table84.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table84.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table84.AddRow(new string[] {
                        "state",
                        "state"});
            table84.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table84.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table84.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table84.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table84.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 1147
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table84, "And ");
#line 1158
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1159
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1161
 testRunner.Then("redirect url contains \'id_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1162
 testRunner.Then("redirect url contains \'token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1163
 testRunner.Then("redirect url contains \'code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1164
 testRunner.Then("redirect url contains \'ui_locales\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1165
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Pairwise subject is returned in id_token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Pairwise subject is returned in id_token")]
        public virtual void PairwiseSubjectIsReturnedInId_Token()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pairwise subject is returned in id_token", null, ((string[])(null)));
#line 1167
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table85.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1168
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table85, "When ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table86.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table86.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table86.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table86.AddRow(new string[] {
                        "scope",
                        "email"});
            table86.AddRow(new string[] {
                        "subject_type",
                        "pairwise"});
#line 1172
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table86, "And ");
#line 1180
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1181
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1182
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table87.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table87.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table87.AddRow(new string[] {
                        "state",
                        "state"});
            table87.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table87.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table87.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table87.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table87.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 1184
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table87, "And ");
#line 1195
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1196
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1198
 testRunner.Then("redirect url contains \'id_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1199
 testRunner.Then("redirect url contains \'token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1200
 testRunner.Then("redirect url contains \'code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1201
 testRunner.Then("redirect url contains \'ui_locales\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1202
 testRunner.Then("token claim \'sub\'!=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="User-agent is redirected to the login page when elapsed time > authentication tim" +
            "e + default client max age")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "User-agent is redirected to the login page when elapsed time > authentication tim" +
            "e + default client max age")]
        public virtual void User_AgentIsRedirectedToTheLoginPageWhenElapsedTimeAuthenticationTimeDefaultClientMaxAge()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User-agent is redirected to the login page when elapsed time > authentication tim" +
                    "e + default client max age", null, ((string[])(null)));
#line 1204
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table88.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table88.AddRow(new string[] {
                        "default_max_age",
                        "2"});
            table88.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table88.AddRow(new string[] {
                        "response_types",
                        "[token,id_token]"});
            table88.AddRow(new string[] {
                        "scope",
                        "email"});
#line 1205
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table88, "When ");
#line 1213
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1214
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1215
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1216
 testRunner.And("add \'-10\' seconds to authentication instant to user \'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table89.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table89.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table89.AddRow(new string[] {
                        "state",
                        "state"});
            table89.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table89.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table89.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table89.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 1218
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table89, "And ");
#line 1228
 testRunner.Then("redirect url contains \'http://localhost/Authenticate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="User-agent is redirected to the login page when elapsed time > to authentication " +
            "time + max_age parameter")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "User-agent is redirected to the login page when elapsed time > to authentication " +
            "time + max_age parameter")]
        public virtual void User_AgentIsRedirectedToTheLoginPageWhenElapsedTimeToAuthenticationTimeMax_AgeParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User-agent is redirected to the login page when elapsed time > to authentication " +
                    "time + max_age parameter", null, ((string[])(null)));
#line 1230
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table90.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table90.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table90.AddRow(new string[] {
                        "response_types",
                        "[token,id_token]"});
            table90.AddRow(new string[] {
                        "scope",
                        "email"});
#line 1231
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table90, "When ");
#line 1238
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1239
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1240
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1241
 testRunner.And("add \'-10\' seconds to authentication instant to user \'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table91.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table91.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table91.AddRow(new string[] {
                        "state",
                        "state"});
            table91.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table91.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table91.AddRow(new string[] {
                        "max_age",
                        "2"});
            table91.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table91.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 1243
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table91, "And ");
#line 1254
 testRunner.Then("redirect url contains \'http://localhost/Authenticate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token must contains an auth_time claim when mentionned as essential")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token must contains an auth_time claim when mentionned as essential")]
        public virtual void IdentityTokenMustContainsAnAuth_TimeClaimWhenMentionnedAsEssential()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token must contains an auth_time claim when mentionned as essential", null, ((string[])(null)));
#line 1256
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table92.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1257
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table92, "When ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table93.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table93.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table93.AddRow(new string[] {
                        "response_types",
                        "[token,id_token]"});
            table93.AddRow(new string[] {
                        "scope",
                        "email"});
#line 1261
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table93, "And ");
#line 1268
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1269
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1270
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table94.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table94.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table94.AddRow(new string[] {
                        "state",
                        "state"});
            table94.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table94.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table94.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table94.AddRow(new string[] {
                        "nonce",
                        "nonce"});
            table94.AddRow(new string[] {
                        "claims",
                        "{ id_token: { auth_time: { essential : true } } }"});
#line 1272
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table94, "And ");
#line 1283
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1284
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1286
 testRunner.Then("redirect url contains \'id_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1287
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1288
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1289
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1290
 testRunner.Then("token contains \'auth_time\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1291
 testRunner.Then("token claim \'iss\'=\'http://localhost\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1292
 testRunner.Then("token claim \'azp\'=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1293
 testRunner.Then("token claim \'nonce\'=\'nonce\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1294
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1295
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use implicit grant-type to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Use implicit grant-type to get an access token")]
        public virtual void UseImplicitGrant_TypeToGetAnAccessToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use implicit grant-type to get an access token", null, ((string[])(null)));
#line 1297
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table95.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1298
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table95, "When ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table96.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table96.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table96.AddRow(new string[] {
                        "response_types",
                        "[token]"});
            table96.AddRow(new string[] {
                        "scope",
                        "email"});
#line 1302
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table96, "And ");
#line 1309
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1310
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1311
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table97.AddRow(new string[] {
                        "response_type",
                        "token"});
            table97.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table97.AddRow(new string[] {
                        "state",
                        "state"});
            table97.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table97.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table97.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
#line 1313
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table97, "And ");
#line 1322
 testRunner.And("extract \'access_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1323
 testRunner.And("extract payload from JWS \'$access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1325
 testRunner.Then("redirect url contains \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1326
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1327
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1328
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1329
 testRunner.Then("token contains \'auth_time\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1330
 testRunner.Then("token contains \'scope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1331
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1332
 testRunner.Then("token claim \'iss\'=\'http://localhost\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use implicit grant-type to get an access and identity token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Use implicit grant-type to get an access and identity token")]
        public virtual void UseImplicitGrant_TypeToGetAnAccessAndIdentityToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use implicit grant-type to get an access and identity token", null, ((string[])(null)));
#line 1334
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table98.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1335
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table98, "When ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table99.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table99.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table99.AddRow(new string[] {
                        "response_types",
                        "[token,id_token]"});
            table99.AddRow(new string[] {
                        "scope",
                        "email"});
#line 1339
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table99, "And ");
#line 1346
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1347
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1348
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table100.AddRow(new string[] {
                        "response_type",
                        "token id_token"});
            table100.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table100.AddRow(new string[] {
                        "state",
                        "state"});
            table100.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table100.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table100.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table100.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 1350
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table100, "And ");
#line 1360
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1361
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1363
 testRunner.Then("redirect url contains \'id_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1364
 testRunner.Then("redirect url contains \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1365
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1366
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1367
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1368
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1369
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1370
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1371
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1372
 testRunner.Then("token claim \'nonce\'=\'nonce\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use hybrid grant-type to get an identity token and authorization code")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Use hybrid grant-type to get an identity token and authorization code")]
        public virtual void UseHybridGrant_TypeToGetAnIdentityTokenAndAuthorizationCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use hybrid grant-type to get an identity token and authorization code", null, ((string[])(null)));
#line 1374
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table101.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1375
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table101, "When ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table102.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table102.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table102.AddRow(new string[] {
                        "response_types",
                        "[code,id_token]"});
            table102.AddRow(new string[] {
                        "scope",
                        "email"});
#line 1379
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table102, "And ");
#line 1386
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1387
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1388
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table103.AddRow(new string[] {
                        "response_type",
                        "id_token code"});
            table103.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table103.AddRow(new string[] {
                        "state",
                        "state"});
            table103.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table103.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table103.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table103.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 1390
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table103, "And ");
#line 1400
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1401
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1403
 testRunner.Then("redirect url contains \'id_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1404
 testRunner.Then("redirect url contains \'code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1405
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1406
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1407
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1408
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1409
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1410
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1411
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1412
 testRunner.Then("token claim \'nonce\'=\'nonce\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check a refresh token is returned when the scope offline_access is used")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Check a refresh token is returned when the scope offline_access is used")]
        public virtual void CheckARefreshTokenIsReturnedWhenTheScopeOffline_AccessIsUsed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check a refresh token is returned when the scope offline_access is used", null, ((string[])(null)));
#line 1414
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table104.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table104.AddRow(new string[] {
                        "grant_types",
                        "[authorization_code]"});
            table104.AddRow(new string[] {
                        "response_types",
                        "[code]"});
            table104.AddRow(new string[] {
                        "scope",
                        "email offline_access"});
            table104.AddRow(new string[] {
                        "subject_type",
                        "public"});
#line 1415
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table104, "When ");
#line 1423
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1424
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1425
 testRunner.And("add user consent : user=\'administrator\', scope=\'email offline_access\', clientId=\'" +
                    "$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table105.AddRow(new string[] {
                        "response_type",
                        "code"});
            table105.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table105.AddRow(new string[] {
                        "state",
                        "state"});
            table105.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table105.AddRow(new string[] {
                        "scope",
                        "openid offline_access email"});
            table105.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table105.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 1427
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table105, "And ");
#line 1437
 testRunner.Then("redirect url contains \'code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1438
 testRunner.Then("redirect url contains \'refresh_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check amr and acr claims are present in the identity token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Check amr and acr claims are present in the identity token")]
        public virtual void CheckAmrAndAcrClaimsArePresentInTheIdentityToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check amr and acr claims are present in the identity token", null, ((string[])(null)));
#line 1440
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table106.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1441
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table106, "When ");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Amrs"});
            table107.AddRow(new string[] {
                        "1",
                        "Level1",
                        "pwd"});
#line 1445
 testRunner.And("add authentication class references", ((string)(null)), table107, "And ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table108.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table108.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table108.AddRow(new string[] {
                        "response_types",
                        "[code,id_token]"});
            table108.AddRow(new string[] {
                        "scope",
                        "email"});
            table108.AddRow(new string[] {
                        "subject_type",
                        "public"});
#line 1449
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table108, "And ");
#line 1457
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1458
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1459
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table109.AddRow(new string[] {
                        "response_type",
                        "code id_token"});
            table109.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table109.AddRow(new string[] {
                        "state",
                        "state"});
            table109.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table109.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table109.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table109.AddRow(new string[] {
                        "acr_values",
                        "1"});
            table109.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 1461
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table109, "And ");
#line 1472
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1473
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1475
 testRunner.Then("token contains \'amr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1476
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1477
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1478
 testRunner.Then("token claim \'acr\'=\'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AuthorizationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AuthorizationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
