// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.OpenID.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AuthorizationFeature : Xunit.IClassFixture<AuthorizationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Authorization.feature"
#line hidden
        
        public AuthorizationFeature(AuthorizationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Authorization", "\tCheck the authorization endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="When no access token is issued the resulting claims are returned in the ID token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "When no access token is issued the resulting claims are returned in the ID token")]
        public virtual void WhenNoAccessTokenIsIssuedTheResultingClaimsAreReturnedInTheIDToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When no access token is issued the resulting claims are returned in the ID token", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table1.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table1.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table1.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table1.AddRow(new string[] {
                        "scope",
                        "email role"});
            table1.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "none"});
#line 5
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table1, "When ");
#line 13
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table2.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table2.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table2.AddRow(new string[] {
                        "state",
                        "state"});
            table2.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table2.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table2.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table2.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 18
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table2, "And ");
#line 28
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.And("extract \'display\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.Then("JWS Alg equals to \'none\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 33
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 35
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 40
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check display is passed into the callback url")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Check display is passed into the callback url")]
        public virtual void CheckDisplayIsPassedIntoTheCallbackUrl()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check display is passed into the callback url", null, ((string[])(null)));
#line 43
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table3.AddRow(new string[] {
                        "SIG",
                        "1",
                        "ES256"});
#line 44
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table4.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table4.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table4.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table4.AddRow(new string[] {
                        "scope",
                        "email"});
            table4.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "ES256"});
#line 48
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table4, "And ");
#line 56
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table5.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table5.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table5.AddRow(new string[] {
                        "state",
                        "state"});
            table5.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table5.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table5.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table5.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table5.AddRow(new string[] {
                        "display",
                        "popup"});
#line 60
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table5, "And ");
#line 71
 testRunner.And("extract \'display\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.Then("\'$display$\'=\'popup\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (none)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (none)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatNone()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (none)", null, ((string[])(null)));
#line 75
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table6.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table6.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table6.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table6.AddRow(new string[] {
                        "scope",
                        "email role"});
            table6.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "none"});
#line 76
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table6, "When ");
#line 84
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table7.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table7.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table7.AddRow(new string[] {
                        "state",
                        "state"});
            table7.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table7.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table7.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table7.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 89
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table7, "And ");
#line 99
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.And("extract \'display\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
 testRunner.Then("JWS Alg equals to \'none\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 104
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 105
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 106
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 107
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 108
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 109
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 110
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 111
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 112
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (ES256)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (ES256)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatES256()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (ES256)", null, ((string[])(null)));
#line 114
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table8.AddRow(new string[] {
                        "SIG",
                        "1",
                        "ES256"});
#line 115
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table8, "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table9.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table9.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table9.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table9.AddRow(new string[] {
                        "scope",
                        "email role"});
            table9.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "ES256"});
#line 119
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table9, "And ");
#line 127
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table10.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table10.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table10.AddRow(new string[] {
                        "state",
                        "state"});
            table10.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table10.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table10.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table10.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 132
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table10, "And ");
#line 142
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
 testRunner.And("extract \'display\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.Then("JWS Alg equals to \'ES256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 147
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 148
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 149
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 150
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 151
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 152
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 153
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 154
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 155
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 156
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (ES384)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (ES384)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatES384()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (ES384)", null, ((string[])(null)));
#line 158
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table11.AddRow(new string[] {
                        "SIG",
                        "1",
                        "ES384"});
#line 159
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table11, "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table12.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table12.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table12.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table12.AddRow(new string[] {
                        "scope",
                        "email role"});
            table12.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "ES384"});
#line 163
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table12, "And ");
#line 171
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table13.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table13.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table13.AddRow(new string[] {
                        "state",
                        "state"});
            table13.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table13.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table13.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table13.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 176
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table13, "And ");
#line 186
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
 testRunner.Then("JWS Alg equals to \'ES384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 190
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 191
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 192
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 193
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 194
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 195
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 196
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 197
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 198
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 199
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (ES512)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (ES512)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatES512()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (ES512)", null, ((string[])(null)));
#line 201
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table14.AddRow(new string[] {
                        "SIG",
                        "1",
                        "ES512"});
#line 202
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table14, "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table15.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table15.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table15.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table15.AddRow(new string[] {
                        "scope",
                        "email role"});
            table15.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "ES512"});
#line 206
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table15, "And ");
#line 214
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table16.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table16.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table16.AddRow(new string[] {
                        "state",
                        "state"});
            table16.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table16.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table16.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table16.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 219
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table16, "And ");
#line 229
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 230
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
 testRunner.Then("JWS Alg equals to \'ES512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 233
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 234
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 235
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 236
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 237
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 238
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 239
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 240
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 241
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 242
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (HS256)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (HS256)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatHS256()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (HS256)", null, ((string[])(null)));
#line 244
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table17.AddRow(new string[] {
                        "SIG",
                        "1",
                        "HS256"});
#line 245
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table17, "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table18.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table18.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table18.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table18.AddRow(new string[] {
                        "scope",
                        "email role"});
            table18.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "HS256"});
#line 249
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table18, "And ");
#line 257
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 258
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 259
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 260
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table19.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table19.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table19.AddRow(new string[] {
                        "state",
                        "state"});
            table19.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table19.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table19.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table19.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 262
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table19, "And ");
#line 272
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 273
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 275
 testRunner.Then("JWS Alg equals to \'HS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 276
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 277
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 278
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 279
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 280
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 281
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 282
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 283
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 284
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 285
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (HS384)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (HS384)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatHS384()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (HS384)", null, ((string[])(null)));
#line 287
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table20.AddRow(new string[] {
                        "SIG",
                        "1",
                        "HS384"});
#line 288
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table20, "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table21.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table21.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table21.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table21.AddRow(new string[] {
                        "scope",
                        "email role"});
            table21.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "HS384"});
#line 292
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table21, "And ");
#line 300
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 301
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 302
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 303
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table22.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table22.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table22.AddRow(new string[] {
                        "state",
                        "state"});
            table22.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table22.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table22.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table22.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 305
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table22, "And ");
#line 315
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 316
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 318
 testRunner.Then("JWS Alg equals to \'HS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 319
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 320
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 321
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 322
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 323
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 324
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 325
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 326
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 327
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 328
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (HS512)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (HS512)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatHS512()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (HS512)", null, ((string[])(null)));
#line 330
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table23.AddRow(new string[] {
                        "SIG",
                        "1",
                        "HS512"});
#line 331
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table23, "When ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table24.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table24.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table24.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table24.AddRow(new string[] {
                        "scope",
                        "email role"});
            table24.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "HS512"});
#line 335
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table24, "And ");
#line 343
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 344
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 345
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 346
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table25.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table25.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table25.AddRow(new string[] {
                        "state",
                        "state"});
            table25.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table25.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table25.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table25.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 348
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table25, "And ");
#line 358
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 359
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 361
 testRunner.Then("JWS Alg equals to \'HS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 362
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 363
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 364
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 365
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 366
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 367
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 368
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 369
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 370
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 371
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (RS256)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (RS256)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatRS256()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (RS256)", null, ((string[])(null)));
#line 373
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table26.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 374
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table26, "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table27.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table27.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table27.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table27.AddRow(new string[] {
                        "scope",
                        "email role"});
            table27.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
#line 378
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table27, "And ");
#line 386
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 387
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 388
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 389
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table28.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table28.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table28.AddRow(new string[] {
                        "state",
                        "state"});
            table28.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table28.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table28.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table28.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 391
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table28, "And ");
#line 401
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 402
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 404
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 405
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 406
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 407
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 408
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 409
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 410
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 411
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 412
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 413
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 414
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (RS384)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (RS384)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatRS384()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (RS384)", null, ((string[])(null)));
#line 416
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table29.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS384"});
#line 417
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table29, "When ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table30.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table30.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table30.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table30.AddRow(new string[] {
                        "scope",
                        "email role"});
            table30.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS384"});
#line 421
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table30, "And ");
#line 429
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 430
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 431
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 432
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table31.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table31.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table31.AddRow(new string[] {
                        "state",
                        "state"});
            table31.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table31.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table31.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table31.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 434
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table31, "And ");
#line 444
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 445
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 447
 testRunner.Then("JWS Alg equals to \'RS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 448
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 449
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 450
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 451
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 452
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 453
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 454
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 455
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 456
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 457
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWS format (RS512)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWS format (RS512)")]
        public virtual void IdentityTokenIsReturnedInJWSFormatRS512()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWS format (RS512)", null, ((string[])(null)));
#line 459
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table32.AddRow(new string[] {
                        "SIG",
                        "1",
                        "ES256"});
#line 460
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table32, "When ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table33.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS512"});
#line 464
 testRunner.And("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table33, "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table34.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table34.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table34.AddRow(new string[] {
                        "response_types",
                        "[id_token]"});
            table34.AddRow(new string[] {
                        "scope",
                        "email role"});
            table34.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS512"});
#line 468
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table34, "And ");
#line 476
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 477
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 478
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 479
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table35.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table35.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table35.AddRow(new string[] {
                        "state",
                        "state"});
            table35.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table35.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table35.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table35.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 481
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table35, "And ");
#line 491
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 492
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 494
 testRunner.Then("JWS Alg equals to \'RS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 495
 testRunner.Then("JWS Kid equals to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 496
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 497
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 498
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 499
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 500
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 501
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 502
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 503
 testRunner.Then("token claim \'role\' contains \'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 504
 testRunner.Then("token claim \'role\' contains \'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA1_5 & A128CBC-HS256)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA1_5 & A128CBC-HS256)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA1_5A128CBC_HS256()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA1_5 & A128CBC-HS256)", null, ((string[])(null)));
#line 506
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table36.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 507
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table36, "When ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table37.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA1_5"});
#line 511
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table37, "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table38.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table38.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table38.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table38.AddRow(new string[] {
                        "scope",
                        "email role"});
            table38.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table38.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table38.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA1_5"});
            table38.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A128CBC-HS256"});
            table38.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 515
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table38, "And ");
#line 527
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 528
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 529
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 530
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table39.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table39.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table39.AddRow(new string[] {
                        "state",
                        "state"});
            table39.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table39.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table39.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table39.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 532
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table39, "And ");
#line 542
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 543
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 544
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 546
 testRunner.Then("JWE Alg equals to \'RSA1_5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 547
 testRunner.Then("JWE Enc equals to \'A128CBC-HS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 548
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 549
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 550
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 551
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 552
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 553
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 554
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 555
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 556
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 557
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 558
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA1_5 & A192CBC-HS384)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA1_5 & A192CBC-HS384)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA1_5A192CBC_HS384()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA1_5 & A192CBC-HS384)", null, ((string[])(null)));
#line 560
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table40.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 561
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table40, "When ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table41.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA1_5"});
#line 565
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table42.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table42.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table42.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table42.AddRow(new string[] {
                        "scope",
                        "email role"});
            table42.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table42.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table42.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA1_5"});
            table42.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A192CBC-HS384"});
            table42.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 569
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table42, "And ");
#line 581
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 582
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 583
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 584
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table43.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table43.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table43.AddRow(new string[] {
                        "state",
                        "state"});
            table43.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table43.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table43.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table43.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 586
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table43, "And ");
#line 596
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 597
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 598
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 600
 testRunner.Then("JWE Alg equals to \'RSA1_5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 601
 testRunner.Then("JWE Enc equals to \'A192CBC-HS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 602
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 603
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 604
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 605
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 606
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 607
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 608
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 609
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 610
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 611
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 612
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA1_5 & A256CBC-HS512)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA1_5 & A256CBC-HS512)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA1_5A256CBC_HS512()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA1_5 & A256CBC-HS512)", null, ((string[])(null)));
#line 614
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table44.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 615
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table44, "When ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table45.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA1_5"});
#line 619
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table46.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table46.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table46.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table46.AddRow(new string[] {
                        "scope",
                        "email role"});
            table46.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table46.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table46.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA1_5"});
            table46.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A256CBC-HS512"});
            table46.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 623
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table46, "When ");
#line 635
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 636
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 637
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 638
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table47.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table47.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table47.AddRow(new string[] {
                        "state",
                        "state"});
            table47.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table47.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table47.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table47.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 640
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table47, "And ");
#line 650
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 651
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 652
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 654
 testRunner.Then("JWE Alg equals to \'RSA1_5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 655
 testRunner.Then("JWE Enc equals to \'A256CBC-HS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 656
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 657
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 658
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 659
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 660
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 661
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 662
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 663
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 664
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 665
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 666
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA-OAEP-256 & A128CBC-HS256)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA-OAEP-256 & A128CBC-HS256)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA_OAEP_256A128CBC_HS256()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA-OAEP-256 & A128CBC-HS256)", null, ((string[])(null)));
#line 668
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table48.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 669
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table48, "When ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table49.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA-OAEP-256"});
#line 673
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table49, "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table50.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table50.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table50.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table50.AddRow(new string[] {
                        "scope",
                        "email role"});
            table50.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table50.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table50.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA-OAEP-256"});
            table50.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A128CBC-HS256"});
            table50.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 677
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table50, "And ");
#line 689
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 690
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 691
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 692
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table51.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table51.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table51.AddRow(new string[] {
                        "state",
                        "state"});
            table51.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table51.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table51.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table51.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 694
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table51, "And ");
#line 704
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 705
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 706
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 708
 testRunner.Then("JWE Alg equals to \'RSA-OAEP-256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 709
 testRunner.Then("JWE Enc equals to \'A128CBC-HS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 710
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 711
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 712
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 713
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 714
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 715
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 716
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 717
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 718
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 719
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 720
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA-OAEP-256 & A192CBC-HS384)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA-OAEP-256 & A192CBC-HS384)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA_OAEP_256A192CBC_HS384()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA-OAEP-256 & A192CBC-HS384)", null, ((string[])(null)));
#line 722
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table52.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 723
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table52, "When ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table53.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA-OAEP-256"});
#line 727
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table54.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table54.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table54.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table54.AddRow(new string[] {
                        "scope",
                        "email role"});
            table54.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table54.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table54.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA-OAEP-256"});
            table54.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A192CBC-HS384"});
            table54.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 731
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table54, "And ");
#line 743
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 744
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 745
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 746
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table55.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table55.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table55.AddRow(new string[] {
                        "state",
                        "state"});
            table55.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table55.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table55.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table55.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 748
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table55, "And ");
#line 758
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 759
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 760
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 762
 testRunner.Then("JWE Alg equals to \'RSA-OAEP-256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 763
 testRunner.Then("JWE Enc equals to \'A192CBC-HS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 764
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 765
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 766
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 767
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 768
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 769
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 770
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 771
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 772
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 773
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 774
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA-OAEP-256 & A256CBC-HS512)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA-OAEP-256 & A256CBC-HS512)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA_OAEP_256A256CBC_HS512()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA-OAEP-256 & A256CBC-HS512)", null, ((string[])(null)));
#line 776
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table56.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 777
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table56, "When ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table57.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA-OAEP-256"});
#line 781
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table57, "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table58.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table58.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table58.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table58.AddRow(new string[] {
                        "scope",
                        "email role"});
            table58.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table58.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table58.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA-OAEP-256"});
            table58.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A256CBC-HS512"});
            table58.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 785
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table58, "And ");
#line 797
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 798
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 799
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 800
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table59.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table59.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table59.AddRow(new string[] {
                        "state",
                        "state"});
            table59.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table59.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table59.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table59.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 802
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table59, "And ");
#line 812
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 813
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 814
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 816
 testRunner.Then("JWE Alg equals to \'RSA-OAEP-256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 817
 testRunner.Then("JWE Enc equals to \'A256CBC-HS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 818
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 819
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 820
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 821
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 822
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 823
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 824
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 825
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 826
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 827
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 828
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA-OAEP & A128CBC-HS256)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA-OAEP & A128CBC-HS256)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA_OAEPA128CBC_HS256()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA-OAEP & A128CBC-HS256)", null, ((string[])(null)));
#line 830
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table60.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 831
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table60, "When ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table61.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA-OAEP"});
#line 835
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table61, "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table62.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table62.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table62.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table62.AddRow(new string[] {
                        "scope",
                        "email role"});
            table62.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table62.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table62.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA-OAEP"});
            table62.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A128CBC-HS256"});
            table62.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 839
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table62, "And ");
#line 851
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 852
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 853
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 854
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table63.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table63.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table63.AddRow(new string[] {
                        "state",
                        "state"});
            table63.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table63.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table63.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table63.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 856
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table63, "And ");
#line 866
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 867
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 868
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 870
 testRunner.Then("JWE Alg equals to \'RSA-OAEP\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 871
 testRunner.Then("JWE Enc equals to \'A128CBC-HS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 872
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 873
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 874
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 875
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 876
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 877
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 878
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 879
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 880
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 881
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 882
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA-OAEP & A192CBC-HS384)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA-OAEP & A192CBC-HS384)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA_OAEPA192CBC_HS384()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA-OAEP & A192CBC-HS384)", null, ((string[])(null)));
#line 884
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table64.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 885
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table64, "When ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table65.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA-OAEP"});
#line 889
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table65, "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table66.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table66.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table66.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table66.AddRow(new string[] {
                        "scope",
                        "email role"});
            table66.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table66.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table66.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA-OAEP"});
            table66.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A192CBC-HS384"});
            table66.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 893
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table66, "And ");
#line 905
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 906
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 907
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 908
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table67.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table67.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table67.AddRow(new string[] {
                        "state",
                        "state"});
            table67.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table67.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table67.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table67.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 910
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table67, "And ");
#line 920
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 921
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 922
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 924
 testRunner.Then("JWE Alg equals to \'RSA-OAEP\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 925
 testRunner.Then("JWE Enc equals to \'A192CBC-HS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 926
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 927
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 928
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 929
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 930
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 931
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 932
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 933
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 934
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 935
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 936
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token is returned in JWE format (RSA-OAEP & A256CBC-HS512)")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token is returned in JWE format (RSA-OAEP & A256CBC-HS512)")]
        public virtual void IdentityTokenIsReturnedInJWEFormatRSA_OAEPA256CBC_HS512()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token is returned in JWE format (RSA-OAEP & A256CBC-HS512)", null, ((string[])(null)));
#line 938
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table68.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 939
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table68, "When ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table69.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA-OAEP"});
#line 943
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table69, "And ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table70.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table70.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table70.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table70.AddRow(new string[] {
                        "scope",
                        "email role"});
            table70.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table70.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table70.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA-OAEP"});
            table70.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A256CBC-HS512"});
            table70.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 947
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table70, "And ");
#line 959
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 960
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 961
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 962
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table71.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table71.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table71.AddRow(new string[] {
                        "state",
                        "state"});
            table71.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table71.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table71.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table71.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 964
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table71, "And ");
#line 974
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 975
 testRunner.And("use \'jwks\' JWKS to decrypt \'$id_token$\' JWE into \'jws\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 976
 testRunner.And("extract payload from JWS \'$jws$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 978
 testRunner.Then("JWE Alg equals to \'RSA-OAEP\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 979
 testRunner.Then("JWE Enc equals to \'A256CBC-HS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 980
 testRunner.Then("JWS Alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 981
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 982
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 983
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 984
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 985
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 986
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 987
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 988
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 989
 testRunner.Then("token claim doesn\'t contain \'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 990
 testRunner.Then("token claim doesn\'t contain \'role\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use request object (JWS) parameter to get an access token and authorization code")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Use request object (JWS) parameter to get an access token and authorization code")]
        public virtual void UseRequestObjectJWSParameterToGetAnAccessTokenAndAuthorizationCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use request object (JWS) parameter to get an access token and authorization code", null, ((string[])(null)));
#line 992
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table72.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 993
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table72, "When ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table73.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 997
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table73, "And ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table74.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table74.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table74.AddRow(new string[] {
                        "response_types",
                        "[code,id_token]"});
            table74.AddRow(new string[] {
                        "scope",
                        "email"});
            table74.AddRow(new string[] {
                        "request_object_signing_alg",
                        "RS256"});
            table74.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 1001
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table74, "And ");
#line 1010
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1011
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1012
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table75.AddRow(new string[] {
                        "iss",
                        "$client_id$"});
            table75.AddRow(new string[] {
                        "aud",
                        "aud"});
            table75.AddRow(new string[] {
                        "response_type",
                        "code id_token"});
            table75.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table75.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table75.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table75.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
#line 1014
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'request\'", ((string)(null)), table75, "And ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table76.AddRow(new string[] {
                        "request",
                        "$request$"});
            table76.AddRow(new string[] {
                        "response_type",
                        "code id_token"});
            table76.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table76.AddRow(new string[] {
                        "state",
                        "state"});
            table76.AddRow(new string[] {
                        "scope",
                        "openid email"});
#line 1024
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table76, "And ");
#line 1032
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1033
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1035
 testRunner.Then("redirect url contains \'id_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1036
 testRunner.Then("redirect url contains \'code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1037
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1038
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1039
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1040
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1041
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1042
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1043
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1044
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use request object (JWE) parameter to get an access token and authorization code")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Use request object (JWE) parameter to get an access token and authorization code")]
        public virtual void UseRequestObjectJWEParameterToGetAnAccessTokenAndAuthorizationCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use request object (JWE) parameter to get an access token and authorization code", null, ((string[])(null)));
#line 1046
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table77.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
            table77.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA1_5"});
#line 1047
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks_enc\'", ((string)(null)), table77, "When ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table78.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1052
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks_sig\' and store the public keys into \'j" +
                    "wks_sig_json\'", ((string)(null)), table78, "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table79.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table79.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table79.AddRow(new string[] {
                        "response_types",
                        "[code,id_token]"});
            table79.AddRow(new string[] {
                        "scope",
                        "email"});
            table79.AddRow(new string[] {
                        "request_object_signing_alg",
                        "RS256"});
            table79.AddRow(new string[] {
                        "request_object_encryption_alg",
                        "RSA1_5"});
            table79.AddRow(new string[] {
                        "request_object_encryption_enc",
                        "A128CBC-HS256"});
            table79.AddRow(new string[] {
                        "jwks",
                        "$jwks_sig_json$"});
#line 1056
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table79, "And ");
#line 1067
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1068
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1069
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1070
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table80.AddRow(new string[] {
                        "iss",
                        "$client_id$"});
            table80.AddRow(new string[] {
                        "aud",
                        "aud"});
            table80.AddRow(new string[] {
                        "response_type",
                        "code id_token"});
            table80.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table80.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table80.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table80.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
#line 1072
 testRunner.And("use \'1\' JWK from \'jwks_sig\' to build JWS and store into \'jws_request\'", ((string)(null)), table80, "And ");
#line 1082
 testRunner.And("use \'2\' JWKS from \'jwks_enc\' to encrypt \'$jws_request$\' and enc \'A128CBC-HS256\' a" +
                    "nd store the result into \'request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table81.AddRow(new string[] {
                        "request",
                        "$request$"});
            table81.AddRow(new string[] {
                        "response_type",
                        "code id_token"});
            table81.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table81.AddRow(new string[] {
                        "state",
                        "state"});
            table81.AddRow(new string[] {
                        "scope",
                        "openid email"});
#line 1084
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table81, "And ");
#line 1092
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1093
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1095
 testRunner.Then("redirect url contains \'id_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1096
 testRunner.Then("redirect url contains \'code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1097
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1098
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1099
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1100
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1101
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1102
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1103
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1104
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Public subject is returned in id_token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Public subject is returned in id_token")]
        public virtual void PublicSubjectIsReturnedInId_Token()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Public subject is returned in id_token", null, ((string[])(null)));
#line 1106
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table82.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1107
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table82, "When ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table83.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table83.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table83.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table83.AddRow(new string[] {
                        "scope",
                        "email"});
            table83.AddRow(new string[] {
                        "subject_type",
                        "public"});
#line 1111
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table83, "And ");
#line 1119
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1120
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1121
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table84.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table84.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table84.AddRow(new string[] {
                        "state",
                        "state"});
            table84.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table84.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table84.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table84.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 1123
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table84, "And ");
#line 1133
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1134
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1136
 testRunner.Then("redirect url contains \'id_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1137
 testRunner.Then("redirect url contains \'token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1138
 testRunner.Then("redirect url contains \'code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1139
 testRunner.Then("redirect url contains \'ui_locales\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1140
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Pairwise subject is returned in id_token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Pairwise subject is returned in id_token")]
        public virtual void PairwiseSubjectIsReturnedInId_Token()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pairwise subject is returned in id_token", null, ((string[])(null)));
#line 1142
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table85.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1143
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table85, "When ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table86.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table86.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table86.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table86.AddRow(new string[] {
                        "scope",
                        "email"});
            table86.AddRow(new string[] {
                        "subject_type",
                        "pairwise"});
#line 1147
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table86, "And ");
#line 1155
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1156
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1157
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table87.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table87.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table87.AddRow(new string[] {
                        "state",
                        "state"});
            table87.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table87.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table87.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table87.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 1159
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table87, "And ");
#line 1169
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1170
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1172
 testRunner.Then("redirect url contains \'id_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1173
 testRunner.Then("redirect url contains \'token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1174
 testRunner.Then("redirect url contains \'code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1175
 testRunner.Then("redirect url contains \'ui_locales\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1176
 testRunner.Then("token claim \'sub\'!=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="User-agent is redirected to the login page when elapsed time > authentication tim" +
            "e + default client max age")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "User-agent is redirected to the login page when elapsed time > authentication tim" +
            "e + default client max age")]
        public virtual void User_AgentIsRedirectedToTheLoginPageWhenElapsedTimeAuthenticationTimeDefaultClientMaxAge()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User-agent is redirected to the login page when elapsed time > authentication tim" +
                    "e + default client max age", null, ((string[])(null)));
#line 1178
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table88.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table88.AddRow(new string[] {
                        "default_max_age",
                        "2"});
            table88.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table88.AddRow(new string[] {
                        "response_types",
                        "[token,id_token]"});
            table88.AddRow(new string[] {
                        "scope",
                        "email"});
#line 1179
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table88, "When ");
#line 1187
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1188
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1189
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1190
 testRunner.And("add \'-10\' seconds to authentication instant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table89.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table89.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table89.AddRow(new string[] {
                        "state",
                        "state"});
            table89.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table89.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table89.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
#line 1192
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table89, "And ");
#line 1201
 testRunner.Then("redirect url contains \'http://localhost/Authenticate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="User-agent is redirected to the login page when elapsed time > to authentication " +
            "time + max_age parameter")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "User-agent is redirected to the login page when elapsed time > to authentication " +
            "time + max_age parameter")]
        public virtual void User_AgentIsRedirectedToTheLoginPageWhenElapsedTimeToAuthenticationTimeMax_AgeParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User-agent is redirected to the login page when elapsed time > to authentication " +
                    "time + max_age parameter", null, ((string[])(null)));
#line 1203
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table90.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table90.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table90.AddRow(new string[] {
                        "response_types",
                        "[token,id_token]"});
            table90.AddRow(new string[] {
                        "scope",
                        "email"});
#line 1204
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table90, "When ");
#line 1211
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1212
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1213
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1214
 testRunner.And("add \'-10\' seconds to authentication instant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table91.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table91.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table91.AddRow(new string[] {
                        "state",
                        "state"});
            table91.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table91.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table91.AddRow(new string[] {
                        "max_age",
                        "2"});
            table91.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
#line 1216
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table91, "And ");
#line 1226
 testRunner.Then("redirect url contains \'http://localhost/Authenticate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Identity token must contains an auth_time claim when mentionned as essential")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Identity token must contains an auth_time claim when mentionned as essential")]
        public virtual void IdentityTokenMustContainsAnAuth_TimeClaimWhenMentionnedAsEssential()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity token must contains an auth_time claim when mentionned as essential", null, ((string[])(null)));
#line 1228
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table92.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1229
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table92, "When ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table93.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table93.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table93.AddRow(new string[] {
                        "response_types",
                        "[token,id_token]"});
            table93.AddRow(new string[] {
                        "scope",
                        "email"});
#line 1233
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table93, "And ");
#line 1240
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1241
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1242
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table94.AddRow(new string[] {
                        "response_type",
                        "id_token"});
            table94.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table94.AddRow(new string[] {
                        "state",
                        "state"});
            table94.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table94.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table94.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table94.AddRow(new string[] {
                        "nonce",
                        "nonce"});
            table94.AddRow(new string[] {
                        "claims",
                        "{ id_token: { auth_time: { essential : true } } }"});
#line 1244
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table94, "And ");
#line 1255
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1256
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1258
 testRunner.Then("redirect url contains \'id_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1259
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1260
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1261
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1262
 testRunner.Then("token contains \'auth_time\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1263
 testRunner.Then("token claim \'iss\'=\'http://localhost\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1264
 testRunner.Then("token claim \'azp\'=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1265
 testRunner.Then("token claim \'nonce\'=\'nonce\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1266
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1267
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use implicit grant-type to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Use implicit grant-type to get an access token")]
        public virtual void UseImplicitGrant_TypeToGetAnAccessToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use implicit grant-type to get an access token", null, ((string[])(null)));
#line 1269
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table95.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1270
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table95, "When ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table96.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table96.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table96.AddRow(new string[] {
                        "response_types",
                        "[token]"});
            table96.AddRow(new string[] {
                        "scope",
                        "email"});
#line 1274
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table96, "And ");
#line 1281
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1282
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1283
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table97.AddRow(new string[] {
                        "response_type",
                        "token"});
            table97.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table97.AddRow(new string[] {
                        "state",
                        "state"});
            table97.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table97.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table97.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
#line 1285
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table97, "And ");
#line 1294
 testRunner.And("extract \'access_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1295
 testRunner.And("extract payload from JWS \'$access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1297
 testRunner.Then("redirect url contains \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1298
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1299
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1300
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1301
 testRunner.Then("token contains \'auth_time\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1302
 testRunner.Then("token contains \'scope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1303
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1304
 testRunner.Then("token claim \'iss\'=\'http://localhost\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use implicit grant-type to get an access and identity token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Use implicit grant-type to get an access and identity token")]
        public virtual void UseImplicitGrant_TypeToGetAnAccessAndIdentityToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use implicit grant-type to get an access and identity token", null, ((string[])(null)));
#line 1306
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table98.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1307
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table98, "When ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table99.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table99.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table99.AddRow(new string[] {
                        "response_types",
                        "[token,id_token]"});
            table99.AddRow(new string[] {
                        "scope",
                        "email"});
#line 1311
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table99, "And ");
#line 1318
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1319
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1320
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table100.AddRow(new string[] {
                        "response_type",
                        "token id_token"});
            table100.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table100.AddRow(new string[] {
                        "state",
                        "state"});
            table100.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table100.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table100.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table100.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 1322
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table100, "And ");
#line 1332
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1333
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1335
 testRunner.Then("redirect url contains \'id_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1336
 testRunner.Then("redirect url contains \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1337
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1338
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1339
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1340
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1341
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1342
 testRunner.Then("token contains \'at_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1343
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1344
 testRunner.Then("token claim \'nonce\'=\'nonce\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use hybrid grant-type to get an identity token and authorization code")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Use hybrid grant-type to get an identity token and authorization code")]
        public virtual void UseHybridGrant_TypeToGetAnIdentityTokenAndAuthorizationCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use hybrid grant-type to get an identity token and authorization code", null, ((string[])(null)));
#line 1346
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table101.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1347
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table101, "When ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table102.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table102.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table102.AddRow(new string[] {
                        "response_types",
                        "[code,id_token]"});
            table102.AddRow(new string[] {
                        "scope",
                        "email"});
#line 1351
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table102, "And ");
#line 1358
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1359
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1360
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table103.AddRow(new string[] {
                        "response_type",
                        "id_token code"});
            table103.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table103.AddRow(new string[] {
                        "state",
                        "state"});
            table103.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table103.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table103.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table103.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 1362
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table103, "And ");
#line 1372
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1373
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1375
 testRunner.Then("redirect url contains \'id_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1376
 testRunner.Then("redirect url contains \'code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1377
 testRunner.Then("token contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1378
 testRunner.Then("token contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1379
 testRunner.Then("token contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1380
 testRunner.Then("token contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1381
 testRunner.Then("token contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1382
 testRunner.Then("token contains \'c_hash\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1383
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1384
 testRunner.Then("token claim \'nonce\'=\'nonce\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check a refresh token is returned when the scope offline_access is used")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Check a refresh token is returned when the scope offline_access is used")]
        public virtual void CheckARefreshTokenIsReturnedWhenTheScopeOffline_AccessIsUsed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check a refresh token is returned when the scope offline_access is used", null, ((string[])(null)));
#line 1386
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table104.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table104.AddRow(new string[] {
                        "grant_types",
                        "[authorization_code]"});
            table104.AddRow(new string[] {
                        "response_types",
                        "[code]"});
            table104.AddRow(new string[] {
                        "scope",
                        "email offline_access"});
            table104.AddRow(new string[] {
                        "subject_type",
                        "public"});
#line 1387
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table104, "When ");
#line 1395
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1396
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1397
 testRunner.And("add user consent : user=\'administrator\', scope=\'email offline_access\', clientId=\'" +
                    "$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table105.AddRow(new string[] {
                        "response_type",
                        "code"});
            table105.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table105.AddRow(new string[] {
                        "state",
                        "state"});
            table105.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table105.AddRow(new string[] {
                        "scope",
                        "openid offline_access email"});
            table105.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table105.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
#line 1399
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table105, "And ");
#line 1409
 testRunner.Then("redirect url contains \'code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1410
 testRunner.Then("redirect url contains \'refresh_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Check amr and acr claims are present in the identity token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authorization")]
        [Xunit.TraitAttribute("Description", "Check amr and acr claims are present in the identity token")]
        public virtual void CheckAmrAndAcrClaimsArePresentInTheIdentityToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check amr and acr claims are present in the identity token", null, ((string[])(null)));
#line 1412
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table106.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 1413
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table106, "When ");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Amrs"});
            table107.AddRow(new string[] {
                        "1",
                        "Level1",
                        "pwd"});
#line 1417
 testRunner.And("add authentication class references", ((string)(null)), table107, "And ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table108.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table108.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table108.AddRow(new string[] {
                        "response_types",
                        "[code,id_token]"});
            table108.AddRow(new string[] {
                        "scope",
                        "email"});
            table108.AddRow(new string[] {
                        "subject_type",
                        "public"});
#line 1421
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table108, "And ");
#line 1429
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1430
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1431
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table109.AddRow(new string[] {
                        "response_type",
                        "code id_token"});
            table109.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table109.AddRow(new string[] {
                        "state",
                        "state"});
            table109.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table109.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table109.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table109.AddRow(new string[] {
                        "acr_values",
                        "1"});
#line 1433
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table109, "And ");
#line 1443
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1444
 testRunner.And("extract payload from JWS \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1446
 testRunner.Then("token contains \'amr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1447
 testRunner.Then("token claim \'sub\'=\'administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1448
 testRunner.Then("token claim \'email\'=\'habarthierry@hotmail.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1449
 testRunner.Then("token claim \'acr\'=\'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AuthorizationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AuthorizationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
