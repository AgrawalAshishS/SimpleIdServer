// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.OpenID.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TokenErrorsFeature : object, Xunit.IClassFixture<TokenErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TokenErrors.feature"
#line hidden
        
        public TokenErrorsFeature(TokenErrorsFeature.FixtureData fixtureData, SimpleIdServer_OpenID_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "TokenErrors", "\tCheck errors returned by token endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Authorization code cannot be used two times")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "Authorization code cannot be used two times")]
        public virtual void AuthorizationCodeCannotBeUsedTwoTimes()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization code cannot be used two times", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table302 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table302.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 5
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table302, "When ");
#line hidden
                TechTalk.SpecFlow.Table table303 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table303.AddRow(new string[] {
                            "ENC",
                            "2",
                            "RSA1_5"});
#line 9
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                        "json\'", ((string)(null)), table303, "And ");
#line hidden
                TechTalk.SpecFlow.Table table304 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table304.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table304.AddRow(new string[] {
                            "grant_types",
                            "[implicit,authorization_code]"});
                table304.AddRow(new string[] {
                            "response_types",
                            "[token,id_token,code]"});
                table304.AddRow(new string[] {
                            "scope",
                            "email role"});
                table304.AddRow(new string[] {
                            "subject_type",
                            "public"});
                table304.AddRow(new string[] {
                            "id_token_signed_response_alg",
                            "RS256"});
                table304.AddRow(new string[] {
                            "id_token_encrypted_response_alg",
                            "RSA1_5"});
                table304.AddRow(new string[] {
                            "id_token_encrypted_response_enc",
                            "A256CBC-HS512"});
                table304.AddRow(new string[] {
                            "jwks",
                            "$jwks_json$"});
                table304.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "client_secret_post"});
#line 13
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table304, "When ");
#line hidden
#line 26
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                        "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table305 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table305.AddRow(new string[] {
                            "response_type",
                            "id_token token code"});
                table305.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table305.AddRow(new string[] {
                            "state",
                            "state"});
                table305.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table305.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table305.AddRow(new string[] {
                            "redirect_uri",
                            "https://web.com"});
                table305.AddRow(new string[] {
                            "ui_locales",
                            "en fr"});
                table305.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 31
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table305, "And ");
#line hidden
#line 42
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("extract \'code\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table306 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table306.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table306.AddRow(new string[] {
                            "client_secret",
                            "$client_secret$"});
                table306.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table306.AddRow(new string[] {
                            "code",
                            "$code$"});
                table306.AddRow(new string[] {
                            "redirect_uri",
                            "https://web.com"});
#line 45
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table306, "And ");
#line hidden
                TechTalk.SpecFlow.Table table307 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table307.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table307.AddRow(new string[] {
                            "client_secret",
                            "$client_secret$"});
                table307.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table307.AddRow(new string[] {
                            "code",
                            "$code$"});
                table307.AddRow(new string[] {
                            "redirect_uri",
                            "https://web.com"});
#line 53
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table307, "And ");
#line hidden
#line 61
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
 testRunner.Then("JSON \'error\'=\'invalid_grant\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
 testRunner.Then("JSON \'error_description\'=\'authorization code has already been used, all tokens pr" +
                        "eviously issued have been revoked\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Only ping or push mode can be used to get tokens")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "Only ping or push mode can be used to get tokens")]
        public virtual void OnlyPingOrPushModeCanBeUsedToGetTokens()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Only ping or push mode can be used to get tokens", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table308 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table308.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "tls_client_auth"});
                table308.AddRow(new string[] {
                            "response_types",
                            "[token]"});
                table308.AddRow(new string[] {
                            "grant_types",
                            "[urn:openid:params:grant-type:ciba]"});
                table308.AddRow(new string[] {
                            "scope",
                            "openid profile"});
                table308.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost:8080]"});
                table308.AddRow(new string[] {
                            "tls_client_auth_san_dns",
                            "firstMtlsClient"});
                table308.AddRow(new string[] {
                            "backchannel_token_delivery_mode",
                            "push"});
                table308.AddRow(new string[] {
                            "backchannel_client_notification_endpoint",
                            "https://localhost:8080/pushNotificationEdp"});
#line 68
 testRunner.When("execute HTTP POST JSON request \'https://localhost:8080/register\'", ((string)(null)), table308, "When ");
#line hidden
#line 79
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table309 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table309.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table309.AddRow(new string[] {
                            "scope",
                            "openid profile"});
                table309.AddRow(new string[] {
                            "grant_type",
                            "urn:openid:params:grant-type:ciba"});
                table309.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
#line 82
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/token\'", ((string)(null)), table309, "And ");
#line hidden
#line 89
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
 testRunner.Then("JSON \'error_description\'=\'only ping or push mode can be used to get tokens\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="auth_req_id parameter is mandatory")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "auth_req_id parameter is mandatory")]
        public virtual void Auth_Req_IdParameterIsMandatory()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("auth_req_id parameter is mandatory", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table310 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table310.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "tls_client_auth"});
                table310.AddRow(new string[] {
                            "response_types",
                            "[token]"});
                table310.AddRow(new string[] {
                            "grant_types",
                            "[urn:openid:params:grant-type:ciba]"});
                table310.AddRow(new string[] {
                            "scope",
                            "openid profile"});
                table310.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost:8080]"});
                table310.AddRow(new string[] {
                            "tls_client_auth_san_dns",
                            "firstMtlsClient"});
                table310.AddRow(new string[] {
                            "backchannel_token_delivery_mode",
                            "ping"});
                table310.AddRow(new string[] {
                            "backchannel_client_notification_endpoint",
                            "https://localhost:8080/pushNotificationEdp"});
#line 96
 testRunner.When("execute HTTP POST JSON request \'https://localhost:8080/register\'", ((string)(null)), table310, "When ");
#line hidden
#line 107
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table311 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table311.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table311.AddRow(new string[] {
                            "scope",
                            "openid profile"});
                table311.AddRow(new string[] {
                            "grant_type",
                            "urn:openid:params:grant-type:ciba"});
                table311.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
#line 110
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/token\'", ((string)(null)), table311, "And ");
#line hidden
#line 117
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 121
 testRunner.Then("JSON \'error_description\'=\'missing parameter auth_req_id\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when auth_req_id is invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when auth_req_id is invalid")]
        public virtual void ErrorIsReturnedWhenAuth_Req_IdIsInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when auth_req_id is invalid", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table312 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table312.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "tls_client_auth"});
                table312.AddRow(new string[] {
                            "response_types",
                            "[token]"});
                table312.AddRow(new string[] {
                            "grant_types",
                            "[urn:openid:params:grant-type:ciba]"});
                table312.AddRow(new string[] {
                            "scope",
                            "openid profile"});
                table312.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost:8080]"});
                table312.AddRow(new string[] {
                            "tls_client_auth_san_dns",
                            "firstMtlsClient"});
                table312.AddRow(new string[] {
                            "backchannel_token_delivery_mode",
                            "ping"});
                table312.AddRow(new string[] {
                            "backchannel_client_notification_endpoint",
                            "https://localhost:8080/pushNotificationEdp"});
#line 124
 testRunner.When("execute HTTP POST JSON request \'https://localhost:8080/register\'", ((string)(null)), table312, "When ");
#line hidden
#line 135
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table313 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table313.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table313.AddRow(new string[] {
                            "scope",
                            "openid profile"});
                table313.AddRow(new string[] {
                            "grant_type",
                            "urn:openid:params:grant-type:ciba"});
                table313.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table313.AddRow(new string[] {
                            "auth_req_id",
                            "authreqid"});
#line 138
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/token\'", ((string)(null)), table313, "And ");
#line hidden
#line 146
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 149
 testRunner.Then("JSON \'error\'=\'invalid_grant\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 150
 testRunner.Then("JSON \'error_description\'=\'auth_req_id doesn\'t exist\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="auth_req_id must be confirmed")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "auth_req_id must be confirmed")]
        public virtual void Auth_Req_IdMustBeConfirmed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("auth_req_id must be confirmed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 152
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table314 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table314.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "tls_client_auth"});
                table314.AddRow(new string[] {
                            "response_types",
                            "[token]"});
                table314.AddRow(new string[] {
                            "grant_types",
                            "[urn:openid:params:grant-type:ciba]"});
                table314.AddRow(new string[] {
                            "scope",
                            "openid profile"});
                table314.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost:8080]"});
                table314.AddRow(new string[] {
                            "tls_client_auth_san_dns",
                            "firstMtlsClient"});
                table314.AddRow(new string[] {
                            "backchannel_token_delivery_mode",
                            "ping"});
                table314.AddRow(new string[] {
                            "backchannel_client_notification_endpoint",
                            "https://localhost:8080/pushNotificationEdp"});
                table314.AddRow(new string[] {
                            "backchannel_authentication_request_signing_alg",
                            "PS256"});
                table314.AddRow(new string[] {
                            "jwks",
                            "{\"keys\":[{ \"kty\": \"RSA\",  \"use\": \"sig\", \"alg\": \"PS256\",  \"kid\": \"1\", \"key_ops\": [" +
                                " \"sign\", \"verify\"  ], \"n\": \"ykDUVZX8lDX-O97R6CCqogzTuaLPR71v_0ul2FurEFQaMJYzGZg-" +
                                "tjSp9smrQUNuaNvxvb4cC0iJwHno-2cg2bFO5Ks-8NyP7fM0QQSPJUyq1-qa-wsOJ3NcGrphSHGN3fJE" +
                                "eJRIV1R1Yyl2XZBYCdbR1pFqBQ4yw0kiaOjAGr_bQloNjeo3Z-ak8oYfaVJvlCyQZpKoBlsBud8aFmr2" +
                                "KIuf_q9vJjiDObnoCaWf4ZYtCbeSP-qwshtTuC6YuzQL8IsiqTeUAm0VjV0yZkRStl-mQnHXI2o6du-3" +
                                "PYFqWXOwMn9USilJ1lYjqqL3jg-mXtQzckOpiXZfy2D8HTwFgQ\", \"e\": \"AQAB\", \"d\": \"mBnlFXA0" +
                                "gSmRxmitp0pZyICpAWRFSghXH8E-OdXGcgMtpvht-YObNd-pKmVDm1Mgx08RH8bGxF2K6utDoT1PYSeM" +
                                "0z9NmEnnG-XYmETbeguMN9DBOKZ5wIVq8NbVrmtna1B02dF6DeMAXNCjqX2SF-Qr7pdxCdhBqMdpT0gq" +
                                "oHHtjARGQT2JjjfQSWuQiU6EOZOqJFPYbER1b_mwbacHKwb3D8bX4JPcTvCMP5SNqUDIkjerWCq9j1Df" +
                                "nvRpnlcNrTnhlqG-S8mXr1Mt0bn40Kc9Y0-7d7Q3hvj3ObNW4jdEyf7Efb0d0ZjyFgZuAfPa4tkwIym9" +
                                "cBaz71Asz1-9mQ\", \"p\": \"1imC2zKZXeXONfKNoBJmq-JWyGziMlLvKWGnFdqIqqH9WNkxM8bAYPe2G" +
                                "8hd5SYOGg2CEWm4BN7cj4tKlegzOHmaVybo-a5odHB5UCo3ZsWtM0tnU6bkdYboLR4nu4j_Fhsu2cHe4" +
                                "6IaG2BGMnZw4qgKyjoPd81QbOCBfGZR_ac\", \"q\": \"8cO9fplrHh01BQrxCe-yZwUOg2w14j-DkC9Vt" +
                                "vgFDNeQOv-mGqxldhvCsBzAJ7Jog-lk-vPbMT4OT2lHJ4hhWBSt9mZbAHAL4hZR-95JTmh5crEpyfQYE" +
                                "oWhI_29uDfRl9nb9d7ef28B_o0yxQcnxaSAvUpk_t_ffrlHTHCiWJc\", \"dp\": \"XM_sp_ZLxQe80GBn" +
                                "xEF1QXR7y6x0cv7CKxrpAG2O4PQHCaRG0HuID_4KbAvvtUlCv0OvZMB-QY4b5BGnp0PUPttkafSw7tQI" +
                                "7L15taY2EFIG973r77LaO5zVrgftjDaY5gmtyi1c3SX5TnfwtBnkXjYZRv7WiULvYeAB_dmSGu0\", \"d" +
                                "q\": \"RKubjHUZVvFm2OrVskPSQa7PA4dd-sidnvvC9fiWvqIQBqIM1TC4lQankwxnjB8Bzs4hb6KKVP9" +
                                "SYz39Bv6W38Tn8L_8AzDQP0SlvsvRuKK2NFycCQ_7Mm-gaK-vDr9UGjS4ZKsMOdgXEe2bSRmSM3JZWur" +
                                "hqv995OnNlam8gzs\", \"qi\": \"lR7p9_WQgDdVW5Sq0r4CzqENOScLddmCDb2o9RXUGh0TU-mJ92wuEE" +
                                "92llrm4JlsaXNFryW7yhKunmPy0onMNjSnYIvwVcmYVV3MrnJbSZmMTRoAmTnTtAoSSf0eGgCepnphI3" +
                                "lZnfIZAONUXBmdT0zcT3WO6nveLDsCP_MTWLg\" }]}"});
#line 153
 testRunner.When("execute HTTP POST JSON request \'https://localhost:8080/register\'", ((string)(null)), table314, "When ");
#line hidden
#line 166
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
 testRunner.And("add \'2\' seconds and store the result into \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
 testRunner.And("add \'-2\' seconds and store the result into \'nbf\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table315 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table315.AddRow(new string[] {
                            "aud",
                            "[https://localhost:8080]"});
                table315.AddRow(new string[] {
                            "iss",
                            "$client_id$"});
                table315.AddRow(new string[] {
                            "exp",
                            "$exp$"});
                table315.AddRow(new string[] {
                            "iat",
                            "1587492240"});
                table315.AddRow(new string[] {
                            "nbf",
                            "$nbf$"});
                table315.AddRow(new string[] {
                            "jti",
                            "jti"});
                table315.AddRow(new string[] {
                            "login_hint",
                            "administrator"});
                table315.AddRow(new string[] {
                            "scope",
                            "openid profile"});
                table315.AddRow(new string[] {
                            "client_notification_token",
                            "7dc3061e-bad9-4817-bd33-8db789bfb516"});
#line 171
 testRunner.And("client \'$client_id$\' build JWS token using the algorithm \'PS256\'", ((string)(null)), table315, "And ");
#line hidden
                TechTalk.SpecFlow.Table table316 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table316.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table316.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table316.AddRow(new string[] {
                            "request",
                            "$requestParameter$"});
#line 183
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table316, "And ");
#line hidden
#line 189
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 190
 testRunner.And("extract parameter \'auth_req_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table317 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table317.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table317.AddRow(new string[] {
                            "scope",
                            "openid profile"});
                table317.AddRow(new string[] {
                            "grant_type",
                            "urn:openid:params:grant-type:ciba"});
                table317.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table317.AddRow(new string[] {
                            "auth_req_id",
                            "$auth_req_id$"});
#line 192
 testRunner.And("poll HTTP POST request \'https://localhost:8080/mtls/token\', until \'error\'=\'author" +
                        "ization_pending\'", ((string)(null)), table317, "And ");
#line hidden
#line 200
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 202
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 203
 testRunner.Then("JSON \'error\'=\'authorization_pending\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 204
 testRunner.Then("JSON \'error_description\'=\'the authentication request \'$auth_req_id$\' has not been" +
                        " confirmed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TokenErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TokenErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
