// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.OpenID.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TokenErrorsFeature : object, Xunit.IClassFixture<TokenErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TokenErrors.feature"
#line hidden
        
        public TokenErrorsFeature(TokenErrorsFeature.FixtureData fixtureData, SimpleIdServer_OpenID_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "TokenErrors", "\tCheck errors returned by token endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Authorization code cannot be used two times")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "Authorization code cannot be used two times")]
        public virtual void AuthorizationCodeCannotBeUsedTwoTimes()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization code cannot be used two times", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table226.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 5
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table226, "When ");
#line hidden
                TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table227.AddRow(new string[] {
                            "ENC",
                            "2",
                            "RSA1_5"});
#line 9
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                        "json\'", ((string)(null)), table227, "And ");
#line hidden
                TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table228.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table228.AddRow(new string[] {
                            "grant_types",
                            "[implicit,authorization_code]"});
                table228.AddRow(new string[] {
                            "response_types",
                            "[token,id_token,code]"});
                table228.AddRow(new string[] {
                            "scope",
                            "email role"});
                table228.AddRow(new string[] {
                            "subject_type",
                            "public"});
                table228.AddRow(new string[] {
                            "id_token_signed_response_alg",
                            "RS256"});
                table228.AddRow(new string[] {
                            "id_token_encrypted_response_alg",
                            "RSA1_5"});
                table228.AddRow(new string[] {
                            "id_token_encrypted_response_enc",
                            "A256CBC-HS512"});
                table228.AddRow(new string[] {
                            "jwks",
                            "$jwks_json$"});
                table228.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "client_secret_post"});
#line 13
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table228, "When ");
#line hidden
#line 26
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                        "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table229.AddRow(new string[] {
                            "response_type",
                            "id_token token code"});
                table229.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table229.AddRow(new string[] {
                            "state",
                            "state"});
                table229.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table229.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table229.AddRow(new string[] {
                            "redirect_uri",
                            "https://web.com"});
                table229.AddRow(new string[] {
                            "ui_locales",
                            "en fr"});
                table229.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 31
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table229, "And ");
#line hidden
#line 42
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("extract \'code\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table230.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table230.AddRow(new string[] {
                            "client_secret",
                            "$client_secret$"});
                table230.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table230.AddRow(new string[] {
                            "code",
                            "$code$"});
                table230.AddRow(new string[] {
                            "redirect_uri",
                            "https://web.com"});
#line 45
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table230, "And ");
#line hidden
                TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table231.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table231.AddRow(new string[] {
                            "client_secret",
                            "$client_secret$"});
                table231.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table231.AddRow(new string[] {
                            "code",
                            "$code$"});
                table231.AddRow(new string[] {
                            "redirect_uri",
                            "https://web.com"});
#line 53
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table231, "And ");
#line hidden
#line 61
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
 testRunner.Then("JSON \'error\'=\'invalid_grant\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
 testRunner.Then("JSON \'error_description\'=\'authorization code has already been used, all tokens pr" +
                        "eviously issued have been revoked\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TokenErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TokenErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
