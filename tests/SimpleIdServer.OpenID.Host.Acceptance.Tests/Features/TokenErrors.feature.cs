// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.OpenID.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TokenErrorsFeature : Xunit.IClassFixture<TokenErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TokenErrors.feature"
#line hidden
        
        public TokenErrorsFeature(TokenErrorsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TokenErrors", "\tCheck errors returned by token endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Authorization code cannot be used two times")]
        [Xunit.TraitAttribute("FeatureTitle", "TokenErrors")]
        [Xunit.TraitAttribute("Description", "Authorization code cannot be used two times")]
        public virtual void AuthorizationCodeCannotBeUsedTwoTimes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization code cannot be used two times", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table192.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 5
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table192, "When ");
#line hidden
            TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table193.AddRow(new string[] {
                        "ENC",
                        "2",
                        "RSA1_5"});
#line 9
 testRunner.And("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table193, "And ");
#line hidden
            TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table194.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table194.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
            table194.AddRow(new string[] {
                        "response_types",
                        "[token,id_token,code]"});
            table194.AddRow(new string[] {
                        "scope",
                        "email role"});
            table194.AddRow(new string[] {
                        "subject_type",
                        "public"});
            table194.AddRow(new string[] {
                        "id_token_signed_response_alg",
                        "RS256"});
            table194.AddRow(new string[] {
                        "id_token_encrypted_response_alg",
                        "RSA1_5"});
            table194.AddRow(new string[] {
                        "id_token_encrypted_response_enc",
                        "A256CBC-HS512"});
            table194.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
            table194.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "client_secret_post"});
#line 13
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table194, "When ");
#line 26
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And("extract parameter \'client_secret\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.And("add user consent : user=\'administrator\', scope=\'email role\', clientId=\'$client_id" +
                    "$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table195.AddRow(new string[] {
                        "response_type",
                        "id_token token code"});
            table195.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table195.AddRow(new string[] {
                        "state",
                        "state"});
            table195.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table195.AddRow(new string[] {
                        "scope",
                        "openid email role"});
            table195.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table195.AddRow(new string[] {
                        "ui_locales",
                        "en fr"});
            table195.AddRow(new string[] {
                        "nonce",
                        "nonce"});
#line 31
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table195, "And ");
#line 42
 testRunner.And("extract \'id_token\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("extract \'code\' from callback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table196.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table196.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table196.AddRow(new string[] {
                        "grant_type",
                        "authorization_code"});
            table196.AddRow(new string[] {
                        "code",
                        "$code$"});
            table196.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
#line 45
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table196, "And ");
#line hidden
            TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table197.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table197.AddRow(new string[] {
                        "client_secret",
                        "$client_secret$"});
            table197.AddRow(new string[] {
                        "grant_type",
                        "authorization_code"});
            table197.AddRow(new string[] {
                        "code",
                        "$code$"});
            table197.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
#line 53
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table197, "And ");
#line 61
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
 testRunner.Then("JSON \'error\'=\'invalid_grant\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 65
 testRunner.Then("JSON \'error_description\'=\'authorization code has already been used, all tokens pr" +
                    "eviously issued have been revoked\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TokenErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TokenErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
