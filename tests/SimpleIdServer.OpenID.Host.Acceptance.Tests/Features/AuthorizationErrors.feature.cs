// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.OpenID.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AuthorizationErrorsFeature : object, Xunit.IClassFixture<AuthorizationErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AuthorizationErrors.feature"
#line hidden
        
        public AuthorizationErrorsFeature(AuthorizationErrorsFeature.FixtureData fixtureData, SimpleIdServer_OpenID_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "AuthorizationErrors", "\tCheck the errors returned by the authorization endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check state is returned in the callback url")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Check state is returned in the callback url")]
        public virtual void CheckStateIsReturnedInTheCallbackUrl()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check state is returned in the callback url", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table110.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table110.AddRow(new string[] {
                            "scope",
                            "email"});
#line 5
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table110, "When ");
#line hidden
#line 10
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table111.AddRow(new string[] {
                            "response_type",
                            "code"});
                table111.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table111.AddRow(new string[] {
                            "scope",
                            "openid"});
                table111.AddRow(new string[] {
                            "state",
                            "state"});
                table111.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost"});
#line 13
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table111, "And ");
#line hidden
#line 21
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.Then("JSON \'error_description\'=\'redirect uri http://localhost is not correct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.Then("JSON \'state\'=\'state\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when scope is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when scope is missing")]
        public virtual void ErrorIsReturnedWhenScopeIsMissing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when scope is missing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table112.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table112.AddRow(new string[] {
                            "scope",
                            "email"});
#line 28
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table112, "When ");
#line hidden
#line 33
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table113.AddRow(new string[] {
                            "response_type",
                            "code"});
                table113.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table113.AddRow(new string[] {
                            "state",
                            "state"});
                table113.AddRow(new string[] {
                            "response_mode",
                            "query"});
#line 36
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table113, "And ");
#line hidden
#line 43
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
 testRunner.Then("JSON \'error_description\'=\'missing parameter scope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when openid scope is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when openid scope is missing")]
        public virtual void ErrorIsReturnedWhenOpenidScopeIsMissing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when openid scope is missing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table114.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table114.AddRow(new string[] {
                            "scope",
                            "email"});
#line 50
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table114, "When ");
#line hidden
#line 55
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table115.AddRow(new string[] {
                            "response_type",
                            "code"});
                table115.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table115.AddRow(new string[] {
                            "state",
                            "state"});
                table115.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table115.AddRow(new string[] {
                            "scope",
                            "scope1"});
#line 58
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table115, "And ");
#line hidden
#line 66
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
 testRunner.Then("JSON \'error_description\'=\'openid scope is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when the scope is not supported by the client")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when the scope is not supported by the client")]
        public virtual void ErrorIsReturnedWhenTheScopeIsNotSupportedByTheClient()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when the scope is not supported by the client", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table116.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table116.AddRow(new string[] {
                            "scope",
                            "email"});
#line 73
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table116, "When ");
#line hidden
#line 78
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table117.AddRow(new string[] {
                            "response_type",
                            "code"});
                table117.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table117.AddRow(new string[] {
                            "state",
                            "state"});
                table117.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table117.AddRow(new string[] {
                            "scope",
                            "openid role"});
#line 81
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table117, "And ");
#line hidden
#line 89
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
 testRunner.Then("JSON \'error_description\'=\'scopes role are not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when nonce is not passed")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when nonce is not passed")]
        public virtual void ErrorIsReturnedWhenNonceIsNotPassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when nonce is not passed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table118.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table118.AddRow(new string[] {
                            "scope",
                            "email"});
                table118.AddRow(new string[] {
                            "response_types",
                            "[token,id_token,code]"});
                table118.AddRow(new string[] {
                            "grant_types",
                            "[implicit,authorization_code]"});
#line 96
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table118, "When ");
#line hidden
#line 103
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table119.AddRow(new string[] {
                            "response_type",
                            "code id_token"});
                table119.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table119.AddRow(new string[] {
                            "state",
                            "state"});
                table119.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table119.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table119.AddRow(new string[] {
                            "redirect_uri",
                            "https://web.com"});
#line 106
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table119, "And ");
#line hidden
#line 115
 testRunner.And("extract query parameters into JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
 testRunner.Then("JSON \'error_description\'=\'missing parameter nonce\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when redirect_uri is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when redirect_uri is missing")]
        public virtual void ErrorIsReturnedWhenRedirect_UriIsMissing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when redirect_uri is missing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 121
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table120.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table120.AddRow(new string[] {
                            "scope",
                            "email"});
#line 122
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table120, "When ");
#line hidden
#line 127
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table121.AddRow(new string[] {
                            "response_type",
                            "code"});
                table121.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table121.AddRow(new string[] {
                            "state",
                            "state"});
                table121.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table121.AddRow(new string[] {
                            "scope",
                            "openid"});
                table121.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 130
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table121, "And ");
#line hidden
#line 139
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 143
 testRunner.Then("JSON \'error_description\'=\'missing parameter redirect_uri\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when user is not authenticated and prompt=none")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when user is not authenticated and prompt=none")]
        public virtual void ErrorIsReturnedWhenUserIsNotAuthenticatedAndPromptNone()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when user is not authenticated and prompt=none", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 145
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table122.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table122.AddRow(new string[] {
                            "scope",
                            "email"});
#line 146
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table122, "When ");
#line hidden
#line 151
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
 testRunner.And("anonymous authentication", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table123.AddRow(new string[] {
                            "response_type",
                            "code"});
                table123.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table123.AddRow(new string[] {
                            "state",
                            "state"});
                table123.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table123.AddRow(new string[] {
                            "scope",
                            "openid"});
                table123.AddRow(new string[] {
                            "redirect_uri",
                            "https://web.com"});
                table123.AddRow(new string[] {
                            "prompt",
                            "none"});
                table123.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 155
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table123, "And ");
#line hidden
#line 166
 testRunner.And("extract query parameters into JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
 testRunner.Then("JSON \'error\'=\'login_required\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 169
 testRunner.Then("JSON \'error_description\'=\'login is required\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when subject in the id_token_hint is not correct")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when subject in the id_token_hint is not correct")]
        public virtual void ErrorIsReturnedWhenSubjectInTheId_Token_HintIsNotCorrect()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when subject in the id_token_hint is not correct", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 171
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table124.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 172
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table124, "When ");
#line hidden
                TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table125.AddRow(new string[] {
                            "sub",
                            "otheruser"});
#line 176
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'id_token_hint\'", ((string)(null)), table125, "And ");
#line hidden
                TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table126.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table126.AddRow(new string[] {
                            "scope",
                            "email"});
#line 180
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table126, "And ");
#line hidden
#line 185
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table127.AddRow(new string[] {
                            "response_type",
                            "code"});
                table127.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table127.AddRow(new string[] {
                            "state",
                            "state"});
                table127.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table127.AddRow(new string[] {
                            "scope",
                            "openid"});
                table127.AddRow(new string[] {
                            "redirect_uri",
                            "https://web.com"});
                table127.AddRow(new string[] {
                            "prompt",
                            "none"});
                table127.AddRow(new string[] {
                            "id_token_hint",
                            "$id_token_hint$"});
                table127.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 188
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table127, "And ");
#line hidden
#line 200
 testRunner.And("extract query parameters into JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 202
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 203
 testRunner.Then("JSON \'error_description\'=\'subject contained in id_token_hint is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when audience in the id_token_hint is not correct")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when audience in the id_token_hint is not correct")]
        public virtual void ErrorIsReturnedWhenAudienceInTheId_Token_HintIsNotCorrect()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when audience in the id_token_hint is not correct", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 205
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table128.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 206
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table128, "When ");
#line hidden
                TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table129.AddRow(new string[] {
                            "sub",
                            "administrator"});
                table129.AddRow(new string[] {
                            "aud",
                            "aud1 aud2"});
#line 210
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'id_token_hint\'", ((string)(null)), table129, "And ");
#line hidden
                TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table130.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table130.AddRow(new string[] {
                            "scope",
                            "email"});
#line 215
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table130, "And ");
#line hidden
#line 220
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 221
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table131.AddRow(new string[] {
                            "response_type",
                            "code"});
                table131.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table131.AddRow(new string[] {
                            "state",
                            "state"});
                table131.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table131.AddRow(new string[] {
                            "scope",
                            "openid"});
                table131.AddRow(new string[] {
                            "redirect_uri",
                            "https://web.com"});
                table131.AddRow(new string[] {
                            "prompt",
                            "none"});
                table131.AddRow(new string[] {
                            "id_token_hint",
                            "$id_token_hint$"});
                table131.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 223
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table131, "And ");
#line hidden
#line 235
 testRunner.And("extract query parameters into JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 237
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 238
 testRunner.Then("JSON \'error_description\'=\'audience contained in id_token_hint is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when the value specified in claims parameter is invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when the value specified in claims parameter is invalid")]
        public virtual void ErrorIsReturnedWhenTheValueSpecifiedInClaimsParameterIsInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when the value specified in claims parameter is invalid", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 240
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table132.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table132.AddRow(new string[] {
                            "scope",
                            "email"});
#line 241
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table132, "When ");
#line hidden
#line 246
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 247
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 248
 testRunner.And("add user consent with claim : user=\'administrator\', scope=\'email\', clientId=\'$cli" +
                        "ent_id$\', claim=\'sub=administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table133.AddRow(new string[] {
                            "response_type",
                            "code"});
                table133.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table133.AddRow(new string[] {
                            "state",
                            "state"});
                table133.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table133.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table133.AddRow(new string[] {
                            "redirect_uri",
                            "https://web.com"});
                table133.AddRow(new string[] {
                            "claims",
                            "{ id_token: { sub: { essential : true, value: \"invalid\" } } }"});
                table133.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 250
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table133, "And ");
#line hidden
#line 261
 testRunner.And("extract query parameters into JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 263
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 264
 testRunner.Then("JSON \'error_description\'=\'claims sub are invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when request parameter is not a valid JWT token")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter is not a valid JWT token")]
        public virtual void ErrorIsReturnedWhenRequestParameterIsNotAValidJWTToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter is not a valid JWT token", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 266
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table134.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table134.AddRow(new string[] {
                            "scope",
                            "email"});
#line 267
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table134, "When ");
#line hidden
#line 272
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 273
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table135.AddRow(new string[] {
                            "response_type",
                            "code"});
                table135.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table135.AddRow(new string[] {
                            "scope",
                            "openid"});
                table135.AddRow(new string[] {
                            "request",
                            "invalid"});
                table135.AddRow(new string[] {
                            "state",
                            "state"});
                table135.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 275
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table135, "And ");
#line hidden
#line 284
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 286
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 287
 testRunner.Then("JSON \'error_description\'=\'request parameter is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when request parameter is not a valid JWS token")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter is not a valid JWS token")]
        public virtual void ErrorIsReturnedWhenRequestParameterIsNotAValidJWSToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter is not a valid JWS token", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 289
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table136.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table136.AddRow(new string[] {
                            "scope",
                            "email"});
#line 290
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table136, "When ");
#line hidden
#line 295
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 296
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table137.AddRow(new string[] {
                            "response_type",
                            "code"});
                table137.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table137.AddRow(new string[] {
                            "scope",
                            "openid"});
                table137.AddRow(new string[] {
                            "request",
                            "a.b.c"});
                table137.AddRow(new string[] {
                            "state",
                            "state"});
                table137.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 298
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table137, "And ");
#line hidden
#line 307
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 309
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 310
 testRunner.Then("JSON \'error_description\'=\'request parameter is not a valid JWS token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when request parameter is a JWS token with an invalid algorithm" +
            " name")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter is a JWS token with an invalid algorithm" +
            " name")]
        public virtual void ErrorIsReturnedWhenRequestParameterIsAJWSTokenWithAnInvalidAlgorithmName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter is a JWS token with an invalid algorithm" +
                    " name", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 312
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table138.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS384"});
#line 313
 testRunner.When("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                        "json\'", ((string)(null)), table138, "When ");
#line hidden
                TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table139.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table139.AddRow(new string[] {
                            "scope",
                            "email"});
                table139.AddRow(new string[] {
                            "request_object_signing_alg",
                            "RS256"});
#line 317
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table139, "And ");
#line hidden
#line 323
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 324
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table140.AddRow(new string[] {
                            "key",
                            "val"});
#line 326
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'request\'", ((string)(null)), table140, "And ");
#line hidden
                TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table141.AddRow(new string[] {
                            "response_type",
                            "code"});
                table141.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table141.AddRow(new string[] {
                            "scope",
                            "openid"});
                table141.AddRow(new string[] {
                            "request",
                            "$request$"});
                table141.AddRow(new string[] {
                            "state",
                            "state"});
                table141.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 330
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table141, "And ");
#line hidden
#line 339
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 341
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 342
 testRunner.Then("JSON \'error_description\'=\'the signature algorithm is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when request parameter doesn\'t contain response_type")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter doesn\'t contain response_type")]
        public virtual void ErrorIsReturnedWhenRequestParameterDoesntContainResponse_Type()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter doesn\'t contain response_type", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 344
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table142.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 345
 testRunner.When("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                        "json\'", ((string)(null)), table142, "When ");
#line hidden
                TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table143.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table143.AddRow(new string[] {
                            "scope",
                            "email"});
                table143.AddRow(new string[] {
                            "request_object_signing_alg",
                            "RS256"});
                table143.AddRow(new string[] {
                            "jwks",
                            "$jwks_json$"});
#line 349
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table143, "And ");
#line hidden
#line 356
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 357
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table144.AddRow(new string[] {
                            "iss",
                            "$client_id$"});
                table144.AddRow(new string[] {
                            "aud",
                            "aud1"});
#line 359
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'request\'", ((string)(null)), table144, "And ");
#line hidden
                TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table145.AddRow(new string[] {
                            "response_type",
                            "code"});
                table145.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table145.AddRow(new string[] {
                            "scope",
                            "openid"});
                table145.AddRow(new string[] {
                            "request",
                            "$request$"});
                table145.AddRow(new string[] {
                            "state",
                            "state"});
                table145.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 364
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table145, "And ");
#line hidden
#line 373
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 375
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 376
 testRunner.Then("JSON \'error_description\'=\'the response type claim is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when request parameter doesn\'t contain client_id")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter doesn\'t contain client_id")]
        public virtual void ErrorIsReturnedWhenRequestParameterDoesntContainClient_Id()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter doesn\'t contain client_id", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 378
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table146.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 379
 testRunner.When("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                        "json\'", ((string)(null)), table146, "When ");
#line hidden
                TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table147.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table147.AddRow(new string[] {
                            "scope",
                            "email"});
                table147.AddRow(new string[] {
                            "request_object_signing_alg",
                            "RS256"});
                table147.AddRow(new string[] {
                            "jwks",
                            "$jwks_json$"});
#line 383
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table147, "And ");
#line hidden
#line 390
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 391
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table148.AddRow(new string[] {
                            "iss",
                            "$client_id$"});
                table148.AddRow(new string[] {
                            "aud",
                            "aud1"});
                table148.AddRow(new string[] {
                            "response_type",
                            "code"});
#line 393
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'request\'", ((string)(null)), table148, "And ");
#line hidden
                TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table149.AddRow(new string[] {
                            "response_type",
                            "code"});
                table149.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table149.AddRow(new string[] {
                            "scope",
                            "openid"});
                table149.AddRow(new string[] {
                            "request",
                            "$request$"});
                table149.AddRow(new string[] {
                            "state",
                            "state"});
                table149.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 399
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table149, "And ");
#line hidden
#line 408
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 410
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 411
 testRunner.Then("JSON \'error_description\'=\'the client identifier claim is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when request parameter contains an invalid response_type")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter contains an invalid response_type")]
        public virtual void ErrorIsReturnedWhenRequestParameterContainsAnInvalidResponse_Type()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter contains an invalid response_type", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 413
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table150.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 414
 testRunner.When("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                        "json\'", ((string)(null)), table150, "When ");
#line hidden
                TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table151.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table151.AddRow(new string[] {
                            "scope",
                            "email"});
                table151.AddRow(new string[] {
                            "request_object_signing_alg",
                            "RS256"});
                table151.AddRow(new string[] {
                            "jwks",
                            "$jwks_json$"});
#line 418
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table151, "And ");
#line hidden
#line 425
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 426
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table152.AddRow(new string[] {
                            "iss",
                            "$client_id$"});
                table152.AddRow(new string[] {
                            "aud",
                            "aud1"});
                table152.AddRow(new string[] {
                            "response_type",
                            "token"});
                table152.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
#line 428
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'request\'", ((string)(null)), table152, "And ");
#line hidden
                TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table153.AddRow(new string[] {
                            "response_type",
                            "code"});
                table153.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table153.AddRow(new string[] {
                            "scope",
                            "openid"});
                table153.AddRow(new string[] {
                            "request",
                            "$request$"});
                table153.AddRow(new string[] {
                            "state",
                            "state"});
                table153.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 435
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table153, "And ");
#line hidden
#line 444
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 446
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 447
 testRunner.Then("JSON \'error_description\'=\'the response type claim is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when request parameter contains an invalid client identifier")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter contains an invalid client identifier")]
        public virtual void ErrorIsReturnedWhenRequestParameterContainsAnInvalidClientIdentifier()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter contains an invalid client identifier", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 449
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table154.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 450
 testRunner.When("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                        "json\'", ((string)(null)), table154, "When ");
#line hidden
                TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table155.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table155.AddRow(new string[] {
                            "scope",
                            "email"});
                table155.AddRow(new string[] {
                            "request_object_signing_alg",
                            "RS256"});
                table155.AddRow(new string[] {
                            "jwks",
                            "$jwks_json$"});
                table155.AddRow(new string[] {
                            "client_id",
                            "invalid"});
#line 454
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table155, "And ");
#line hidden
#line 462
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 463
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table156.AddRow(new string[] {
                            "iss",
                            "$client_id$"});
                table156.AddRow(new string[] {
                            "aud",
                            "aud1"});
                table156.AddRow(new string[] {
                            "response_type",
                            "code"});
                table156.AddRow(new string[] {
                            "client_id",
                            "invalid"});
#line 465
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'request\'", ((string)(null)), table156, "And ");
#line hidden
                TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table157.AddRow(new string[] {
                            "response_type",
                            "code"});
                table157.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table157.AddRow(new string[] {
                            "scope",
                            "openid"});
                table157.AddRow(new string[] {
                            "request",
                            "$request$"});
                table157.AddRow(new string[] {
                            "state",
                            "state"});
                table157.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 472
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table157, "And ");
#line hidden
#line 481
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 483
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 484
 testRunner.Then("JSON \'error_description\'=\'the client identifier claim is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when request uri is invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request uri is invalid")]
        public virtual void ErrorIsReturnedWhenRequestUriIsInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request uri is invalid", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 486
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table158.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table158.AddRow(new string[] {
                            "scope",
                            "email"});
#line 487
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table158, "When ");
#line hidden
#line 492
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 493
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table159.AddRow(new string[] {
                            "response_type",
                            "code"});
                table159.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table159.AddRow(new string[] {
                            "scope",
                            "openid"});
                table159.AddRow(new string[] {
                            "state",
                            "state"});
                table159.AddRow(new string[] {
                            "request_uri",
                            "uri"});
                table159.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 495
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table159, "And ");
#line hidden
#line 504
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 506
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 507
 testRunner.Then("JSON \'error_description\'=\'request uri parameter is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Redirect to the login page when prompt=login")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Redirect to the login page when prompt=login")]
        public virtual void RedirectToTheLoginPageWhenPromptLogin()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Redirect to the login page when prompt=login", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 509
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table160.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table160.AddRow(new string[] {
                            "scope",
                            "email"});
#line 510
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table160, "When ");
#line hidden
#line 515
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 516
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table161.AddRow(new string[] {
                            "response_type",
                            "code"});
                table161.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table161.AddRow(new string[] {
                            "state",
                            "state"});
                table161.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table161.AddRow(new string[] {
                            "scope",
                            "openid"});
                table161.AddRow(new string[] {
                            "redirect_uri",
                            "https://web.com"});
                table161.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table161.AddRow(new string[] {
                            "prompt",
                            "login"});
#line 518
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table161, "And ");
#line hidden
#line 529
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 531
 testRunner.Then("redirect url contains \'http://localhost/Authenticate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Redirect to the account page when prompt=select_account")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Redirect to the account page when prompt=select_account")]
        public virtual void RedirectToTheAccountPageWhenPromptSelect_Account()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Redirect to the account page when prompt=select_account", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 533
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table162.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table162.AddRow(new string[] {
                            "scope",
                            "email"});
#line 534
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table162, "When ");
#line hidden
#line 539
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 540
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table163.AddRow(new string[] {
                            "response_type",
                            "code"});
                table163.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table163.AddRow(new string[] {
                            "state",
                            "state"});
                table163.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table163.AddRow(new string[] {
                            "scope",
                            "email openid"});
                table163.AddRow(new string[] {
                            "redirect_uri",
                            "https://web.com"});
                table163.AddRow(new string[] {
                            "prompt",
                            "select_account"});
                table163.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 542
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table163, "And ");
#line hidden
#line 553
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 555
 testRunner.Then("redirect url contains \'http://localhost/Account\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Redirect to the consents page when no consent has been given for the specific cla" +
            "im")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Redirect to the consents page when no consent has been given for the specific cla" +
            "im")]
        public virtual void RedirectToTheConsentsPageWhenNoConsentHasBeenGivenForTheSpecificClaim()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Redirect to the consents page when no consent has been given for the specific cla" +
                    "im", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 558
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table164.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table164.AddRow(new string[] {
                            "scope",
                            "email"});
#line 559
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table164, "When ");
#line hidden
#line 564
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 565
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 566
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table165.AddRow(new string[] {
                            "response_type",
                            "code"});
                table165.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table165.AddRow(new string[] {
                            "state",
                            "state"});
                table165.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table165.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table165.AddRow(new string[] {
                            "redirect_uri",
                            "https://web.com"});
                table165.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table165.AddRow(new string[] {
                            "claims",
                            "{ id_token: { name: { essential : true } } }"});
#line 568
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table165, "And ");
#line hidden
#line 579
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 581
 testRunner.Then("redirect url contains \'http://localhost/Consents\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when an invalid essential acr value is passed in the claims")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when an invalid essential acr value is passed in the claims")]
        public virtual void ErrorIsReturnedWhenAnInvalidEssentialAcrValueIsPassedInTheClaims()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when an invalid essential acr value is passed in the claims", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 583
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table166.AddRow(new string[] {
                            "redirect_uris",
                            "[https://web.com]"});
                table166.AddRow(new string[] {
                            "scope",
                            "email"});
                table166.AddRow(new string[] {
                            "response_types",
                            "[token,id_token,code]"});
                table166.AddRow(new string[] {
                            "grant_types",
                            "[implicit,authorization_code]"});
#line 584
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table166, "When ");
#line hidden
#line 591
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 592
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 593
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table167.AddRow(new string[] {
                            "response_type",
                            "code id_token"});
                table167.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table167.AddRow(new string[] {
                            "state",
                            "state"});
                table167.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table167.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table167.AddRow(new string[] {
                            "redirect_uri",
                            "https://web.com"});
                table167.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table167.AddRow(new string[] {
                            "claims",
                            "{ id_token: { acr: { values : [\'urn:openbanking:psd2:ca\'], essential : true } } }" +
                                ""});
#line 595
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table167, "And ");
#line hidden
#line 606
 testRunner.And("extract query parameters into JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 608
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 609
 testRunner.Then("JSON \'error_description\'=\'no essential acr is supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 610
 testRunner.Then("JSON \'state\'=\'state\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AuthorizationErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AuthorizationErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
