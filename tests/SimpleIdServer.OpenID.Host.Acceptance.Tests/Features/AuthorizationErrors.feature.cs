// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.OpenID.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AuthorizationErrorsFeature : Xunit.IClassFixture<AuthorizationErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AuthorizationErrors.feature"
#line hidden
        
        public AuthorizationErrorsFeature(AuthorizationErrorsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AuthorizationErrors", "\tCheck the errors returned by the authorization endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Check state is returned in the callback url")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Check state is returned in the callback url")]
        public virtual void CheckStateIsReturnedInTheCallbackUrl()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check state is returned in the callback url", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table110.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table110.AddRow(new string[] {
                        "scope",
                        "email"});
#line 5
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table110, "When ");
#line 10
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table111.AddRow(new string[] {
                        "response_type",
                        "code"});
            table111.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table111.AddRow(new string[] {
                        "scope",
                        "openid"});
            table111.AddRow(new string[] {
                        "state",
                        "state"});
            table111.AddRow(new string[] {
                        "request_uri",
                        "uri"});
            table111.AddRow(new string[] {
                        "redirect_uri",
                        "http://localhost"});
#line 13
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table111, "And ");
#line 22
 testRunner.And("extract query parameters into JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.Then("JSON \'error_description\'=\'redirect uri http://localhost is not correct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
 testRunner.Then("JSON \'state\'=\'state\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when scope is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when scope is missing")]
        public virtual void ErrorIsReturnedWhenScopeIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when scope is missing", null, ((string[])(null)));
#line 28
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table112.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table112.AddRow(new string[] {
                        "scope",
                        "email"});
#line 29
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table112, "When ");
#line 34
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table113.AddRow(new string[] {
                        "response_type",
                        "code"});
            table113.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table113.AddRow(new string[] {
                        "state",
                        "state"});
            table113.AddRow(new string[] {
                        "response_mode",
                        "query"});
#line 37
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table113, "And ");
#line 44
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
 testRunner.Then("JSON \'error_description\'=\'missing parameter scope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when openid scope is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when openid scope is missing")]
        public virtual void ErrorIsReturnedWhenOpenidScopeIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when openid scope is missing", null, ((string[])(null)));
#line 50
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table114.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table114.AddRow(new string[] {
                        "scope",
                        "email"});
#line 51
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table114, "When ");
#line 56
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table115.AddRow(new string[] {
                        "response_type",
                        "code"});
            table115.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table115.AddRow(new string[] {
                        "state",
                        "state"});
            table115.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table115.AddRow(new string[] {
                        "scope",
                        "scope1"});
#line 59
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table115, "And ");
#line 67
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 70
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
 testRunner.Then("JSON \'error_description\'=\'openid scope is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when the scope is not supported by the client")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when the scope is not supported by the client")]
        public virtual void ErrorIsReturnedWhenTheScopeIsNotSupportedByTheClient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when the scope is not supported by the client", null, ((string[])(null)));
#line 73
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table116.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table116.AddRow(new string[] {
                        "scope",
                        "email"});
#line 74
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table116, "When ");
#line 79
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table117.AddRow(new string[] {
                        "response_type",
                        "code"});
            table117.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table117.AddRow(new string[] {
                        "state",
                        "state"});
            table117.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table117.AddRow(new string[] {
                        "scope",
                        "openid role"});
#line 82
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table117, "And ");
#line 90
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 93
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 94
 testRunner.Then("JSON \'error_description\'=\'scopes role are not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when redirect_uri is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when redirect_uri is missing")]
        public virtual void ErrorIsReturnedWhenRedirect_UriIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when redirect_uri is missing", null, ((string[])(null)));
#line 96
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table118.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table118.AddRow(new string[] {
                        "scope",
                        "email"});
#line 97
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table118, "When ");
#line 102
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table119.AddRow(new string[] {
                        "response_type",
                        "code"});
            table119.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table119.AddRow(new string[] {
                        "state",
                        "state"});
            table119.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table119.AddRow(new string[] {
                        "scope",
                        "openid"});
#line 105
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table119, "And ");
#line 113
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 116
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 117
 testRunner.Then("JSON \'error_description\'=\'missing parameter redirect_uri\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when user is not authenticated and prompt=none")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when user is not authenticated and prompt=none")]
        public virtual void ErrorIsReturnedWhenUserIsNotAuthenticatedAndPromptNone()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when user is not authenticated and prompt=none", null, ((string[])(null)));
#line 119
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table120.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table120.AddRow(new string[] {
                        "scope",
                        "email"});
#line 120
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table120, "When ");
#line 125
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
 testRunner.And("anonymous authentication", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table121.AddRow(new string[] {
                        "response_type",
                        "code"});
            table121.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table121.AddRow(new string[] {
                        "state",
                        "state"});
            table121.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table121.AddRow(new string[] {
                        "scope",
                        "openid"});
            table121.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table121.AddRow(new string[] {
                        "prompt",
                        "none"});
#line 129
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table121, "And ");
#line 139
 testRunner.And("extract query parameters into JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.Then("JSON \'error\'=\'login_required\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 142
 testRunner.Then("JSON \'error_description\'=\'login is required\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when id_token_hint is not present and prompt=none")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when id_token_hint is not present and prompt=none")]
        public virtual void ErrorIsReturnedWhenId_Token_HintIsNotPresentAndPromptNone()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when id_token_hint is not present and prompt=none", null, ((string[])(null)));
#line 144
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table122.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table122.AddRow(new string[] {
                        "scope",
                        "email"});
#line 145
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table122, "When ");
#line 150
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table123.AddRow(new string[] {
                        "response_type",
                        "code"});
            table123.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table123.AddRow(new string[] {
                        "state",
                        "state"});
            table123.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table123.AddRow(new string[] {
                        "scope",
                        "openid"});
            table123.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table123.AddRow(new string[] {
                        "prompt",
                        "none"});
#line 153
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table123, "And ");
#line 163
 testRunner.And("extract query parameters into JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 166
 testRunner.Then("JSON \'error_description\'=\'missing parameter id_token_hint\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when subject in the id_token_hint is not correct")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when subject in the id_token_hint is not correct")]
        public virtual void ErrorIsReturnedWhenSubjectInTheId_Token_HintIsNotCorrect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when subject in the id_token_hint is not correct", null, ((string[])(null)));
#line 168
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table124.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 169
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table124, "When ");
#line hidden
            TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table125.AddRow(new string[] {
                        "sub",
                        "otheruser"});
#line 173
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'id_token_hint\'", ((string)(null)), table125, "And ");
#line hidden
            TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table126.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table126.AddRow(new string[] {
                        "scope",
                        "email"});
#line 177
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table126, "And ");
#line 182
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table127.AddRow(new string[] {
                        "response_type",
                        "code"});
            table127.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table127.AddRow(new string[] {
                        "state",
                        "state"});
            table127.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table127.AddRow(new string[] {
                        "scope",
                        "openid"});
            table127.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table127.AddRow(new string[] {
                        "prompt",
                        "none"});
            table127.AddRow(new string[] {
                        "id_token_hint",
                        "$id_token_hint$"});
#line 185
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table127, "And ");
#line 196
 testRunner.And("extract query parameters into JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 198
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 199
 testRunner.Then("JSON \'error_description\'=\'subject contained in id_token_hint is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when audience in the id_token_hint is not correct")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when audience in the id_token_hint is not correct")]
        public virtual void ErrorIsReturnedWhenAudienceInTheId_Token_HintIsNotCorrect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when audience in the id_token_hint is not correct", null, ((string[])(null)));
#line 201
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table128.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 202
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table128, "When ");
#line hidden
            TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table129.AddRow(new string[] {
                        "sub",
                        "administrator"});
            table129.AddRow(new string[] {
                        "aud",
                        "aud1 aud2"});
#line 206
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'id_token_hint\'", ((string)(null)), table129, "And ");
#line hidden
            TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table130.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table130.AddRow(new string[] {
                        "scope",
                        "email"});
#line 211
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table130, "And ");
#line 216
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table131.AddRow(new string[] {
                        "response_type",
                        "code"});
            table131.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table131.AddRow(new string[] {
                        "state",
                        "state"});
            table131.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table131.AddRow(new string[] {
                        "scope",
                        "openid"});
            table131.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table131.AddRow(new string[] {
                        "prompt",
                        "none"});
            table131.AddRow(new string[] {
                        "id_token_hint",
                        "$id_token_hint$"});
#line 219
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table131, "And ");
#line 230
 testRunner.And("extract query parameters into JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 233
 testRunner.Then("JSON \'error_description\'=\'audience contained in id_token_hint is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when the value specified in claims parameter is invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when the value specified in claims parameter is invalid")]
        public virtual void ErrorIsReturnedWhenTheValueSpecifiedInClaimsParameterIsInvalid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when the value specified in claims parameter is invalid", null, ((string[])(null)));
#line 235
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table132.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table132.AddRow(new string[] {
                        "scope",
                        "email"});
#line 236
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table132, "When ");
#line 241
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 242
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 243
 testRunner.And("add user consent with claim : user=\'administrator\', scope=\'email\', clientId=\'$cli" +
                    "ent_id$\', claim=\'sub=administrator\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table133.AddRow(new string[] {
                        "response_type",
                        "code"});
            table133.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table133.AddRow(new string[] {
                        "state",
                        "state"});
            table133.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table133.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table133.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table133.AddRow(new string[] {
                        "claims",
                        "{ id_token: { sub: { essential : true, value: \"invalid\" } } }"});
#line 245
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table133, "And ");
#line 255
 testRunner.And("extract query parameters into JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 257
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 258
 testRunner.Then("JSON \'error_description\'=\'claims sub are invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when request parameter is not a valid JWT token")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter is not a valid JWT token")]
        public virtual void ErrorIsReturnedWhenRequestParameterIsNotAValidJWTToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter is not a valid JWT token", null, ((string[])(null)));
#line 260
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table134.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table134.AddRow(new string[] {
                        "scope",
                        "email"});
#line 261
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table134, "When ");
#line 266
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 267
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table135.AddRow(new string[] {
                        "response_type",
                        "code"});
            table135.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table135.AddRow(new string[] {
                        "scope",
                        "openid"});
            table135.AddRow(new string[] {
                        "request",
                        "invalid"});
            table135.AddRow(new string[] {
                        "state",
                        "state"});
#line 269
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table135, "And ");
#line 277
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 279
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 280
 testRunner.Then("JSON \'error_description\'=\'request parameter is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when request parameter is not a valid JWS token")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter is not a valid JWS token")]
        public virtual void ErrorIsReturnedWhenRequestParameterIsNotAValidJWSToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter is not a valid JWS token", null, ((string[])(null)));
#line 282
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table136.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table136.AddRow(new string[] {
                        "scope",
                        "email"});
#line 283
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table136, "When ");
#line 288
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 289
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table137.AddRow(new string[] {
                        "response_type",
                        "code"});
            table137.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table137.AddRow(new string[] {
                        "scope",
                        "openid"});
            table137.AddRow(new string[] {
                        "request",
                        "a.b.c"});
            table137.AddRow(new string[] {
                        "state",
                        "state"});
#line 291
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table137, "And ");
#line 299
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 301
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 302
 testRunner.Then("JSON \'error_description\'=\'request parameter is not a valid JWS token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when request parameter is a JWS token with an invalid algorithm" +
            " name")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter is a JWS token with an invalid algorithm" +
            " name")]
        public virtual void ErrorIsReturnedWhenRequestParameterIsAJWSTokenWithAnInvalidAlgorithmName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter is a JWS token with an invalid algorithm" +
                    " name", null, ((string[])(null)));
#line 304
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table138.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS384"});
#line 305
 testRunner.When("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table138, "When ");
#line hidden
            TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table139.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table139.AddRow(new string[] {
                        "scope",
                        "email"});
            table139.AddRow(new string[] {
                        "request_object_signing_alg",
                        "RS256"});
#line 309
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table139, "And ");
#line 315
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 316
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table140.AddRow(new string[] {
                        "key",
                        "val"});
#line 318
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'request\'", ((string)(null)), table140, "And ");
#line hidden
            TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table141.AddRow(new string[] {
                        "response_type",
                        "code"});
            table141.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table141.AddRow(new string[] {
                        "scope",
                        "openid"});
            table141.AddRow(new string[] {
                        "request",
                        "$request$"});
            table141.AddRow(new string[] {
                        "state",
                        "state"});
#line 322
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table141, "And ");
#line 330
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 332
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 333
 testRunner.Then("JSON \'error_description\'=\'the signature algorithm is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when request parameter doesn\'t contain issuer")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter doesn\'t contain issuer")]
        public virtual void ErrorIsReturnedWhenRequestParameterDoesntContainIssuer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter doesn\'t contain issuer", null, ((string[])(null)));
#line 335
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table142.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 336
 testRunner.When("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table142, "When ");
#line hidden
            TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table143.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table143.AddRow(new string[] {
                        "scope",
                        "email"});
            table143.AddRow(new string[] {
                        "request_object_signing_alg",
                        "RS256"});
            table143.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 340
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table143, "And ");
#line 347
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 348
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table144.AddRow(new string[] {
                        "key",
                        "val"});
#line 350
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'request\'", ((string)(null)), table144, "And ");
#line hidden
            TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table145.AddRow(new string[] {
                        "response_type",
                        "code"});
            table145.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table145.AddRow(new string[] {
                        "scope",
                        "openid"});
            table145.AddRow(new string[] {
                        "request",
                        "$request$"});
            table145.AddRow(new string[] {
                        "state",
                        "state"});
#line 354
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table145, "And ");
#line 362
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 364
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 365
 testRunner.Then("JSON \'error_description\'=\'the issuer claim is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when request parameter contains an invalid issuer")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter contains an invalid issuer")]
        public virtual void ErrorIsReturnedWhenRequestParameterContainsAnInvalidIssuer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter contains an invalid issuer", null, ((string[])(null)));
#line 367
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table146.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 368
 testRunner.When("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table146, "When ");
#line hidden
            TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table147.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table147.AddRow(new string[] {
                        "scope",
                        "email"});
            table147.AddRow(new string[] {
                        "request_object_signing_alg",
                        "RS256"});
            table147.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 372
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table147, "And ");
#line 379
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 380
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table148.AddRow(new string[] {
                        "iss",
                        "invalid"});
#line 382
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'request\'", ((string)(null)), table148, "And ");
#line hidden
            TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table149.AddRow(new string[] {
                        "response_type",
                        "code"});
            table149.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table149.AddRow(new string[] {
                        "scope",
                        "openid"});
            table149.AddRow(new string[] {
                        "request",
                        "$request$"});
            table149.AddRow(new string[] {
                        "state",
                        "state"});
#line 386
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table149, "And ");
#line 394
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 396
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 397
 testRunner.Then("JSON \'error_description\'=\'the issuer claim is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when request parameter doesn\'t contain audience")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter doesn\'t contain audience")]
        public virtual void ErrorIsReturnedWhenRequestParameterDoesntContainAudience()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter doesn\'t contain audience", null, ((string[])(null)));
#line 399
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table150.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 400
 testRunner.When("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table150, "When ");
#line hidden
            TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table151.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table151.AddRow(new string[] {
                        "scope",
                        "email"});
            table151.AddRow(new string[] {
                        "request_object_signing_alg",
                        "RS256"});
            table151.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 404
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table151, "And ");
#line 411
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 412
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table152.AddRow(new string[] {
                        "iss",
                        "$client_id$"});
#line 414
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'request\'", ((string)(null)), table152, "And ");
#line hidden
            TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table153.AddRow(new string[] {
                        "response_type",
                        "code"});
            table153.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table153.AddRow(new string[] {
                        "scope",
                        "openid"});
            table153.AddRow(new string[] {
                        "request",
                        "$request$"});
            table153.AddRow(new string[] {
                        "state",
                        "state"});
#line 418
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table153, "And ");
#line 426
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 428
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 429
 testRunner.Then("JSON \'error_description\'=\'the audience claim is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when request parameter doesn\'t contain response_type")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter doesn\'t contain response_type")]
        public virtual void ErrorIsReturnedWhenRequestParameterDoesntContainResponse_Type()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter doesn\'t contain response_type", null, ((string[])(null)));
#line 431
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table154.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 432
 testRunner.When("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table154, "When ");
#line hidden
            TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table155.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table155.AddRow(new string[] {
                        "scope",
                        "email"});
            table155.AddRow(new string[] {
                        "request_object_signing_alg",
                        "RS256"});
            table155.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 436
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table155, "And ");
#line 443
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 444
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table156.AddRow(new string[] {
                        "iss",
                        "$client_id$"});
            table156.AddRow(new string[] {
                        "aud",
                        "aud1"});
#line 446
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'request\'", ((string)(null)), table156, "And ");
#line hidden
            TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table157.AddRow(new string[] {
                        "response_type",
                        "code"});
            table157.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table157.AddRow(new string[] {
                        "scope",
                        "openid"});
            table157.AddRow(new string[] {
                        "request",
                        "$request$"});
            table157.AddRow(new string[] {
                        "state",
                        "state"});
#line 451
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table157, "And ");
#line 459
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 461
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 462
 testRunner.Then("JSON \'error_description\'=\'the response type claim is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when request parameter doesn\'t contain client_id")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter doesn\'t contain client_id")]
        public virtual void ErrorIsReturnedWhenRequestParameterDoesntContainClient_Id()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter doesn\'t contain client_id", null, ((string[])(null)));
#line 464
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table158.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 465
 testRunner.When("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table158, "When ");
#line hidden
            TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table159.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table159.AddRow(new string[] {
                        "scope",
                        "email"});
            table159.AddRow(new string[] {
                        "request_object_signing_alg",
                        "RS256"});
            table159.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 469
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table159, "And ");
#line 476
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 477
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table160.AddRow(new string[] {
                        "iss",
                        "$client_id$"});
            table160.AddRow(new string[] {
                        "aud",
                        "aud1"});
            table160.AddRow(new string[] {
                        "response_type",
                        "code"});
#line 479
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'request\'", ((string)(null)), table160, "And ");
#line hidden
            TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table161.AddRow(new string[] {
                        "response_type",
                        "code"});
            table161.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table161.AddRow(new string[] {
                        "scope",
                        "openid"});
            table161.AddRow(new string[] {
                        "request",
                        "$request$"});
            table161.AddRow(new string[] {
                        "state",
                        "state"});
#line 485
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table161, "And ");
#line 493
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 495
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 496
 testRunner.Then("JSON \'error_description\'=\'the client identifier claim is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when request parameter contains an invalid response_type")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter contains an invalid response_type")]
        public virtual void ErrorIsReturnedWhenRequestParameterContainsAnInvalidResponse_Type()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter contains an invalid response_type", null, ((string[])(null)));
#line 498
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table162.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 499
 testRunner.When("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table162, "When ");
#line hidden
            TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table163.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table163.AddRow(new string[] {
                        "scope",
                        "email"});
            table163.AddRow(new string[] {
                        "request_object_signing_alg",
                        "RS256"});
            table163.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
#line 503
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table163, "And ");
#line 510
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 511
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table164.AddRow(new string[] {
                        "iss",
                        "$client_id$"});
            table164.AddRow(new string[] {
                        "aud",
                        "aud1"});
            table164.AddRow(new string[] {
                        "response_type",
                        "token"});
            table164.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
#line 513
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'request\'", ((string)(null)), table164, "And ");
#line hidden
            TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table165.AddRow(new string[] {
                        "response_type",
                        "code"});
            table165.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table165.AddRow(new string[] {
                        "scope",
                        "openid"});
            table165.AddRow(new string[] {
                        "request",
                        "$request$"});
            table165.AddRow(new string[] {
                        "state",
                        "state"});
#line 520
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table165, "And ");
#line 528
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 530
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 531
 testRunner.Then("JSON \'error_description\'=\'the response type claim is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when request parameter contains an invalid client identifier")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request parameter contains an invalid client identifier")]
        public virtual void ErrorIsReturnedWhenRequestParameterContainsAnInvalidClientIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request parameter contains an invalid client identifier", null, ((string[])(null)));
#line 533
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table166.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 534
 testRunner.When("build JSON Web Keys, store JWKS into \'jwks\' and store the public keys into \'jwks_" +
                    "json\'", ((string)(null)), table166, "When ");
#line hidden
            TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table167.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table167.AddRow(new string[] {
                        "scope",
                        "email"});
            table167.AddRow(new string[] {
                        "request_object_signing_alg",
                        "RS256"});
            table167.AddRow(new string[] {
                        "jwks",
                        "$jwks_json$"});
            table167.AddRow(new string[] {
                        "client_id",
                        "invalid"});
#line 538
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table167, "And ");
#line 546
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 547
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table168.AddRow(new string[] {
                        "iss",
                        "$client_id$"});
            table168.AddRow(new string[] {
                        "aud",
                        "aud1"});
            table168.AddRow(new string[] {
                        "response_type",
                        "code"});
            table168.AddRow(new string[] {
                        "client_id",
                        "invalid"});
#line 549
 testRunner.And("use \'1\' JWK from \'jwks\' to build JWS and store into \'request\'", ((string)(null)), table168, "And ");
#line hidden
            TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table169.AddRow(new string[] {
                        "response_type",
                        "code"});
            table169.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table169.AddRow(new string[] {
                        "scope",
                        "openid"});
            table169.AddRow(new string[] {
                        "request",
                        "$request$"});
            table169.AddRow(new string[] {
                        "state",
                        "state"});
#line 556
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table169, "And ");
#line 564
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 566
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 567
 testRunner.Then("JSON \'error_description\'=\'the client identifier claim is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when request uri is invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when request uri is invalid")]
        public virtual void ErrorIsReturnedWhenRequestUriIsInvalid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when request uri is invalid", null, ((string[])(null)));
#line 569
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table170.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table170.AddRow(new string[] {
                        "scope",
                        "email"});
#line 570
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table170, "When ");
#line 575
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 576
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table171.AddRow(new string[] {
                        "response_type",
                        "code"});
            table171.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table171.AddRow(new string[] {
                        "scope",
                        "openid"});
            table171.AddRow(new string[] {
                        "state",
                        "state"});
            table171.AddRow(new string[] {
                        "request_uri",
                        "uri"});
#line 578
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table171, "And ");
#line 586
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 588
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 589
 testRunner.Then("JSON \'error_description\'=\'request uri parameter is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Redirect to the login page when prompt=login")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Redirect to the login page when prompt=login")]
        public virtual void RedirectToTheLoginPageWhenPromptLogin()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Redirect to the login page when prompt=login", null, ((string[])(null)));
#line 591
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table172.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table172.AddRow(new string[] {
                        "scope",
                        "email"});
#line 592
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table172, "When ");
#line 597
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 598
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table173.AddRow(new string[] {
                        "response_type",
                        "code"});
            table173.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table173.AddRow(new string[] {
                        "state",
                        "state"});
            table173.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table173.AddRow(new string[] {
                        "scope",
                        "openid"});
            table173.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table173.AddRow(new string[] {
                        "prompt",
                        "login"});
#line 600
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table173, "And ");
#line 610
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 612
 testRunner.Then("redirect url contains \'http://localhost/Authenticate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Redirect to the account page when prompt=select_account")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Redirect to the account page when prompt=select_account")]
        public virtual void RedirectToTheAccountPageWhenPromptSelect_Account()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Redirect to the account page when prompt=select_account", null, ((string[])(null)));
#line 614
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table174.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table174.AddRow(new string[] {
                        "scope",
                        "email"});
#line 615
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table174, "When ");
#line 620
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 621
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table175.AddRow(new string[] {
                        "response_type",
                        "code"});
            table175.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table175.AddRow(new string[] {
                        "state",
                        "state"});
            table175.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table175.AddRow(new string[] {
                        "scope",
                        "email openid"});
            table175.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table175.AddRow(new string[] {
                        "prompt",
                        "select_account"});
#line 623
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table175, "And ");
#line 633
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 635
 testRunner.Then("redirect url contains \'http://localhost/Account\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Redirect to the consents page when no consent has been given for the specific cla" +
            "im")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Redirect to the consents page when no consent has been given for the specific cla" +
            "im")]
        public virtual void RedirectToTheConsentsPageWhenNoConsentHasBeenGivenForTheSpecificClaim()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Redirect to the consents page when no consent has been given for the specific cla" +
                    "im", null, ((string[])(null)));
#line 638
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table176.AddRow(new string[] {
                        "redirect_uris",
                        "[https://web.com]"});
            table176.AddRow(new string[] {
                        "scope",
                        "email"});
#line 639
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table176, "When ");
#line 644
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 645
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 646
 testRunner.And("add user consent : user=\'administrator\', scope=\'email\', clientId=\'$client_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table177.AddRow(new string[] {
                        "response_type",
                        "code"});
            table177.AddRow(new string[] {
                        "client_id",
                        "$client_id$"});
            table177.AddRow(new string[] {
                        "state",
                        "state"});
            table177.AddRow(new string[] {
                        "response_mode",
                        "query"});
            table177.AddRow(new string[] {
                        "scope",
                        "openid email"});
            table177.AddRow(new string[] {
                        "redirect_uri",
                        "https://web.com"});
            table177.AddRow(new string[] {
                        "claims",
                        "{ id_token: { name: { essential : true } } }"});
#line 648
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table177, "And ");
#line 658
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 660
 testRunner.Then("redirect url contains \'http://localhost/Consents\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AuthorizationErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AuthorizationErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
