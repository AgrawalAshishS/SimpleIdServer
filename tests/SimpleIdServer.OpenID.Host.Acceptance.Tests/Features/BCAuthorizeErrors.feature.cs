// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.OpenID.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BCAuthorizeErrorsFeature : object, Xunit.IClassFixture<BCAuthorizeErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BCAuthorizeErrors.feature"
#line hidden
        
        public BCAuthorizeErrorsFeature(BCAuthorizeErrorsFeature.FixtureData fixtureData, SimpleIdServer_OpenID_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "BCAuthorizeErrors", "\tCheck errors returned by /mtls/bc-authorize endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when hint is missing (get auth_req_id)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when hint is missing (get auth_req_id)")]
        public virtual void ErrorIsReturnedWhenHintIsMissingGetAuth_Req_Id()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when hint is missing (get auth_req_id)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table183.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 5
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table183, "When ");
#line hidden
                TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table184.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "tls_client_auth"});
                table184.AddRow(new string[] {
                            "response_types",
                            "[token]"});
                table184.AddRow(new string[] {
                            "grant_types",
                            "[client_credentials]"});
                table184.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table184.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost:8080]"});
                table184.AddRow(new string[] {
                            "tls_client_auth_san_dns",
                            "firstMtlsClient"});
#line 9
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/register\'", ((string)(null)), table184, "And ");
#line hidden
#line 18
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table185.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table185.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table185.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table185.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 21
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/token\'", ((string)(null)), table185, "And ");
#line hidden
                TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table186.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table186.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
#line 28
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table186, "And ");
#line hidden
#line 33
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
 testRunner.Then("JSON \'error_description\'=\'only one hint can be passed in the request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when scope is missing (get auth_req_id)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when scope is missing (get auth_req_id)")]
        public virtual void ErrorIsReturnedWhenScopeIsMissingGetAuth_Req_Id()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when scope is missing (get auth_req_id)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table187.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 39
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table187, "When ");
#line hidden
                TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table188.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "tls_client_auth"});
                table188.AddRow(new string[] {
                            "response_types",
                            "[token]"});
                table188.AddRow(new string[] {
                            "grant_types",
                            "[client_credentials]"});
                table188.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table188.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost:8080]"});
                table188.AddRow(new string[] {
                            "tls_client_auth_san_dns",
                            "firstMtlsClient"});
#line 43
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/register\'", ((string)(null)), table188, "And ");
#line hidden
#line 52
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table189.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table189.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table189.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table189.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 55
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/token\'", ((string)(null)), table189, "And ");
#line hidden
                TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table190.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table190.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table190.AddRow(new string[] {
                            "id_token_hint",
                            "idtokenhint"});
#line 62
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table190, "And ");
#line hidden
#line 68
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
 testRunner.Then("JSON \'error_description\'=\'missing parameter scope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when scope is not valid (get auth_req_id)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when scope is not valid (get auth_req_id)")]
        public virtual void ErrorIsReturnedWhenScopeIsNotValidGetAuth_Req_Id()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when scope is not valid (get auth_req_id)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 73
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table191.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 74
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table191, "When ");
#line hidden
                TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table192.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "tls_client_auth"});
                table192.AddRow(new string[] {
                            "response_types",
                            "[token]"});
                table192.AddRow(new string[] {
                            "grant_types",
                            "[client_credentials]"});
                table192.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table192.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost:8080]"});
                table192.AddRow(new string[] {
                            "tls_client_auth_san_dns",
                            "firstMtlsClient"});
#line 78
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/register\'", ((string)(null)), table192, "And ");
#line hidden
#line 87
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table193.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table193.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table193.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table193.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 90
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/token\'", ((string)(null)), table193, "And ");
#line hidden
                TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table194.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table194.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table194.AddRow(new string[] {
                            "id_token_hint",
                            "idtokenhint"});
                table194.AddRow(new string[] {
                            "scope",
                            "scope2"});
#line 97
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table194, "And ");
#line hidden
#line 104
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
 testRunner.Then("JSON \'error\'=\'invalid_scope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 107
 testRunner.Then("JSON \'error_description\'=\'invalid scopes : scope2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when client_notification_token is missing (get auth_req_id)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when client_notification_token is missing (get auth_req_id)")]
        public virtual void ErrorIsReturnedWhenClient_Notification_TokenIsMissingGetAuth_Req_Id()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when client_notification_token is missing (get auth_req_id)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table195.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 110
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table195, "When ");
#line hidden
                TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table196.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "tls_client_auth"});
                table196.AddRow(new string[] {
                            "response_types",
                            "[token]"});
                table196.AddRow(new string[] {
                            "grant_types",
                            "[client_credentials]"});
                table196.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table196.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost:8080]"});
                table196.AddRow(new string[] {
                            "tls_client_auth_san_dns",
                            "firstMtlsClient"});
                table196.AddRow(new string[] {
                            "backchannel_token_delivery_mode",
                            "push"});
                table196.AddRow(new string[] {
                            "backchannel_client_notification_endpoint",
                            "https://localhost:8080/pushNotificationEdp"});
#line 114
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/register\'", ((string)(null)), table196, "And ");
#line hidden
#line 125
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table197.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table197.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table197.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table197.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 128
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/token\'", ((string)(null)), table197, "And ");
#line hidden
                TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table198.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table198.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table198.AddRow(new string[] {
                            "id_token_hint",
                            "idtokenhint"});
                table198.AddRow(new string[] {
                            "scope",
                            "scope1"});
#line 135
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table198, "And ");
#line hidden
#line 142
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 145
 testRunner.Then("JSON \'error_description\'=\'missing parameter client_notification_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when client_notification_token is < 128 bits (get auth_req_id)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when client_notification_token is < 128 bits (get auth_req_id)")]
        public virtual void ErrorIsReturnedWhenClient_Notification_TokenIs128BitsGetAuth_Req_Id()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when client_notification_token is < 128 bits (get auth_req_id)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 147
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table199.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 148
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table199, "When ");
#line hidden
                TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table200.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "tls_client_auth"});
                table200.AddRow(new string[] {
                            "response_types",
                            "[token]"});
                table200.AddRow(new string[] {
                            "grant_types",
                            "[client_credentials]"});
                table200.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table200.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost:8080]"});
                table200.AddRow(new string[] {
                            "tls_client_auth_san_dns",
                            "firstMtlsClient"});
                table200.AddRow(new string[] {
                            "backchannel_token_delivery_mode",
                            "push"});
                table200.AddRow(new string[] {
                            "backchannel_client_notification_endpoint",
                            "https://localhost:8080/pushNotificationEdp"});
#line 152
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/register\'", ((string)(null)), table200, "And ");
#line hidden
#line 163
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table201.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table201.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table201.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table201.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 166
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/token\'", ((string)(null)), table201, "And ");
#line hidden
                TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table202.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table202.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table202.AddRow(new string[] {
                            "id_token_hint",
                            "idtokenhint"});
                table202.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table202.AddRow(new string[] {
                            "client_notification_token",
                            "1"});
#line 173
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table202, "And ");
#line hidden
#line 181
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 183
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 184
 testRunner.Then("JSON \'error_description\'=\'client_notification_token must contains at least 128 by" +
                        "tes\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when id_token_hint is invalid (get auth_req_id)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when id_token_hint is invalid (get auth_req_id)")]
        public virtual void ErrorIsReturnedWhenId_Token_HintIsInvalidGetAuth_Req_Id()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when id_token_hint is invalid (get auth_req_id)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 186
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table203.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 187
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table203, "When ");
#line hidden
                TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table204.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "tls_client_auth"});
                table204.AddRow(new string[] {
                            "response_types",
                            "[token]"});
                table204.AddRow(new string[] {
                            "grant_types",
                            "[client_credentials]"});
                table204.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table204.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost:8080]"});
                table204.AddRow(new string[] {
                            "tls_client_auth_san_dns",
                            "firstMtlsClient"});
#line 191
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/register\'", ((string)(null)), table204, "And ");
#line hidden
#line 200
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table205.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table205.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table205.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table205.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 203
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/token\'", ((string)(null)), table205, "And ");
#line hidden
                TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table206.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table206.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table206.AddRow(new string[] {
                            "id_token_hint",
                            "idtokenhint"});
                table206.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table206.AddRow(new string[] {
                            "client_notification_token",
                            "04bcf708-dfba-4719-a3d3-b213322e2c38"});
#line 210
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table206, "And ");
#line hidden
#line 218
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 220
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 221
 testRunner.Then("JSON \'error_description\'=\'id_token_hint is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when hint is missing (confirm auth_req_id)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when hint is missing (confirm auth_req_id)")]
        public virtual void ErrorIsReturnedWhenHintIsMissingConfirmAuth_Req_Id()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when hint is missing (confirm auth_req_id)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 223
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table207.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 224
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table207, "When ");
#line hidden
                TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table208.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "tls_client_auth"});
                table208.AddRow(new string[] {
                            "response_types",
                            "[token]"});
                table208.AddRow(new string[] {
                            "grant_types",
                            "[client_credentials]"});
                table208.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table208.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost:8080]"});
                table208.AddRow(new string[] {
                            "tls_client_auth_san_dns",
                            "firstMtlsClient"});
#line 228
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/register\'", ((string)(null)), table208, "And ");
#line hidden
#line 237
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 238
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table209.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table209.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table209.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table209.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 240
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/token\'", ((string)(null)), table209, "And ");
#line hidden
                TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table210.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table210.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
#line 247
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/bc-authorize/confirm\'", ((string)(null)), table210, "And ");
#line hidden
#line 252
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 254
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 255
 testRunner.Then("JSON \'error_description\'=\'only one hint can be passed in the request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when id_token_hint is invalid (confirm auth_req_id)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when id_token_hint is invalid (confirm auth_req_id)")]
        public virtual void ErrorIsReturnedWhenId_Token_HintIsInvalidConfirmAuth_Req_Id()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when id_token_hint is invalid (confirm auth_req_id)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 257
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table211.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 258
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table211, "When ");
#line hidden
                TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table212.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "tls_client_auth"});
                table212.AddRow(new string[] {
                            "response_types",
                            "[token]"});
                table212.AddRow(new string[] {
                            "grant_types",
                            "[client_credentials]"});
                table212.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table212.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost:8080]"});
                table212.AddRow(new string[] {
                            "tls_client_auth_san_dns",
                            "firstMtlsClient"});
#line 262
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/register\'", ((string)(null)), table212, "And ");
#line hidden
#line 271
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 272
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table213.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table213.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table213.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table213.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 274
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/token\'", ((string)(null)), table213, "And ");
#line hidden
                TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table214.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table214.AddRow(new string[] {
                            "id_token_hint",
                            "idtokenhint"});
#line 281
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/bc-authorize/confirm\'", ((string)(null)), table214, "And ");
#line hidden
#line 286
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 288
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 289
 testRunner.Then("JSON \'error_description\'=\'id_token_hint is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when auth_req_id is missing (confirm auth_req_id)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when auth_req_id is missing (confirm auth_req_id)")]
        public virtual void ErrorIsReturnedWhenAuth_Req_IdIsMissingConfirmAuth_Req_Id()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when auth_req_id is missing (confirm auth_req_id)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 291
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table215.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 292
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table215, "When ");
#line hidden
                TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table216.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "tls_client_auth"});
                table216.AddRow(new string[] {
                            "response_types",
                            "[token]"});
                table216.AddRow(new string[] {
                            "grant_types",
                            "[client_credentials]"});
                table216.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table216.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost:8080]"});
                table216.AddRow(new string[] {
                            "tls_client_auth_san_dns",
                            "firstMtlsClient"});
#line 296
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/register\'", ((string)(null)), table216, "And ");
#line hidden
#line 305
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 306
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table217.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table217.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table217.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table217.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 308
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/token\'", ((string)(null)), table217, "And ");
#line hidden
                TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table218.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table218.AddRow(new string[] {
                            "login_hint",
                            "administrator"});
#line 315
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/bc-authorize/confirm\'", ((string)(null)), table218, "And ");
#line hidden
#line 320
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 322
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 323
 testRunner.Then("JSON \'error_description\'=\'missing parameter auth_req_id\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when authtorization request doesn\'t exist (confirm auth_req_id)" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when authtorization request doesn\'t exist (confirm auth_req_id)" +
            "")]
        public virtual void ErrorIsReturnedWhenAuthtorizationRequestDoesntExistConfirmAuth_Req_Id()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when authtorization request doesn\'t exist (confirm auth_req_id)" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 325
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Kid",
                            "AlgName"});
                table219.AddRow(new string[] {
                            "SIG",
                            "1",
                            "RS256"});
#line 326
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table219, "When ");
#line hidden
                TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table220.AddRow(new string[] {
                            "token_endpoint_auth_method",
                            "tls_client_auth"});
                table220.AddRow(new string[] {
                            "response_types",
                            "[token]"});
                table220.AddRow(new string[] {
                            "grant_types",
                            "[client_credentials]"});
                table220.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table220.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost:8080]"});
                table220.AddRow(new string[] {
                            "tls_client_auth_san_dns",
                            "firstMtlsClient"});
#line 330
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/register\'", ((string)(null)), table220, "And ");
#line hidden
#line 339
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 340
 testRunner.And("extract parameter \'client_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table221.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "mtlsClient.crt"});
                table221.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table221.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table221.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 342
 testRunner.And("execute HTTP POST request \'https://localhost:8080/mtls/token\'", ((string)(null)), table221, "And ");
#line hidden
                TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table222.AddRow(new string[] {
                            "client_id",
                            "$client_id$"});
                table222.AddRow(new string[] {
                            "login_hint",
                            "administrator"});
                table222.AddRow(new string[] {
                            "auth_req_id",
                            "authreqid"});
#line 349
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/bc-authorize/confirm\'", ((string)(null)), table222, "And ");
#line hidden
#line 355
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 357
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 358
 testRunner.Then("JSON \'error_description\'=\'auth_req_id doesn\'t exist\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BCAuthorizeErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BCAuthorizeErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
