// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.OAuth.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TokenFeature : Xunit.IClassFixture<TokenFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Token.feature"
#line hidden
        
        public TokenFeature(TokenFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Token", "\tGet access token", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Use client_credentials grant type to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "Token")]
        [Xunit.TraitAttribute("Description", "Use client_credentials grant type to get an access token")]
        public virtual void UseClient_CredentialsGrantTypeToGetAnAccessToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use client_credentials grant type to get an access token", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table26.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 5
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table26, "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table27.AddRow(new string[] {
                        "client_id",
                        "f3d35cce-de69-45bf-958c-4a8796f8ed37"});
            table27.AddRow(new string[] {
                        "client_secret",
                        "BankCvSecret"});
            table27.AddRow(new string[] {
                        "scope",
                        "scope1"});
            table27.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 9
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table27, "And ");
#line 16
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 19
 testRunner.Then("JSON exists \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
 testRunner.Then("JSON exists \'refresh_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
 testRunner.Then("JSON \'token_type\'=\'Bearer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use password grant type to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "Token")]
        [Xunit.TraitAttribute("Description", "Use password grant type to get an access token")]
        public virtual void UsePasswordGrantTypeToGetAnAccessToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use password grant type to get an access token", null, ((string[])(null)));
#line 23
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table28.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 24
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table28, "When ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table29.AddRow(new string[] {
                        "client_id",
                        "f3d35cce-de69-45bf-958c-4a8796f8ed37"});
            table29.AddRow(new string[] {
                        "client_secret",
                        "BankCvSecret"});
            table29.AddRow(new string[] {
                        "username",
                        "administrator"});
            table29.AddRow(new string[] {
                        "password",
                        "password"});
            table29.AddRow(new string[] {
                        "grant_type",
                        "password"});
#line 28
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table29, "And ");
#line 36
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
 testRunner.Then("JSON exists \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 40
 testRunner.Then("JSON exists \'refresh_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.Then("JSON \'token_type\'=\'Bearer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use authorization_code grant type to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "Token")]
        [Xunit.TraitAttribute("Description", "Use authorization_code grant type to get an access token")]
        public virtual void UseAuthorization_CodeGrantTypeToGetAnAccessToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use authorization_code grant type to get an access token", null, ((string[])(null)));
#line 43
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table30.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 44
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table30, "When ");
#line 48
 testRunner.And("add user consent : user=\'administrator\', scope=\'scope1\', clientId=\'f3d35cce-de69-" +
                    "45bf-958c-4a8796f8ed37\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table31.AddRow(new string[] {
                        "response_type",
                        "code"});
            table31.AddRow(new string[] {
                        "client_id",
                        "f3d35cce-de69-45bf-958c-4a8796f8ed37"});
            table31.AddRow(new string[] {
                        "state",
                        "state"});
            table31.AddRow(new string[] {
                        "redirect_uri",
                        "http://localhost:8080"});
            table31.AddRow(new string[] {
                        "response_mode",
                        "query"});
#line 50
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table31, "And ");
#line 58
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table32.AddRow(new string[] {
                        "client_id",
                        "f3d35cce-de69-45bf-958c-4a8796f8ed37"});
            table32.AddRow(new string[] {
                        "client_secret",
                        "BankCvSecret"});
            table32.AddRow(new string[] {
                        "grant_type",
                        "authorization_code"});
            table32.AddRow(new string[] {
                        "code",
                        "$code$"});
            table32.AddRow(new string[] {
                        "redirect_uri",
                        "http://localhost:8080"});
#line 60
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table32, "And ");
#line 68
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
 testRunner.Then("JSON exists \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 72
 testRunner.Then("JSON exists \'refresh_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 73
 testRunner.Then("JSON \'token_type\'=\'Bearer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use refresh_token grant type to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "Token")]
        [Xunit.TraitAttribute("Description", "Use refresh_token grant type to get an access token")]
        public virtual void UseRefresh_TokenGrantTypeToGetAnAccessToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use refresh_token grant type to get an access token", null, ((string[])(null)));
#line 75
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table33.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 76
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table33, "When ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table34.AddRow(new string[] {
                        "client_id",
                        "f3d35cce-de69-45bf-958c-4a8796f8ed37"});
            table34.AddRow(new string[] {
                        "client_secret",
                        "BankCvSecret"});
            table34.AddRow(new string[] {
                        "scope",
                        "scope1"});
            table34.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 80
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table34, "And ");
#line 87
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.And("extract parameter \'refresh_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table35.AddRow(new string[] {
                        "client_id",
                        "f3d35cce-de69-45bf-958c-4a8796f8ed37"});
            table35.AddRow(new string[] {
                        "client_secret",
                        "BankCvSecret"});
            table35.AddRow(new string[] {
                        "refresh_token",
                        "$refresh_token$"});
            table35.AddRow(new string[] {
                        "grant_type",
                        "refresh_token"});
#line 90
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table35, "And ");
#line 97
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 100
 testRunner.Then("JSON exists \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 101
 testRunner.Then("JSON exists \'refresh_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 102
 testRunner.Then("JSON \'token_type\'=\'Bearer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Revoke refresh_token")]
        [Xunit.TraitAttribute("FeatureTitle", "Token")]
        [Xunit.TraitAttribute("Description", "Revoke refresh_token")]
        public virtual void RevokeRefresh_Token()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revoke refresh_token", null, ((string[])(null)));
#line 104
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Kid",
                        "AlgName"});
            table36.AddRow(new string[] {
                        "SIG",
                        "1",
                        "RS256"});
#line 105
 testRunner.When("add JSON web key to Authorization Server and store into \'jwks\'", ((string)(null)), table36, "When ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table37.AddRow(new string[] {
                        "client_id",
                        "f3d35cce-de69-45bf-958c-4a8796f8ed37"});
            table37.AddRow(new string[] {
                        "client_secret",
                        "BankCvSecret"});
            table37.AddRow(new string[] {
                        "scope",
                        "scope1"});
            table37.AddRow(new string[] {
                        "grant_type",
                        "client_credentials"});
#line 109
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table37, "And ");
#line 116
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
 testRunner.And("extract parameter \'refresh_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table38.AddRow(new string[] {
                        "token",
                        "$refresh_token$"});
            table38.AddRow(new string[] {
                        "client_id",
                        "f3d35cce-de69-45bf-958c-4a8796f8ed37"});
            table38.AddRow(new string[] {
                        "client_secret",
                        "BankCvSecret"});
#line 119
 testRunner.And("execute HTTP POST request \'http://localhost/token/revoke\'", ((string)(null)), table38, "And ");
#line 125
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TokenFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TokenFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
