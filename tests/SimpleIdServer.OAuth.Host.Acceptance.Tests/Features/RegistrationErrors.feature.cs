// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.OAuth.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RegistrationErrorsFeature : Xunit.IClassFixture<RegistrationErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RegistrationErrors.feature"
#line hidden
        
        public RegistrationErrorsFeature(RegistrationErrorsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RegistrationErrors", "\tCheck errors returned by client registration endpoint", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when grant_type is not supported")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when grant_type is not supported")]
        public virtual void ErrorIsReturnedWhenGrant_TypeIsNotSupported()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when grant_type is not supported", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table24.AddRow(new string[] {
                        "grant_types",
                        "[a,b]"});
#line 5
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table24, "When ");
#line 9
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
 testRunner.Then("JSON \'error_description\'=\'grant types a,b are not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when token_endpoint_auth_method is not supported")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when token_endpoint_auth_method is not supported")]
        public virtual void ErrorIsReturnedWhenToken_Endpoint_Auth_MethodIsNotSupported()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when token_endpoint_auth_method is not supported", null, ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table25.AddRow(new string[] {
                        "token_endpoint_auth_method",
                        "invalid"});
#line 15
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table25, "When ");
#line 19
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 22
 testRunner.Then("JSON \'error_description\'=\'unknown authentication method : invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when response_types is not supported")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when response_types is not supported")]
        public virtual void ErrorIsReturnedWhenResponse_TypesIsNotSupported()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when response_types is not supported", null, ((string[])(null)));
#line 24
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table26.AddRow(new string[] {
                        "response_types",
                        "[a,b]"});
#line 25
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table26, "When ");
#line 29
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
 testRunner.Then("JSON \'error_description\'=\'response types a,b are not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when response_type is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when response_type is missing")]
        public virtual void ErrorIsReturnedWhenResponse_TypeIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when response_type is missing", null, ((string[])(null)));
#line 34
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table27.AddRow(new string[] {
                        "response_types",
                        "[token]"});
            table27.AddRow(new string[] {
                        "grant_types",
                        "[implicit,authorization_code]"});
#line 35
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table27, "When ");
#line 40
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
 testRunner.Then("JSON \'error_description\'=\'valid response type must be passed for the grant type a" +
                    "uthorization_code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when redirect_uris is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when redirect_uris is missing")]
        public virtual void ErrorIsReturnedWhenRedirect_UrisIsMissing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when redirect_uris is missing", null, ((string[])(null)));
#line 45
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table28.AddRow(new string[] {
                        "response_types",
                        "[token]"});
            table28.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
#line 46
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table28, "When ");
#line 51
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
 testRunner.Then("JSON \'error_description\'=\'missing parameter redirect_uris\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when redirect_uris is invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when redirect_uris is invalid")]
        public virtual void ErrorIsReturnedWhenRedirect_UrisIsInvalid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when redirect_uris is invalid", null, ((string[])(null)));
#line 56
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table29.AddRow(new string[] {
                        "response_types",
                        "[token]"});
            table29.AddRow(new string[] {
                        "grant_types",
                        "[implicit]"});
            table29.AddRow(new string[] {
                        "redirect_uris",
                        "[invalid]"});
#line 57
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table29, "When ");
#line 63
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.Then("JSON \'error\'=\'invalid_redirect_uri\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
 testRunner.Then("JSON \'error_description\'=\'redirect uri invalid is not correct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when scope is not supported")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when scope is not supported")]
        public virtual void ErrorIsReturnedWhenScopeIsNotSupported()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when scope is not supported", null, ((string[])(null)));
#line 68
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table30.AddRow(new string[] {
                        "scope",
                        "a"});
            table30.AddRow(new string[] {
                        "redirect_uris",
                        "[http://localhost]"});
#line 69
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table30, "When ");
#line 74
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 77
 testRunner.Then("JSON \'error_description\'=\'scopes a are not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when software_statement is not a JWS token")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when software_statement is not a JWS token")]
        public virtual void ErrorIsReturnedWhenSoftware_StatementIsNotAJWSToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when software_statement is not a JWS token", null, ((string[])(null)));
#line 79
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table31.AddRow(new string[] {
                        "software_statement",
                        "a"});
#line 80
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table31, "When ");
#line 84
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.Then("JSON \'error\'=\'invalid_software_statement\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 87
 testRunner.Then("JSON \'error_description\'=\'software statement is not a JWS token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when software_statement is a bad JWS token")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when software_statement is a bad JWS token")]
        public virtual void ErrorIsReturnedWhenSoftware_StatementIsABadJWSToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when software_statement is a bad JWS token", null, ((string[])(null)));
#line 89
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table32.AddRow(new string[] {
                        "software_statement",
                        "a.b.c"});
#line 90
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table32, "When ");
#line 94
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.Then("JSON \'error\'=\'invalid_software_statement\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 97
 testRunner.Then("JSON \'error_description\'=\'software statement is not a JWS token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when iss is not correct")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when iss is not correct")]
        public virtual void ErrorIsReturnedWhenIssIsNotCorrect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when iss is not correct", null, ((string[])(null)));
#line 99
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table33.AddRow(new string[] {
                        "iss",
                        "unknown"});
#line 100
 testRunner.When("build software statement", ((string)(null)), table33, "When ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table34.AddRow(new string[] {
                        "software_statement",
                        "$softwareStatement$"});
#line 104
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table34, "When ");
#line 108
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
 testRunner.Then("JSON \'error\'=\'invalid_software_statement\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 111
 testRunner.Then("JSON \'error_description\'=\'software statement issuer is not trusted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when trying to get a client and access token is not passed")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when trying to get a client and access token is not passed")]
        public virtual void ErrorIsReturnedWhenTryingToGetAClientAndAccessTokenIsNotPassed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when trying to get a client and access token is not passed", null, ((string[])(null)));
#line 113
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
#line 114
 testRunner.When("execute HTTP GET request \'http://localhost/register/clientid\'", ((string)(null)), table35, "When ");
#line 117
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 120
 testRunner.Then("JSON \'error\'=\'invalid_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 121
 testRunner.Then("JSON \'error_description\'=\'access token is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when trying to get a client and access token is unknown")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when trying to get a client and access token is unknown")]
        public virtual void ErrorIsReturnedWhenTryingToGetAClientAndAccessTokenIsUnknown()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when trying to get a client and access token is unknown", null, ((string[])(null)));
#line 123
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table36.AddRow(new string[] {
                        "Authorization",
                        "accesstoken"});
#line 124
 testRunner.When("execute HTTP GET request \'http://localhost/register/clientid\'", ((string)(null)), table36, "When ");
#line 128
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 131
 testRunner.Then("JSON \'error\'=\'invalid_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 132
 testRunner.Then("JSON \'error_description\'=\'access token is not correct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when trying to get a client and access token is has been issued" +
            " from a different client")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when trying to get a client and access token is has been issued" +
            " from a different client")]
        public virtual void ErrorIsReturnedWhenTryingToGetAClientAndAccessTokenIsHasBeenIssuedFromADifferentClient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when trying to get a client and access token is has been issued" +
                    " from a different client", null, ((string[])(null)));
#line 134
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table37.AddRow(new string[] {
                        "redirect_uris",
                        "[http://localhost]"});
#line 135
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table37, "When ");
#line 139
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.And("extract parameter \'registration_access_token\' from JSON body into \'firstRegistrat" +
                    "ionAccessToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table38.AddRow(new string[] {
                        "redirect_uris",
                        "[http://localhost]"});
#line 142
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table38, "And ");
#line 146
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.And("extract parameter \'client_id\' from JSON body into \'secondClientId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table39.AddRow(new string[] {
                        "Authorization",
                        "$firstRegistrationAccessToken$"});
#line 149
 testRunner.And("execute HTTP GET request \'http://localhost/register/$secondClientId$\'", ((string)(null)), table39, "And ");
#line 153
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 156
 testRunner.Then("JSON \'error\'=\'invalid_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when trying to update a client and access token is not passed")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when trying to update a client and access token is not passed")]
        public virtual void ErrorIsReturnedWhenTryingToUpdateAClientAndAccessTokenIsNotPassed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when trying to update a client and access token is not passed", null, ((string[])(null)));
#line 158
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table40.AddRow(new string[] {
                        "redirect_uris",
                        "[http://localhost]"});
#line 159
 testRunner.When("execute HTTP PUT JSON request \'http://localhost/register/ClientId\'", ((string)(null)), table40, "When ");
#line 163
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 166
 testRunner.Then("JSON \'error\'=\'invalid_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 167
 testRunner.Then("JSON \'error_description\'=\'access token is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when trying to update the client and access token is invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when trying to update the client and access token is invalid")]
        public virtual void ErrorIsReturnedWhenTryingToUpdateTheClientAndAccessTokenIsInvalid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when trying to update the client and access token is invalid", null, ((string[])(null)));
#line 169
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table41.AddRow(new string[] {
                        "redirect_uris",
                        "[http://localhost]"});
            table41.AddRow(new string[] {
                        "Authorization",
                        "accesstoken"});
#line 170
 testRunner.When("execute HTTP PUT JSON request \'http://localhost/register/ClientId\'", ((string)(null)), table41, "When ");
#line 175
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 178
 testRunner.Then("JSON \'error\'=\'invalid_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 179
 testRunner.Then("JSON \'error_description\'=\'access token is not correct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when trying to update the client and access token has been issu" +
            "ed from a diffrent client")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when trying to update the client and access token has been issu" +
            "ed from a diffrent client")]
        public virtual void ErrorIsReturnedWhenTryingToUpdateTheClientAndAccessTokenHasBeenIssuedFromADiffrentClient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when trying to update the client and access token has been issu" +
                    "ed from a diffrent client", null, ((string[])(null)));
#line 181
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table42.AddRow(new string[] {
                        "redirect_uris",
                        "[http://localhost]"});
#line 182
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table42, "When ");
#line 186
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
 testRunner.And("extract parameter \'registration_access_token\' from JSON body into \'firstRegistrat" +
                    "ionAccessToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table43.AddRow(new string[] {
                        "redirect_uris",
                        "[http://localhost]"});
#line 189
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table43, "And ");
#line 193
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
 testRunner.And("extract parameter \'client_id\' from JSON body into \'secondClientId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table44.AddRow(new string[] {
                        "Authorization",
                        "$firstRegistrationAccessToken$"});
#line 196
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/register/$secondClientId$\'", ((string)(null)), table44, "And ");
#line 200
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 203
 testRunner.Then("JSON \'error\'=\'invalid_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when trying to update the client and client_id is different")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when trying to update the client and client_id is different")]
        public virtual void ErrorIsReturnedWhenTryingToUpdateTheClientAndClient_IdIsDifferent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when trying to update the client and client_id is different", null, ((string[])(null)));
#line 205
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table45.AddRow(new string[] {
                        "redirect_uris",
                        "[http://localhost]"});
#line 206
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table45, "When ");
#line 210
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
 testRunner.And("extract parameter \'registration_access_token\' from JSON body into \'firstRegistrat" +
                    "ionAccessToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
 testRunner.And("extract parameter \'client_id\' from JSON body into \'firstClientId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table46.AddRow(new string[] {
                        "Authorization",
                        "$firstRegistrationAccessToken$"});
            table46.AddRow(new string[] {
                        "client_id",
                        "clientId"});
#line 214
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/register/$firstClientId$\'", ((string)(null)), table46, "And ");
#line 219
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 222
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 223
 testRunner.Then("JSON \'error_description\'=\'client identifier must be identical\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Error is returned when trying to update the client and client_secret is different" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistrationErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when trying to update the client and client_secret is different" +
            "")]
        public virtual void ErrorIsReturnedWhenTryingToUpdateTheClientAndClient_SecretIsDifferent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when trying to update the client and client_secret is different" +
                    "", null, ((string[])(null)));
#line 225
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table47.AddRow(new string[] {
                        "redirect_uris",
                        "[http://localhost]"});
#line 226
 testRunner.When("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table47, "When ");
#line 230
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 231
 testRunner.And("extract parameter \'registration_access_token\' from JSON body into \'firstRegistrat" +
                    "ionAccessToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
 testRunner.And("extract parameter \'client_id\' from JSON body into \'firstClientId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table48.AddRow(new string[] {
                        "Authorization",
                        "$firstRegistrationAccessToken$"});
            table48.AddRow(new string[] {
                        "client_id",
                        "$firstClientId$"});
            table48.AddRow(new string[] {
                        "client_secret",
                        "clientSecret"});
#line 234
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/register/$firstClientId$\'", ((string)(null)), table48, "And ");
#line 240
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 242
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 243
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 244
 testRunner.Then("JSON \'error_description\'=\'client secret must be identical\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RegistrationErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RegistrationErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
