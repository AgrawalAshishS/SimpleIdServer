// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleIdServer.Saml.Idp.EF;

namespace SimpleIdServer.Saml.Idp.EF.Startup.Migrations
{
    [DbContext(typeof(SamlIdpDBContext))]
    [Migration("20210806150430_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SimpleIdServer.Common.Domains.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceRegistrationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OTPCounter")
                        .HasColumnType("int");

                    b.Property<string>("OTPKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SimpleIdServer.Common.Domains.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("SimpleIdServer.Common.Domains.UserCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CredentialType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCredential");
                });

            modelBuilder.Entity("SimpleIdServer.Common.Domains.UserExternalAuthProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Scheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserExternalAuthProvider");
                });

            modelBuilder.Entity("SimpleIdServer.Common.Domains.UserSession", b =>
                {
                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AuthenticationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSession");
                });

            modelBuilder.Entity("SimpleIdServer.Saml.Idp.Domains.RelyingPartyAggregate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AssertionExpirationTimeInSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetadataUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RelyingParties");
                });

            modelBuilder.Entity("SimpleIdServer.Saml.Idp.Domains.RelyingPartyClaimMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelyingPartyAggregateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAttribute")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RelyingPartyAggregateId");

                    b.ToTable("RelyingPartyClaimMapping");
                });

            modelBuilder.Entity("SimpleIdServer.Common.Domains.UserClaim", b =>
                {
                    b.HasOne("SimpleIdServer.Common.Domains.User", null)
                        .WithMany("OAuthUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.Common.Domains.UserCredential", b =>
                {
                    b.HasOne("SimpleIdServer.Common.Domains.User", null)
                        .WithMany("Credentials")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SimpleIdServer.Common.Domains.UserExternalAuthProvider", b =>
                {
                    b.HasOne("SimpleIdServer.Common.Domains.User", null)
                        .WithMany("ExternalAuthProviders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.Common.Domains.UserSession", b =>
                {
                    b.HasOne("SimpleIdServer.Common.Domains.User", null)
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.Saml.Idp.Domains.RelyingPartyClaimMapping", b =>
                {
                    b.HasOne("SimpleIdServer.Saml.Idp.Domains.RelyingPartyAggregate", null)
                        .WithMany("ClaimMappings")
                        .HasForeignKey("RelyingPartyAggregateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.Common.Domains.User", b =>
                {
                    b.Navigation("Credentials");

                    b.Navigation("ExternalAuthProviders");

                    b.Navigation("OAuthUserClaims");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("SimpleIdServer.Saml.Idp.Domains.RelyingPartyAggregate", b =>
                {
                    b.Navigation("ClaimMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
