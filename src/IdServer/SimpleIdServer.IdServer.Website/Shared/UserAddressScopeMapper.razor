@using Fluxor.Blazor.Web.Components;
@using SimpleIdServer.IdServer.UI;
@using SimpleIdServer.IdServer.Website.Models;
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.ClientStore;
@using SimpleIdServer.IdServer.Website.Stores.ScopeStore;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@inherits FluxorComponent
@inject IState<UpdateScopeMapperState> updateScopeMapperState
@inject IDispatcher dispatcher

<RadzenTemplateForm Submit=@SubmitScopeMapper TItem="UserAddressScopeMapperForm" Data=@scopeMapperFom>
    @if (!updateScopeMapperState.Value.IsUpdating && !string.IsNullOrWhiteSpace(updateScopeMapperState.Value.ErrorMessage))
    {
        <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter">@updateScopeMapperState.Value.ErrorMessage</RadzenAlert>
    }

    <UserScopeMapper UserScopeMapperForm="@scopeMapperFom" Scope="@Scope" IsEditModeEnabled="@IsEditModeEnabled"></UserScopeMapper>
    <!-- UserAttributeStreetName -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">User Attribute Name for Street</RadzenText>
        <RadzenTextBox Name="UserAttributeName" @bind-Value="@scopeMapperFom.UserAttributeStreetName" Class="w-100"></RadzenTextBox>
        <p class="text-muted">Name of User Attribute which will be used to map to 'street_address'</p>
    </div>
    <!-- UserAttributeLocalityName -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">User Attribute Name for Locality</RadzenText>
        <RadzenTextBox Name="UserAttributeLocalityName" @bind-Value="@scopeMapperFom.UserAttributeLocalityName" Class="w-100"></RadzenTextBox>
        <p class="text-muted">Name of User Attribute which will be used to map to 'locality'</p>
    </div>
    <!-- UserAttributeRegionName -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">User Attribute Name for Region</RadzenText>
        <RadzenTextBox Name="UserAttributeRegionName" @bind-Value="@scopeMapperFom.UserAttributeRegionName" Class="w-100"></RadzenTextBox>
        <p class="text-muted">Name of User Attribute which will be used to map to 'region'</p>
    </div>
    <!-- UserAttributePostalCodeName -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">User Attribute Name for Postal Code</RadzenText>
        <RadzenTextBox Name="UserAttributePostalCodeName" @bind-Value="@scopeMapperFom.UserAttributePostalCodeName" Class="w-100"></RadzenTextBox>
        <p class="text-muted">Name of User Attribute which will be used to map to 'postal_code'</p>
    </div>
    <!-- UserAttributeCountryName -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">User Attribute Name for Country</RadzenText>
        <RadzenTextBox Name="UserAttributeCountryName" @bind-Value="@scopeMapperFom.UserAttributeCountryName" Class="w-100"></RadzenTextBox>
        <p class="text-muted">Name of User Attribute which will be used to map to 'country'</p>
    </div>
    <!-- UserAttributeFormattedName -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">User Attribute Name for Formatted Address</RadzenText>
        <RadzenTextBox Name="UserAttributeFormattedName" @bind-Value="@scopeMapperFom.UserAttributeFormattedName" Class="w-100"></RadzenTextBox>
        <p class="text-muted">Name of User Attribute which will be used to map to 'formatted'</p>
    </div>
    <RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(updateScopeMapperState.Value.IsUpdating ? "Saving..." : "Save")" Disabled="@(updateScopeMapperState.Value.IsUpdating)" />
</RadzenTemplateForm>
@code {
    [Parameter]
    public EventCallback<ScopeClaimMapper> ScopeMapperSaved { get; set; }
    [Parameter]
    public ScopeClaimMapper ClaimMapper { get; set; } = null!;
    [Parameter]
    public Scope Scope { get; set; } = null!;
    [Parameter]
    public bool IsEditModeEnabled { get; set; } = false;

    record UserAddressScopeMapperForm : BaseUserScopeMapperForm
    {
        public UserAddressScopeMapperForm()
        {
            Name = "address";
            TokenClaimName = "address";
            ClaimJsonType = TokenClaimJsonTypes.JSON;
        }

        public string? UserAttributeStreetName { get; set; } = null;
        public string? UserAttributeLocalityName { get; set; } = null;
        public string? UserAttributeRegionName { get; set; } = null;
        public string? UserAttributePostalCodeName { get; set; } = null;
        public string? UserAttributeCountryName { get; set; } = null;
        public string? UserAttributeFormattedName { get; set; } = null;
    }

    UserAddressScopeMapperForm scopeMapperFom = new UserAddressScopeMapperForm();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (ClaimMapper == null) return;
        scopeMapperFom.Update(ClaimMapper);
    }

    async void SubmitScopeMapper()
    {
        var result = scopeMapperFom.Build();
        result.MapperType = ScopeClaimMapperTypes.ADDRESS;
        result.UserAttributeStreetName = scopeMapperFom.UserAttributeStreetName;
        result.UserAttributeLocalityName = scopeMapperFom.UserAttributeLocalityName;
        result.UserAttributeRegionName = scopeMapperFom.UserAttributeRegionName;
        result.UserAttributePostalCodeName = scopeMapperFom.UserAttributePostalCodeName;
        result.UserAttributeCountryName = scopeMapperFom.UserAttributeCountryName;
        result.UserAttributeFormattedName = scopeMapperFom.UserAttributeFormattedName;
        await ScopeMapperSaved.InvokeAsync(result);
    }
}