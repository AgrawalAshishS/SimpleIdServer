@using Fluxor.Blazor.Web.Components;
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.ClientStore;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@inherits FluxorComponent
@inject IState<UpdateUserState> updateUserState
@inject IDispatcher dispatcher

<RadzenTemplateForm Submit=@SubmitPassword TItem="OTPInfo">
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Type</RadzenText>
        <RadzenDropDown Name="Password" Class="w-100"
                        Data=@otpLst
                        TValue="OTPAlgs"
                        @bind-Value=@selectedAlg
                        TextProperty="Name" ValueProperty="Alg"/>
        <RadzenRequiredValidator Component="Password" Text="Password is required"></RadzenRequiredValidator>
    </div>
    <RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(updateUserState.Value.IsUpdating ? "Saving..." : "Save")" Disabled="@(updateUserState.Value.IsUpdating)" />
</RadzenTemplateForm>

@code {
    [Parameter]
    public EventCallback<UserCredential> CredentialSaved { get; set; }

    record OTPForm
    {
        public OTPAlgs Type { get; set; } = OTPAlgs.TOTP;
    }

    record OTPInfo
    {
        public string Name { get; set; }
        public OTPAlgs Alg { get; set; }
    }

    List<OTPInfo> otpLst = new List<OTPInfo>
    {
        new OTPInfo { Alg = OTPAlgs.TOTP, Name = "TOTP" },
        new OTPInfo { Alg = OTPAlgs.HOTP, Name = "HOTP" }
    };

    OTPAlgs selectedAlg;

    async void SubmitPassword(OTPInfo otp)
    {
        var key = KeyGeneration.GenerateRandomKey(20);
        await CredentialSaved.InvokeAsync(new UserCredential { Value = key.ConvertFromBase32(), OTPAlg = selectedAlg });
    }
}