@using Fluxor.Blazor.Web.Components;
@using SimpleIdServer.IdServer.UI;
@using SimpleIdServer.IdServer.Website.Models;
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.ClientStore;
@using SimpleIdServer.IdServer.Website.Stores.ResourceStore;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@using System.Reflection;
@inherits FluxorComponent
@inject IState<UpdateResourceMapperState> updateResourceMapperState
@inject IDispatcher dispatcher

<RadzenTemplateForm Submit=@SubmitScopeMapper TItem="UserPropertyScopeMapperForm" Data=@scopeMapperFom>
    @if (!updateResourceMapperState.Value.IsUpdating && !string.IsNullOrWhiteSpace(updateResourceMapperState.Value.ErrorMessage))
    {
        <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter">@updateResourceMapperState.Value.ErrorMessage</RadzenAlert>
    }

    <UserScopeMapper UserScopeMapperForm="@scopeMapperFom" Scope="@Scope"></UserScopeMapper>
    <!-- Property -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">User property</RadzenText>
        <RadzenDropDown Name="UserPropertyName" Class="w-100"
                        Data=@userProperties
                        TValue="String"
                        @bind-Value=@scopeMapperFom.UserPropertyName />
        <p class="text-muted">Name of the property</p>
        <RadzenRequiredValidator Component="UserPropertyName" Text="Property is required"></RadzenRequiredValidator>
    </div>
    <RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(updateResourceMapperState.Value.IsUpdating ? "Saving..." : "Save")" Disabled="@(updateResourceMapperState.Value.IsUpdating)" />
</RadzenTemplateForm>
@code {
    [Parameter]
    public EventCallback<ScopeClaimMapper> ScopeMapperSaved { get; set; }
    [Parameter]
    public ScopeClaimMapper ClaimMapper { get; set; } = null!;
    [Parameter]
    public Scope Scope { get; set; } = null!;

    IEnumerable<string> userProperties = new List<string>();

    record UserPropertyScopeMapperForm : BaseUserScopeMapperForm
    {
        public string UserPropertyName { get; set; } = null!;
    }

    UserPropertyScopeMapperForm scopeMapperFom = new UserPropertyScopeMapperForm();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        userProperties = typeof(User).GetProperties(BindingFlags.Instance | BindingFlags.Public)
                .Where(p =>
                {
                    var attr = p.GetCustomAttribute<UserPropertyAttribute>();
                    return attr == null ? false : attr.IsVisible;
                })
                .Select(p => p.Name);
        if (ClaimMapper == null) return;
        scopeMapperFom.Update(ClaimMapper);
        scopeMapperFom.UserPropertyName = ClaimMapper.UserPropertyName;
    }

    async void SubmitScopeMapper()
    {
        var result = scopeMapperFom.Build();
        result.MapperType = ScopeClaimMapperTypes.USERPROPERTY;
        result.UserPropertyName = scopeMapperFom.UserPropertyName;
        await ScopeMapperSaved.InvokeAsync(result);
    }
}