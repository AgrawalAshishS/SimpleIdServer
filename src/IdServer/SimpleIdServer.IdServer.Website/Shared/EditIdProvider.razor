@inherits FluxorComponent
@using Fluxor.Blazor.Web.Components;
@using SimpleIdServer.IdServer.Website.Stores.IdProviderStore;
@inject IState<UpdateIdProviderState> addIdProviderState

@if(!addIdProviderState.Value.IsUpdating && !string.IsNullOrWhiteSpace(addIdProviderState.Value.ErrorMessage))
{
    <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter">@addIdProviderState.Value.ErrorMessage</RadzenAlert>
}

@foreach (var property in AuthSchemeProviderProperties)
{
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">@property.DisplayName</RadzenText>
        <RadzenTextBox @bind-Value="@property.ValueStr" Class="w-100"></RadzenTextBox>
        <p class="text-muted">@property.Description</p>
    </div>
}
<RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(addIdProviderState.Value.IsUpdating ? (IsAddForm ? "Adding..." : "Updating...") : (IsAddForm ? "Add" : "Update"))" Disabled=@addIdProviderState.Value.IsUpdating Click="@(args => AddIdProvider())" />

@code {
    [Parameter]
    public AuthenticationSchemeProviderDefinition IdProviderDef { get; set; }
    [Parameter]
    public AuthenticationSchemeProvider IdProvider { get; set; }
    [Parameter]
    public bool IsAddForm { get; set; } = true;
    [Parameter]
    public EventCallback<IEnumerable<AuthenticationSchemeProviderProperty>> IdProviderSaved { get; set; }

    record AuthSchemeProviderProperty
    {
        public string PropertyName { get; set; }
        public string DisplayName { get; set; }
        public string? Description { get; set; }
        public string? ValueStr { get; set; }
    }

    ICollection<AuthSchemeProviderProperty> AuthSchemeProviderProperties = new List<AuthSchemeProviderProperty>();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (IdProviderDef == null) return;
        AuthSchemeProviderProperties = new List<AuthSchemeProviderProperty>();
        foreach(var property in IdProviderDef.Properties)
        {
            var value = IdProvider?.Properties.SingleOrDefault(p => p.PropertyName == property.PropertyName)?.Value;
            AuthSchemeProviderProperties.Add(new AuthSchemeProviderProperty
            {
                DisplayName = property.DisplayName,
                PropertyName = property.PropertyName,
                Description = property.Description,
                ValueStr = value
            });
        }
    }

    async void AddIdProvider()
    {
        var properties = AuthSchemeProviderProperties.Select(a => new AuthenticationSchemeProviderProperty
        {
            PropertyName = a.PropertyName,
            Value = a.ValueStr 
        });
        await IdProviderSaved.InvokeAsync(properties);
    }
}