@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.ResourceStore;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDispatcher dispatcher
@inject IState<ResourceState> resourceState
@inject IState<UpdateResourceState> updateResourceState
@inject NotificationService notificationService

<RadzenTemplateForm Submit=@UpdateResourceSettings TItem="UpdateResourceSettingsParameter" Data=@updateResourceSettings>
    <!-- Name -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Name</RadzenText>
        <RadzenTextBox Name="Id" @bind-Value="@updateResourceSettings.Name" Class="w-100" Disabled=true></RadzenTextBox>
    </div>
    <!-- Updated at -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Updated at</RadzenText>
        <RadzenDatePicker @bind-Value=@updateResourceSettings.UpdateDateTime DateFormat="d" Class="w-100" Disabled=true />
    </div>
    <!-- Description -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Description</RadzenText>
        <RadzenTextArea Name="Description" @bind-Value="@updateResourceSettings.Description" Class="w-100"></RadzenTextArea>
    </div>
    <!-- IsExposedInConfigrationEdp -->
    <div>
        <RadzenCheckBox Name="IsExposedInConfigrationEdp" @bind-Value="@updateResourceSettings.IsExposedInConfigrationEdp"></RadzenCheckBox>
        <RadzenLabel Text="Is exposed ?" Component="IsExposedInConfigrationEdp" Style="margin-left: 8px; vertical-align: middle;" />
        <p class="text-muted">
            Scope can be exposed by the configuration endpoint <i>@SimpleIdServer.IdServer.Constants.EndPoints.OpenIDConfiguration</i>
        </p>
    </div>
    <RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(updateResourceState.Value.IsUpdating ? "Updating..." : "Update")" Disabled=@updateResourceState.Value.IsUpdating />
</RadzenTemplateForm>
@code {
    [Parameter]
    public SimpleIdServer.IdServer.Domains.Scope Resource { get; set; }

    UpdateResourceSettingsParameter updateResourceSettings = new UpdateResourceSettingsParameter();

    class UpdateResourceSettingsParameter
    {
        public string Name { get; set; } = null!;
        public DateTime UpdateDateTime { get; set; }
        public string? Description { get; set; } = null;
        public bool IsExposedInConfigrationEdp { get; set;}
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if(firstRender)
        {            
            SubscribeToAction<UpdateResourceSuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.ResourceDetailsUpdated });
                StateHasChanged();
            });
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (this.Resource == null) return;
        updateResourceSettings = new UpdateResourceSettingsParameter
        {
            Name = this.Resource.Name,
            UpdateDateTime = this.Resource.CreateDateTime,
            Description = this.Resource.Description,
            IsExposedInConfigrationEdp = this.Resource.IsExposedInConfigurationEdp
        };
    }

    void UpdateResourceSettings(UpdateResourceSettingsParameter parameter)
    {
        var act = new UpdateResourceAction { Description = parameter.Description, IsExposedInConfigurationEdp = parameter.IsExposedInConfigrationEdp, ResourceName = parameter.Name };
        dispatcher.Dispatch(act);
    }
}