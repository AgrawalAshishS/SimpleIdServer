@page "/resources/{id}/mappers/{name}"
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.ResourceStore;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@layout MainLayout
@inject ContextMenuService contextMenuService
@inject DialogService dialogService
@inject IDispatcher dispatcher
@inject IState<ResourceState> resourceState
@inject NotificationService notificationService

@if(resourceState.Value.IsLoading || string.IsNullOrWhiteSpace(name))
{
    <RadzenText class="mt-3 mb-3" Text="Wait..." TextStyle="TextStyle.DisplayH6" />
}
else
{
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/resources" Text="Resources" />
        <RadzenBreadCrumbItem Path=@("/resources/" + id + "/mappers") Text="Resource details" />
        <RadzenBreadCrumbItem Text="Mapper details" />
    </RadzenBreadCrumb>

    <RadzenCard class="m-3">
        @switch (mapper.MapperType)
        {
            case ScopeClaimMapperTypes.USERATTRIBUTE:
                <UserAttributeScopeMapper ScopeMapperSaved="UpdateScopeMapper" Scope="@resourceState.Value.Resource" ClaimMapper="@mapper" IsEditModeEnabled="true"></UserAttributeScopeMapper>
                break;
            case ScopeClaimMapperTypes.USERPROPERTY:
                <UserPropertyScopeMapper ScopeMapperSaved="UpdateScopeMapper" Scope="@resourceState.Value.Resource" ClaimMapper="@mapper" IsEditModeEnabled="true"></UserPropertyScopeMapper>
                break;
            case ScopeClaimMapperTypes.ADDRESS:
                <UserAddressScopeMapper ScopeMapperSaved="UpdateScopeMapper" Scope="@resourceState.Value.Resource" ClaimMapper="@mapper" IsEditModeEnabled="true"></UserAddressScopeMapper>
                break;
            case ScopeClaimMapperTypes.SUBJECT:
                <!-- Name -->
                <div>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Name</RadzenText>
                    <RadzenTextBox Name="Name" @bind-Value="@mapper.Name" Class="w-100" Disabled="true"></RadzenTextBox>
                </div>
                @if (resourceState.Value.Resource.Protocol == ScopeProtocols.OPENID)
                {
                    <!-- Token Claim Name -->
                    <div>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Token Claim Name</RadzenText>
                        <RadzenTextBox Name="TokenClaimName" @bind-Value="@mapper.TokenClaimName" Class="w-100" Disabled=true></RadzenTextBox>
                        <p class="text-muted">Name of the claim to insert into the token</p>
                    </div>
                }
                else
                {
                    <!-- Token Claim Name -->
                    <div>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">SAML Attribute Name</RadzenText>
                        <RadzenTextBox Name="SAMLAttributeName" @bind-Value="@mapper.SAMLAttributeName" Class="w-100"></RadzenTextBox>
                        <p class="text-muted">SAML Attribute Name</p>
                    </div>
                }
                break;
        }
    </RadzenCard>
}


@code {
    [Parameter]
    public string id { get; set; } = null!;
    [Parameter]
    public string name { get; set; } = null!;
    ScopeClaimMapper mapper => resourceState.Value.Resource.ClaimMappers.Single(m => m.Name == name);

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            dispatcher.Dispatch(new GetResourceAction { ResourceName = id });
            SubscribeToAction<UpdateResourceClaimMapperSuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.ResourceClaimMapperUpdated });
                StateHasChanged();
            });
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    void UpdateScopeMapper(ScopeClaimMapper claimMapper)
    {
        claimMapper.Id = Guid.NewGuid().ToString();
        dispatcher.Dispatch(new UpdateResourceClaimMapperAction { ClaimMapper = claimMapper, ResourceName = id });
    }
}