@page "/resources/{id}/{action}"
@using SimpleIdServer.IdServer.Website.Stores.ResourceStore;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@inherits Fluxor.Blazor.Web.Components.FluxorLayout
@inject NotificationService notificationService
@inject NavigationManager navigationManager
@layout MainLayout
@inject IState<ResourceState> resourceState
@inject IDispatcher dispatcher

@if (resourceState.Value.IsLoading)
{    
    <RadzenText class="mt-3 mb-3" Text="Wait..." TextStyle="TextStyle.DisplayH6" />
}
else
{
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/resources" Text="Resources" />
        <RadzenBreadCrumbItem Text="Resources details" />
    </RadzenBreadCrumb>

    <RadzenText class="mt-3 mb-3" Text="@resourceState.Value.Resource?.Name" TextStyle="TextStyle.DisplayH6" />

    <div class="mb-1">
        @if (resourceState.Value.Resource.Type == ScopeTypes.IDENTITY)
        {
            <RadzenBadge Text="Identity Resource" IsPill="true" />
        }
        else
        {
            <RadzenBadge Text="API Resource" IsPill="true" />
        }
    </div>

    <RadzenTabs Change=@OnChange @bind-SelectedIndex="selectedIndex">
        <Tabs>
            <RadzenTabsItem Text="Details">
                <ResourceSettings Resource="@resourceState.Value.Resource"></ResourceSettings>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Mappers">
                <ResourceMappers Resource="@resourceState.Value.Resource"></ResourceMappers>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}

@code {
    Dictionary<string, int> mappingActionNameToIndex = new Dictionary<string, int>
    {
        { "settings", 0 },
        { "mappers", 1 }
    };
    [Parameter]
    public string id { get; set; } = null!;

    [Parameter]
    public string? action { get; set; } = null;

    int selectedIndex = 0;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (string.IsNullOrWhiteSpace(id)) return;
        if (!string.IsNullOrWhiteSpace(action) && mappingActionNameToIndex.ContainsKey(action))
            selectedIndex = mappingActionNameToIndex[action];
        SubscribeToAction<GetResourceFailureAction>((act) =>
        {
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = act.ErrorMessage });
            StateHasChanged();
        });
        dispatcher.Dispatch(new GetResourceAction { ResourceName = id });
    }

    void OnChange(int index)
    {
        var rec = mappingActionNameToIndex.Single(kvp => kvp.Value == index);
        navigationManager.NavigateTo($"/resources/{id}/{rec.Key}");
    }
}