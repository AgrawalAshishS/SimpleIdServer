@page "/idproviders/{id}/{action}"
@using SimpleIdServer.IdServer.Website.Stores.IdProviderStore;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IState<IdProviderState> idProviderState
@inject NotificationService notificationService
@inject NavigationManager navigationManager
@inject IDispatcher dispatcher

@if (idProviderState.Value.IsLoading)
{
    <RadzenText class="mt-3 mb-3" Text="Wait..." TextStyle="TextStyle.DisplayH6" />
}
else
{
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/idproviders" Text="Identity Providers" />
        <RadzenBreadCrumbItem Text="Identity Provider details" />
    </RadzenBreadCrumb>

    <RadzenText class="mt-3 mb-3" Text="@idProviderState.Value.Provider.DisplayName" TextStyle="TextStyle.DisplayH6" />
    
    <RadzenTabs Change=@OnChange @bind-SelectedIndex="selectedIndex">
        <Tabs>            
            <RadzenTabsItem Text="Details">
                <IdProviderDetails IdProvider="@idProviderState.Value.Provider"></IdProviderDetails>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Properties">
                <IdProviderProperties IdProvider="@idProviderState.Value.Provider"></IdProviderProperties>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Mappers">
                <IdProviderMappers IdProvider="@idProviderState.Value.Provider"></IdProviderMappers>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}

@code {
    Dictionary<string, int> mappingActionNameToIndex = new Dictionary<string, int>
    {
        { "details", 0 },
        { "properties", 1 },
        { "mappers", 2 }
    };

    [Parameter]
    public string id { get; set; }
    [Parameter]
    public string action { get; set; }
    int selectedIndex = 0;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (string.IsNullOrWhiteSpace(id)) return;
        if (!string.IsNullOrWhiteSpace(action) && mappingActionNameToIndex.ContainsKey(action))
            selectedIndex = mappingActionNameToIndex[action];
        SubscribeToAction<GetIdProviderFailureAction>((act) =>
        {
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = act.ErrorMessage });
            StateHasChanged();
        });

        dispatcher.Dispatch(new GetIdProviderAction { Id = id });
    }

    void OnChange(int index)
    {
        var rec = mappingActionNameToIndex.Single(kvp => kvp.Value == index);
        navigationManager.NavigateTo($"/idproviders/{id}/{rec.Key}");
    }
}